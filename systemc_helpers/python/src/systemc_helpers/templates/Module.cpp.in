{%- macro connect_axi4_interface(interface) -%}
/* connecting AXI4 interface with name: {{ interface.name }} */
/* is_slave = {{ interface.is_slave }} */
    {%- for signal in AXI4_SIGNALS %}
        {%- if signal not in interface.config.skipped_signals %}
{{ interface.name }}_{{ signal.upper() }}({{ interface.name }}_signals_.{{ signal }});
        {%- endif %}
    {%- endfor -%}
{%- endmacro -%}

{%- macro connect_axi4lite_interface(interface) -%}
/* connecting AXI4-Lite interface with name: {{ interface.name }} */
/* is_slave = {{ interface.is_slave }} */
    {%- for signal in AXI4LITE_SIGNALS %}
        {%- if signal not in interface.config.skipped_signals %}
{{ interface.name }}_{{ signal.upper() }}({{ interface.name }}_signals_.{{ signal }});
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro connect_axis_interface(interface) -%}
/* connecting AXI Stream interface with name: {{ interface.name }} */
/* is_slave = {{ interface.is_slave }} */
    {%- for signal in AXIS_SIGNALS %}
        {%- if signal not in interface.config.skipped_signals %}
{{ interface.name }}_{{ signal.upper() }}({{ interface.name }}_signals_.{{ signal }});
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro connect_interface(interface) -%}
    {% if interface.kind == "Axi4" -%}
        {{ connect_axi4_interface(interface)|indent }}
    {% elif interface.kind == "Axi4lite" -%}
        {{ connect_axi4lite_interface(interface)|indent }}
    {% else -%}
        {{ connect_axis_interface(interface)|indent }}
    {% endif %}
{%- endmacro -%}

#include {{ module.hpp_include_str }}

{% if cpp_includes -%}
/* additional include directories */
{%- for include in cpp_includes %}
#include {{ include }}
{% endfor %}

{% endif -%}

{% if module.namespace -%}
namespace {{ module.namespace }}
{

{% endif -%}

{{ module.name }}::{{ module.name }}(sc_core::sc_module_name const &name):
    {{ module.verilated_name }}(name),
    {% for interface in interfaces -%}
        {{ interface.name }}_signals_("{{ interface.name }}_signals"),
    {% endfor -%}
    {% for interface in interfaces -%}
        {{ interface.name }}_bridge_("{{ interface.name }}_bridge"){{ "," if not loop.last else "" }}
    {% endfor %}
{
    do_connect_();

    /* initialize the map for accessing TLM sockets */
    {%- for interface in interfaces %}
        {%- if interface.is_slave %}
    sockets_["{{ interface.name }}"] = &{{ interface.name }}_bridge_.tgt_socket;
        {%- else %}
    sockets_["{{ interface.name }}"] = &{{ interface.name }}_bridge_.socket;
        {%- endif -%}
    {%- endfor %}

    {% if module.clockreset.reset_active_high -%}
    /* thread that generates the ACTIVE_LOW reset signal */
    SC_THREAD(reset_n_generate_);
    sensitive << {{ module.clockreset.reset_name }};
    {%- else %}
    /* connect the reset signal */
    {{ module.clockreset.reset_name }}(reset_n_);
    {%- endif %}

    do_init_();
}

{% if module.clockreset.reset_active_high %}
void {{ module.name }}::reset_n_generate_()
{
    reset_n_.write(!{{ module.clockreset.reset_name }}.read());
}
{%- endif %}

void {{ module.name }}::do_connect_()
{
    /* initialize bridges */
    {%- for interface in interfaces %}
    {{ interface.name }}_bridge_.clk({{ module.clockreset.clock_name }});
    {{ interface.name }}_bridge_.resetn(reset_n_);
    {% endfor %}


    /* connect bridges */
    {%- for interface in interfaces %}
    {{ interface.name }}_signals_.connect({{ interface.name }}_bridge_);
    {%- endfor %}


    /* connect signals */
    {%- for interface in interfaces %}
    {{ connect_interface(interface) }}
    {% endfor %}
}

void {{ module.name }}::do_init_()
{
    {%- for init_block in init_blocks %}
    {
        {{ init_block|indent(8) }}
    }
    {%- endfor %}

    {%- for export in exports %}
    set("{{export}}", {{export}});
    {%- endfor %}
}
{% for x in class_extra_cpp %}
{{ x }}
{% endfor %}

{% if module.namespace -%}
}
{%- endif %}

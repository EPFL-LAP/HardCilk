
{%- macro generate_interface_signals(interface) -%}
    {%- if interface.kind == "Axi4" -%}
        sctlm::tlm_lib::signals::axi<{{ interface.config._template_args() }}>
    {%- elif interface.kind == "Axi4lite" -%}
        sctlm::tlm_lib::signals::axi_lite<{{ interface.config._template_args() }}>
    {%- else -%}
        sctlm::tlm_lib::signals::axis<{{ interface.config._template_args() }}>
    {%- endif %} {{ interface.name }}_signals_;
{%- endmacro -%}

{%- macro generate_interface_bridge(interface) -%}
    {%- if interface.is_slave -%}
        {%- if interface.kind == "Axi4" -%}
            sctlm::tlm_lib::bridges::tlm2axi<{{ interface.config._template_args() }}>
        {%- elif interface.kind == "Axi4lite" -%}
            sctlm::tlm_lib::bridges::tlm2axilite<{{ interface.config._template_args() }}>
        {%- else -%}
            sctlm::tlm_lib::bridges::tlm2axis<{{ interface.config._template_args() }}>
        {%- endif -%}
    {%- else -%}
        {%- if interface.kind == "Axi4" -%}
            sctlm::tlm_lib::bridges::axi2tlm<{{ interface.config._template_args() }}>
        {%- elif interface.kind == "Axi4lite" -%}
            sctlm::tlm_lib::bridges::axilite2tlm<{{ interface.config._template_args() }}>
        {%- else -%}
            sctlm::tlm_lib::bridges::axis2tlm<{{ interface.config._template_args() }}>
        {%- endif -%}
    {%- endif %} {{ interface.name }}_bridge_;
{%- endmacro -%}

#ifndef __GENERATED_{{ module.name.upper() }}_INCLUDED_
#define __GENERATED_{{ module.name.upper() }}_INCLUDED_

#include <unordered_map>
#include <string>

#include <systemc>
#include <tlm>

#include <tlm_utils/simple_initiator_socket.h>
#include <tlm_utils/simple_target_socket.h>

#include <sctlm/tlm_lib/bridges/axi2tlm.hpp>
#include <sctlm/tlm_lib/bridges/axilite2tlm.hpp>
#include <sctlm/tlm_lib/bridges/axis2tlm.hpp>
#include <sctlm/tlm_lib/bridges/tlm2axi.hpp>
#include <sctlm/tlm_lib/bridges/tlm2axilite.hpp>
#include <sctlm/tlm_lib/bridges/tlm2axis.hpp>

#include <sctlm/tlm_lib/signals/axi.hpp>
#include <sctlm/tlm_lib/signals/axilite.hpp>
#include <sctlm/tlm_lib/signals/axis.hpp>

#include <sctlm/tlm_lib/tlm_module.hpp>

{% if hpp_includes -%}
/* additional include directories */
{%- for include in hpp_includes %}
#include {{ include }}
{% endfor %}

{% endif -%}

/* Verilator-generated header */
#include {{ module.verilated_include_str }}

{% if module.namespace -%}
namespace {{ module.namespace }}
{

{% endif -%}

struct {{ module.name }} :
    {{ module.verilated_name }},
    sctlm::tlm_lib::tlm_module
{
    SC_HAS_PROCESS({{ module.name }});

    explicit {{ module.name }}(sc_core::sc_module_name const &name);

    /**
      * @brief Find a TLM socket for the interface with the given name.
      * @note Throws if such an interface does not exist.
      *
      */
    tlm::tlm_base_socket_if *get_socket(const std::string &name = "") override
    {
        return sockets_.at(name);
    }

    sc_core::sc_module* systemc_module() noexcept override {
        return this;
    }

    sc_core::sc_module const* systemc_module() const noexcept override {
        return this;
    }

#if defined({{ module.verilated_trace_macro }})
    void verilated_trace(VerilatedVcdC* tfp, int levels, int options = 0) {
        {{ module.verilated_name }}::trace(tfp, levels, options);
    }
#endif
    {% for x in class_extra_hpp %}
    {{ x|indent }}
    {% endfor %}

private:
    /** @note Bridges require ACTIVE_LOW reset. */
    sc_core::sc_signal<bool> reset_n_;

    /* Interface signals */
    {%- for interface in interfaces %}
    {{ generate_interface_signals(interface) }}
    {%- endfor %}

    /* TLM bridges */
    {%- for interface in interfaces %}
    {{ generate_interface_bridge(interface) }}
    {%- endfor %}

    /** @brief Mapping between interface names to TLM sockets. */
    std::unordered_map<std::string, tlm::tlm_base_socket_if *> sockets_;

    {% if module.clockreset.reset_active_high %}
    /** @brief Generates the ACTIVE_LOW reset signal. */
    void reset_n_generate_();
    {%- endif %}

    /** @brief Performs the connections of interfaces. */
    void do_connect_();

    /** @brief Calls the initialization code. */
    void do_init_();
};

{% if module.namespace -%}
}
{%- endif %}

#endif // __GENERATED_{{ module.name.upper() }}_INCLUDED_


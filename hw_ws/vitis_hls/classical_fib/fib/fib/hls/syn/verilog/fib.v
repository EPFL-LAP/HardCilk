// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fib_fib,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1672,HLS_SYN_LUT=2700,HLS_VERSION=2024_1}" *)

module fib (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        taskIn_TDATA,
        taskIn_TVALID,
        taskIn_TREADY,
        taskOut_TDATA,
        taskOut_TVALID,
        taskOut_TREADY,
        argOut_TDATA,
        argOut_TVALID,
        argOut_TREADY,
        closureIn_TDATA,
        closureIn_TVALID,
        closureIn_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [127:0] taskIn_TDATA;
input   taskIn_TVALID;
output   taskIn_TREADY;
output  [127:0] taskOut_TDATA;
output   taskOut_TVALID;
input   taskOut_TREADY;
output  [63:0] argOut_TDATA;
output   argOut_TVALID;
input   argOut_TREADY;
input  [63:0] closureIn_TDATA;
input   closureIn_TVALID;
output   closureIn_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] mem;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state18;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state19;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state13;
reg    taskIn_TDATA_blk_n;
reg    taskOut_TDATA_blk_n;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [0:0] icmp_ln21_reg_639;
reg    argOut_TDATA_blk_n;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg    closureIn_TDATA_blk_n;
wire   [0:0] icmp_ln21_fu_297_p2;
wire   [63:0] args_cont_fu_273_p1;
reg   [63:0] args_cont_reg_626;
reg   [63:0] args_n_reg_632;
reg   [63:0] sum_addr_reg_643;
wire   [63:0] add_ln43_fu_303_p2;
reg   [63:0] add_ln43_reg_649;
wire   [2:0] trunc_ln43_fu_309_p1;
reg   [2:0] trunc_ln43_reg_656;
reg   [60:0] trunc_ln43_4_reg_662;
reg   [60:0] trunc_ln3_reg_667;
reg   [31:0] trunc_ln_reg_672;
wire   [2:0] trunc_ln23_fu_361_p1;
reg   [2:0] trunc_ln23_reg_677;
reg   [60:0] trunc_ln23_1_reg_683;
wire   [7:0] shl_ln43_fu_378_p2;
reg   [7:0] shl_ln43_reg_688;
wire   [57:0] shl_ln43_2_fu_395_p2;
reg   [57:0] shl_ln43_2_reg_693;
wire   [2:0] trunc_ln43_1_fu_416_p1;
reg   [2:0] trunc_ln43_1_reg_704;
reg   [60:0] trunc_ln43_5_reg_709;
wire   [7:0] shl_ln43_3_fu_437_p2;
reg   [7:0] shl_ln43_3_reg_714;
wire   [2:0] trunc_ln43_2_fu_458_p1;
reg   [2:0] trunc_ln43_2_reg_725;
reg   [60:0] trunc_ln43_6_reg_730;
wire   [7:0] shl_ln43_4_fu_475_p2;
reg   [7:0] shl_ln43_4_reg_735;
wire   [2:0] trunc_ln43_3_fu_496_p1;
reg   [2:0] trunc_ln43_3_reg_746;
reg   [60:0] trunc_ln43_7_reg_751;
wire   [7:0] shl_ln43_5_fu_513_p2;
reg   [7:0] shl_ln43_5_reg_756;
wire   [127:0] p_s_fu_549_p3;
wire   [127:0] p_1_fu_568_p3;
wire   [7:0] shl_ln23_fu_583_p2;
reg   [7:0] shl_ln23_reg_784;
wire   [63:0] shl_ln23_2_fu_600_p2;
reg   [63:0] shl_ln23_2_reg_789;
wire   [0:0] icmp_ln25_fu_616_p2;
reg   [0:0] icmp_ln25_reg_800;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [63:0] gmem_WDATA;
reg   [7:0] gmem_WSTRB;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [63:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire  signed [63:0] sext_ln43_fu_401_p1;
wire  signed [63:0] sext_ln43_1_fu_443_p1;
wire  signed [63:0] sext_ln43_2_fu_481_p1;
wire  signed [63:0] sext_ln43_3_fu_519_p1;
wire  signed [63:0] sext_ln45_fu_529_p1;
wire  signed [63:0] sext_ln23_fu_606_p1;
reg    ap_block_state3_io;
wire   [63:0] zext_ln43_5_fu_430_p1;
reg    ap_block_state4_io;
reg    ap_block_state5_io;
reg    ap_block_state6_io;
reg    ap_block_state1;
reg    ap_block_state15;
reg    ap_block_state25;
wire    ap_CS_fsm_state14;
wire   [62:0] tmp_fu_287_p4;
wire   [63:0] add_ln43_4_fu_323_p2;
wire   [63:0] add_ln43_5_fu_329_p2;
wire   [63:0] add_ln23_fu_355_p2;
wire   [7:0] zext_ln43_fu_375_p1;
wire   [5:0] shl_ln43_1_fu_384_p3;
wire   [57:0] zext_ln43_1_fu_391_p1;
wire   [63:0] add_ln43_1_fu_411_p2;
wire   [7:0] zext_ln43_2_fu_434_p1;
wire   [63:0] add_ln43_2_fu_453_p2;
wire   [7:0] zext_ln43_3_fu_472_p1;
wire   [63:0] add_ln43_3_fu_491_p2;
wire   [7:0] zext_ln43_4_fu_510_p1;
wire   [63:0] fib_args1_n_fu_544_p2;
wire   [63:0] x_addr_fu_539_p2;
wire   [63:0] fib_args2_n_fu_563_p2;
wire   [63:0] y_addr_fu_558_p2;
wire   [7:0] zext_ln23_1_fu_580_p1;
wire   [5:0] shl_ln23_1_fu_589_p3;
wire   [63:0] zext_ln23_fu_577_p1;
wire   [63:0] zext_ln23_2_fu_596_p1;
wire    regslice_both_taskOut_U_apdone_blk;
wire    regslice_both_argOut_U_apdone_blk;
reg    ap_block_state17;
reg    ap_block_state17_io;
reg   [25:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    regslice_both_taskIn_U_apdone_blk;
wire   [127:0] taskIn_TDATA_int_regslice;
wire    taskIn_TVALID_int_regslice;
reg    taskIn_TREADY_int_regslice;
wire    regslice_both_taskIn_U_ack_in;
reg   [127:0] taskOut_TDATA_int_regslice;
reg    taskOut_TVALID_int_regslice;
wire    taskOut_TREADY_int_regslice;
wire    regslice_both_taskOut_U_vld_out;
reg    argOut_TVALID_int_regslice;
wire    argOut_TREADY_int_regslice;
wire    regslice_both_argOut_U_vld_out;
wire    regslice_both_closureIn_U_apdone_blk;
wire   [63:0] closureIn_TDATA_int_regslice;
wire    closureIn_TVALID_int_regslice;
reg    closureIn_TREADY_int_regslice;
wire    regslice_both_closureIn_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
end

fib_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem(mem)
);

fib_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 64 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 0 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(1'b0),
    .I_CH0_ARREADY(gmem_ARREADY),
    .I_CH0_ARADDR(64'd0),
    .I_CH0_ARLEN(32'd0),
    .I_CH0_RVALID(gmem_RVALID),
    .I_CH0_RREADY(1'b0),
    .I_CH0_RDATA(gmem_RDATA),
    .I_CH0_RFIFONUM(gmem_RFIFONUM),
    .I_CH0_AWVALID(gmem_AWVALID),
    .I_CH0_AWREADY(gmem_AWREADY),
    .I_CH0_AWADDR(gmem_AWADDR),
    .I_CH0_AWLEN(gmem_AWLEN),
    .I_CH0_WVALID(gmem_WVALID),
    .I_CH0_WREADY(gmem_WREADY),
    .I_CH0_WDATA(gmem_WDATA),
    .I_CH0_WSTRB(gmem_WSTRB),
    .I_CH0_BVALID(gmem_BVALID),
    .I_CH0_BREADY(gmem_BREADY)
);

fib_regslice_both #(
    .DataWidth( 128 ))
regslice_both_taskIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskIn_TDATA),
    .vld_in(taskIn_TVALID),
    .ack_in(regslice_both_taskIn_U_ack_in),
    .data_out(taskIn_TDATA_int_regslice),
    .vld_out(taskIn_TVALID_int_regslice),
    .ack_out(taskIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_taskIn_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 128 ))
regslice_both_taskOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskOut_TDATA_int_regslice),
    .vld_in(taskOut_TVALID_int_regslice),
    .ack_in(taskOut_TREADY_int_regslice),
    .data_out(taskOut_TDATA),
    .vld_out(regslice_both_taskOut_U_vld_out),
    .ack_out(taskOut_TREADY),
    .apdone_blk(regslice_both_taskOut_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 64 ))
regslice_both_argOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(args_cont_reg_626),
    .vld_in(argOut_TVALID_int_regslice),
    .ack_in(argOut_TREADY_int_regslice),
    .data_out(argOut_TDATA),
    .vld_out(regslice_both_argOut_U_vld_out),
    .ack_out(argOut_TREADY),
    .apdone_blk(regslice_both_argOut_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 64 ))
regslice_both_closureIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(closureIn_TDATA),
    .vld_in(closureIn_TVALID),
    .ack_in(regslice_both_closureIn_U_ack_in),
    .data_out(closureIn_TDATA_int_regslice),
    .vld_out(closureIn_TVALID_int_regslice),
    .ack_out(closureIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_closureIn_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln43_reg_649 <= add_ln43_fu_303_p2;
        args_cont_reg_626 <= args_cont_fu_273_p1;
        args_n_reg_632 <= {{taskIn_TDATA_int_regslice[127:64]}};
        icmp_ln21_reg_639 <= icmp_ln21_fu_297_p2;
        sum_addr_reg_643 <= closureIn_TDATA_int_regslice;
        trunc_ln23_1_reg_683 <= {{add_ln23_fu_355_p2[63:3]}};
        trunc_ln23_reg_677 <= trunc_ln23_fu_361_p1;
        trunc_ln3_reg_667 <= {{add_ln43_5_fu_329_p2[63:3]}};
        trunc_ln43_4_reg_662 <= {{add_ln43_fu_303_p2[63:3]}};
        trunc_ln43_reg_656 <= trunc_ln43_fu_309_p1;
        trunc_ln_reg_672 <= {{taskIn_TDATA_int_regslice[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        icmp_ln25_reg_800 <= icmp_ln25_fu_616_p2;
        shl_ln23_2_reg_789 <= shl_ln23_2_fu_600_p2;
        shl_ln23_reg_784 <= shl_ln23_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shl_ln43_2_reg_693 <= shl_ln43_2_fu_395_p2;
        shl_ln43_reg_688 <= shl_ln43_fu_378_p2;
        trunc_ln43_1_reg_704 <= trunc_ln43_1_fu_416_p1;
        trunc_ln43_5_reg_709 <= {{add_ln43_1_fu_411_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shl_ln43_3_reg_714 <= shl_ln43_3_fu_437_p2;
        trunc_ln43_2_reg_725 <= trunc_ln43_2_fu_458_p1;
        trunc_ln43_6_reg_730 <= {{add_ln43_2_fu_453_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shl_ln43_4_reg_735 <= shl_ln43_4_fu_475_p2;
        trunc_ln43_3_reg_746 <= trunc_ln43_3_fu_496_p1;
        trunc_ln43_7_reg_751 <= {{add_ln43_3_fu_491_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shl_ln43_5_reg_756 <= shl_ln43_5_fu_513_p2;
    end
end

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b1;

always @ (*) begin
    if (((taskOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state15))) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((taskOut_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state17_io) | (1'b1 == ap_block_state17))) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if (((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state25))) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((argOut_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3_io)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4_io)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5_io)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6_io)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0))) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | (1'b1 == ap_block_state17)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state17_io) | (1'b1 == ap_block_state17)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        argOut_TDATA_blk_n = argOut_TREADY_int_regslice;
    end else begin
        argOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state25)) & (1'b1 == ap_CS_fsm_state25))) begin
        argOut_TVALID_int_regslice = 1'b1;
    end else begin
        argOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln21_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        closureIn_TDATA_blk_n = closureIn_TVALID_int_regslice;
    end else begin
        closureIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (icmp_ln21_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        closureIn_TREADY_int_regslice = 1'b1;
    end else begin
        closureIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        gmem_AWADDR = sext_ln23_fu_606_p1;
    end else if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        gmem_AWADDR = sext_ln45_fu_529_p1;
    end else if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_AWADDR = sext_ln43_3_fu_519_p1;
    end else if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_AWADDR = sext_ln43_2_fu_481_p1;
    end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        gmem_AWADDR = sext_ln43_1_fu_443_p1;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_AWADDR = sext_ln43_fu_401_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        gmem_AWLEN = 64'd2;
    end else if ((((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)))) begin
        gmem_AWLEN = 64'd1;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem_WDATA = shl_ln23_2_reg_789;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        gmem_WDATA = args_cont_reg_626;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        gmem_WDATA = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_WDATA = zext_ln43_5_fu_430_p1;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem_WSTRB = shl_ln23_reg_784;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        gmem_WSTRB = 8'd255;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem_WSTRB = shl_ln43_5_reg_756;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem_WSTRB = shl_ln43_4_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_WSTRB = shl_ln43_3_reg_714;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_WSTRB = shl_ln43_reg_688;
    end else begin
        gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state19))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TDATA_blk_n = taskIn_TVALID_int_regslice;
    end else begin
        taskIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TREADY_int_regslice = 1'b1;
    end else begin
        taskIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | ((icmp_ln21_reg_639 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        taskOut_TDATA_blk_n = taskOut_TREADY_int_regslice;
    end else begin
        taskOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((taskOut_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        taskOut_TDATA_int_regslice = p_1_fu_568_p3;
    end else if (((1'b0 == ap_block_state15) & (1'b1 == ap_CS_fsm_state15))) begin
        taskOut_TDATA_int_regslice = p_s_fu_549_p3;
    end else begin
        taskOut_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((taskOut_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | (~((taskOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state15)) & (1'b1 == ap_CS_fsm_state15)))) begin
        taskOut_TVALID_int_regslice = 1'b1;
    end else begin
        taskOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (icmp_ln21_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b0 == ap_block_state1) & (icmp_ln21_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~(1'd1 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((taskOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state15)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((taskOut_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((1'b1 == ap_block_state17_io) | (1'b1 == ap_block_state17)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state25)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((argOut_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_355_p2 = (args_cont_fu_273_p1 + mem);

assign add_ln43_1_fu_411_p2 = (add_ln43_reg_649 + 64'd4);

assign add_ln43_2_fu_453_p2 = (add_ln43_reg_649 + 64'd8);

assign add_ln43_3_fu_491_p2 = (add_ln43_reg_649 + 64'd12);

assign add_ln43_4_fu_323_p2 = (mem + 64'd16);

assign add_ln43_5_fu_329_p2 = (add_ln43_4_fu_323_p2 + closureIn_TDATA_int_regslice);

assign add_ln43_fu_303_p2 = (closureIn_TDATA_int_regslice + mem);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((taskIn_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0) | ((closureIn_TVALID_int_regslice == 1'b0) & (icmp_ln21_fu_297_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state15 = ((taskOut_TREADY_int_regslice == 1'b0) | (1'd1 == 1'd0));
end

always @ (*) begin
    ap_block_state17 = ((regslice_both_argOut_U_apdone_blk == 1'b1) | (regslice_both_taskOut_U_apdone_blk == 1'b1) | ((taskOut_TREADY_int_regslice == 1'b0) & (icmp_ln21_reg_639 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((taskOut_TREADY_int_regslice == 1'b0) & (icmp_ln21_reg_639 == 1'd0));
end

always @ (*) begin
    ap_block_state25 = ((argOut_TREADY_int_regslice == 1'b0) | (icmp_ln25_reg_800 == 1'd0));
end

always @ (*) begin
    ap_block_state3_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign argOut_TVALID = regslice_both_argOut_U_vld_out;

assign args_cont_fu_273_p1 = taskIn_TDATA_int_regslice[63:0];

assign closureIn_TREADY = regslice_both_closureIn_U_ack_in;

assign fib_args1_n_fu_544_p2 = ($signed(args_n_reg_632) + $signed(64'd18446744073709551615));

assign fib_args2_n_fu_563_p2 = ($signed(args_n_reg_632) + $signed(64'd18446744073709551614));

assign icmp_ln21_fu_297_p2 = ((tmp_fu_287_p4 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_616_p2 = ((args_n_reg_632 == zext_ln23_fu_577_p1) ? 1'b1 : 1'b0);

assign p_1_fu_568_p3 = {{fib_args2_n_fu_563_p2}, {y_addr_fu_558_p2}};

assign p_s_fu_549_p3 = {{fib_args1_n_fu_544_p2}, {x_addr_fu_539_p2}};

assign sext_ln23_fu_606_p1 = $signed(trunc_ln23_1_reg_683);

assign sext_ln43_1_fu_443_p1 = $signed(trunc_ln43_5_reg_709);

assign sext_ln43_2_fu_481_p1 = $signed(trunc_ln43_6_reg_730);

assign sext_ln43_3_fu_519_p1 = $signed(trunc_ln43_7_reg_751);

assign sext_ln43_fu_401_p1 = $signed(trunc_ln43_4_reg_662);

assign sext_ln45_fu_529_p1 = $signed(trunc_ln3_reg_667);

assign shl_ln23_1_fu_589_p3 = {{trunc_ln23_reg_677}, {3'd0}};

assign shl_ln23_2_fu_600_p2 = zext_ln23_fu_577_p1 << zext_ln23_2_fu_596_p1;

assign shl_ln23_fu_583_p2 = 8'd15 << zext_ln23_1_fu_580_p1;

assign shl_ln43_1_fu_384_p3 = {{trunc_ln43_reg_656}, {3'd0}};

assign shl_ln43_2_fu_395_p2 = 58'd2 << zext_ln43_1_fu_391_p1;

assign shl_ln43_3_fu_437_p2 = 8'd15 << zext_ln43_2_fu_434_p1;

assign shl_ln43_4_fu_475_p2 = 8'd15 << zext_ln43_3_fu_472_p1;

assign shl_ln43_5_fu_513_p2 = 8'd15 << zext_ln43_4_fu_510_p1;

assign shl_ln43_fu_378_p2 = 8'd15 << zext_ln43_fu_375_p1;

assign taskIn_TREADY = regslice_both_taskIn_U_ack_in;

assign taskOut_TVALID = regslice_both_taskOut_U_vld_out;

assign tmp_fu_287_p4 = {{taskIn_TDATA_int_regslice[127:65]}};

assign trunc_ln23_fu_361_p1 = add_ln23_fu_355_p2[2:0];

assign trunc_ln43_1_fu_416_p1 = add_ln43_1_fu_411_p2[2:0];

assign trunc_ln43_2_fu_458_p1 = add_ln43_2_fu_453_p2[2:0];

assign trunc_ln43_3_fu_496_p1 = add_ln43_3_fu_491_p2[2:0];

assign trunc_ln43_fu_309_p1 = add_ln43_fu_303_p2[2:0];

assign x_addr_fu_539_p2 = (sum_addr_reg_643 + 64'd4);

assign y_addr_fu_558_p2 = (sum_addr_reg_643 + 64'd8);

assign zext_ln23_1_fu_580_p1 = trunc_ln23_reg_677;

assign zext_ln23_2_fu_596_p1 = shl_ln23_1_fu_589_p3;

assign zext_ln23_fu_577_p1 = trunc_ln_reg_672;

assign zext_ln43_1_fu_391_p1 = shl_ln43_1_fu_384_p3;

assign zext_ln43_2_fu_434_p1 = trunc_ln43_1_reg_704;

assign zext_ln43_3_fu_472_p1 = trunc_ln43_2_reg_725;

assign zext_ln43_4_fu_510_p1 = trunc_ln43_3_reg_746;

assign zext_ln43_5_fu_430_p1 = shl_ln43_2_reg_693;

assign zext_ln43_fu_375_p1 = trunc_ln43_reg_656;

endmodule //fib

-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fib is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    taskIn_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    taskIn_TVALID : IN STD_LOGIC;
    taskIn_TREADY : OUT STD_LOGIC;
    taskOut_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    taskOut_TVALID : OUT STD_LOGIC;
    taskOut_TREADY : IN STD_LOGIC;
    argOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    argOut_TVALID : OUT STD_LOGIC;
    argOut_TREADY : IN STD_LOGIC;
    closureIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    closureIn_TVALID : IN STD_LOGIC;
    closureIn_TREADY : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of fib is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fib_fib,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1672,HLS_SYN_LUT=2700,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv58_2 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFE : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal taskIn_TDATA_blk_n : STD_LOGIC;
    signal taskOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln21_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal argOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal closureIn_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln21_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal args_cont_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal args_cont_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal args_n_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_addr_reg_643 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_reg_649 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln43_fu_309_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_reg_656 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_4_reg_662 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln3_reg_667 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_361_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln23_reg_677 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln23_1_reg_683 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln43_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln43_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln43_2_fu_395_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal shl_ln43_2_reg_693 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln43_1_fu_416_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_1_reg_704 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_5_reg_709 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln43_3_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln43_3_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_2_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_2_reg_725 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_6_reg_730 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln43_4_fu_475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln43_4_reg_735 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_3_fu_496_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_3_reg_746 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_7_reg_751 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln43_5_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln43_5_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_549_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_1_fu_568_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln23_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln23_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln23_2_fu_600_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln23_2_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal sext_ln43_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_1_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_2_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_3_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln45_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal zext_ln43_5_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal ap_block_state25 : BOOLEAN;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_fu_287_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln43_4_fu_323_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_5_fu_329_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_fu_355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln43_1_fu_384_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln43_1_fu_391_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal add_ln43_1_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_2_fu_453_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_3_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_3_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_4_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fib_args1_n_fu_544_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_addr_fu_539_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal fib_args2_n_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_addr_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln23_1_fu_589_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_taskOut_U_apdone_blk : STD_LOGIC;
    signal regslice_both_argOut_U_apdone_blk : STD_LOGIC;
    signal ap_block_state17 : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal regslice_both_taskIn_U_apdone_blk : STD_LOGIC;
    signal taskIn_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal taskIn_TVALID_int_regslice : STD_LOGIC;
    signal taskIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_taskIn_U_ack_in : STD_LOGIC;
    signal taskOut_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal taskOut_TVALID_int_regslice : STD_LOGIC;
    signal taskOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_taskOut_U_vld_out : STD_LOGIC;
    signal argOut_TVALID_int_regslice : STD_LOGIC;
    signal argOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_argOut_U_vld_out : STD_LOGIC;
    signal regslice_both_closureIn_U_apdone_blk : STD_LOGIC;
    signal closureIn_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal closureIn_TVALID_int_regslice : STD_LOGIC;
    signal closureIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_closureIn_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fib_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mem : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fib_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component fib_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component fib_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mem => mem);

    gmem_m_axi_U : component fib_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 64,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 0,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => ap_const_logic_0,
        I_CH0_ARREADY => gmem_ARREADY,
        I_CH0_ARADDR => ap_const_lv64_0,
        I_CH0_ARLEN => ap_const_lv32_0,
        I_CH0_RVALID => gmem_RVALID,
        I_CH0_RREADY => ap_const_logic_0,
        I_CH0_RDATA => gmem_RDATA,
        I_CH0_RFIFONUM => gmem_RFIFONUM,
        I_CH0_AWVALID => gmem_AWVALID,
        I_CH0_AWREADY => gmem_AWREADY,
        I_CH0_AWADDR => gmem_AWADDR,
        I_CH0_AWLEN => gmem_AWLEN,
        I_CH0_WVALID => gmem_WVALID,
        I_CH0_WREADY => gmem_WREADY,
        I_CH0_WDATA => gmem_WDATA,
        I_CH0_WSTRB => gmem_WSTRB,
        I_CH0_BVALID => gmem_BVALID,
        I_CH0_BREADY => gmem_BREADY);

    regslice_both_taskIn_U : component fib_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => taskIn_TDATA,
        vld_in => taskIn_TVALID,
        ack_in => regslice_both_taskIn_U_ack_in,
        data_out => taskIn_TDATA_int_regslice,
        vld_out => taskIn_TVALID_int_regslice,
        ack_out => taskIn_TREADY_int_regslice,
        apdone_blk => regslice_both_taskIn_U_apdone_blk);

    regslice_both_taskOut_U : component fib_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => taskOut_TDATA_int_regslice,
        vld_in => taskOut_TVALID_int_regslice,
        ack_in => taskOut_TREADY_int_regslice,
        data_out => taskOut_TDATA,
        vld_out => regslice_both_taskOut_U_vld_out,
        ack_out => taskOut_TREADY,
        apdone_blk => regslice_both_taskOut_U_apdone_blk);

    regslice_both_argOut_U : component fib_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => args_cont_reg_626,
        vld_in => argOut_TVALID_int_regslice,
        ack_in => argOut_TREADY_int_regslice,
        data_out => argOut_TDATA,
        vld_out => regslice_both_argOut_U_vld_out,
        ack_out => argOut_TREADY,
        apdone_blk => regslice_both_argOut_U_apdone_blk);

    regslice_both_closureIn_U : component fib_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => closureIn_TDATA,
        vld_in => closureIn_TVALID,
        ack_in => regslice_both_closureIn_U_ack_in,
        data_out => closureIn_TDATA_int_regslice,
        vld_out => closureIn_TVALID_int_regslice,
        ack_out => closureIn_TREADY_int_regslice,
        apdone_blk => regslice_both_closureIn_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln43_reg_649 <= add_ln43_fu_303_p2;
                args_cont_reg_626 <= args_cont_fu_273_p1;
                args_n_reg_632 <= taskIn_TDATA_int_regslice(127 downto 64);
                icmp_ln21_reg_639 <= icmp_ln21_fu_297_p2;
                sum_addr_reg_643 <= closureIn_TDATA_int_regslice;
                trunc_ln23_1_reg_683 <= add_ln23_fu_355_p2(63 downto 3);
                trunc_ln23_reg_677 <= trunc_ln23_fu_361_p1;
                trunc_ln3_reg_667 <= add_ln43_5_fu_329_p2(63 downto 3);
                trunc_ln43_4_reg_662 <= add_ln43_fu_303_p2(63 downto 3);
                trunc_ln43_reg_656 <= trunc_ln43_fu_309_p1;
                trunc_ln_reg_672 <= taskIn_TDATA_int_regslice(95 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln25_reg_800 <= icmp_ln25_fu_616_p2;
                shl_ln23_2_reg_789 <= shl_ln23_2_fu_600_p2;
                shl_ln23_reg_784 <= shl_ln23_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                shl_ln43_2_reg_693 <= shl_ln43_2_fu_395_p2;
                shl_ln43_reg_688 <= shl_ln43_fu_378_p2;
                trunc_ln43_1_reg_704 <= trunc_ln43_1_fu_416_p1;
                trunc_ln43_5_reg_709 <= add_ln43_1_fu_411_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                shl_ln43_3_reg_714 <= shl_ln43_3_fu_437_p2;
                trunc_ln43_2_reg_725 <= trunc_ln43_2_fu_458_p1;
                trunc_ln43_6_reg_730 <= add_ln43_2_fu_453_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                shl_ln43_4_reg_735 <= shl_ln43_4_fu_475_p2;
                trunc_ln43_3_reg_746 <= trunc_ln43_3_fu_496_p1;
                trunc_ln43_7_reg_751 <= add_ln43_3_fu_491_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                shl_ln43_5_reg_756 <= shl_ln43_5_fu_513_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state25, ap_CS_fsm_state26, icmp_ln21_fu_297_p2, gmem_AWREADY, gmem_WREADY, gmem_BVALID, ap_block_state3_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io, ap_block_state1, ap_block_state15, ap_block_state25, ap_CS_fsm_state14, ap_block_state17, ap_block_state17_io, taskOut_TREADY_int_regslice, argOut_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (icmp_ln21_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (icmp_ln21_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not((ap_const_lv1_1 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((taskOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state15))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((taskOut_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_boolean_1 = ap_block_state17))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if ((not(((argOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((argOut_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_355_p2 <= std_logic_vector(unsigned(args_cont_fu_273_p1) + unsigned(mem));
    add_ln43_1_fu_411_p2 <= std_logic_vector(unsigned(add_ln43_reg_649) + unsigned(ap_const_lv64_4));
    add_ln43_2_fu_453_p2 <= std_logic_vector(unsigned(add_ln43_reg_649) + unsigned(ap_const_lv64_8));
    add_ln43_3_fu_491_p2 <= std_logic_vector(unsigned(add_ln43_reg_649) + unsigned(ap_const_lv64_C));
    add_ln43_4_fu_323_p2 <= std_logic_vector(unsigned(mem) + unsigned(ap_const_lv64_10));
    add_ln43_5_fu_329_p2 <= std_logic_vector(unsigned(add_ln43_4_fu_323_p2) + unsigned(closureIn_TDATA_int_regslice));
    add_ln43_fu_303_p2 <= std_logic_vector(unsigned(closureIn_TDATA_int_regslice) + unsigned(mem));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_1;

    ap_ST_fsm_state15_blk_assign_proc : process(ap_block_state15, taskOut_TREADY_int_regslice)
    begin
        if (((taskOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state15))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(taskOut_TREADY_int_regslice)
    begin
        if ((taskOut_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(ap_block_state17, ap_block_state17_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_boolean_1 = ap_block_state17))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state19_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state25_blk_assign_proc : process(ap_block_state25, argOut_TREADY_int_regslice)
    begin
        if (((argOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25))) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(argOut_TREADY_int_regslice)
    begin
        if ((argOut_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_io)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_io)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_io)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_io)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(gmem_WREADY, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, icmp_ln21_fu_297_p2, taskIn_TVALID_int_regslice, closureIn_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((taskIn_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0) or ((closureIn_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln21_fu_297_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state15_assign_proc : process(taskOut_TREADY_int_regslice)
    begin
                ap_block_state15 <= ((taskOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_lv1_1 = ap_const_lv1_0));
    end process;


    ap_block_state17_assign_proc : process(icmp_ln21_reg_639, regslice_both_taskOut_U_apdone_blk, regslice_both_argOut_U_apdone_blk, taskOut_TREADY_int_regslice)
    begin
                ap_block_state17 <= ((regslice_both_argOut_U_apdone_blk = ap_const_logic_1) or (regslice_both_taskOut_U_apdone_blk = ap_const_logic_1) or ((taskOut_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln21_reg_639 = ap_const_lv1_0)));
    end process;


    ap_block_state17_io_assign_proc : process(icmp_ln21_reg_639, taskOut_TREADY_int_regslice)
    begin
                ap_block_state17_io <= ((taskOut_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln21_reg_639 = ap_const_lv1_0));
    end process;


    ap_block_state25_assign_proc : process(icmp_ln25_reg_800, argOut_TREADY_int_regslice)
    begin
                ap_block_state25 <= ((argOut_TREADY_int_regslice = ap_const_logic_0) or (icmp_ln25_reg_800 = ap_const_lv1_0));
    end process;


    ap_block_state3_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state3_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state4_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state5_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state6_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17, ap_block_state17, ap_block_state17_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_boolean_1 = ap_block_state17))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, ap_block_state17, ap_block_state17_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state17_io) or (ap_const_boolean_1 = ap_block_state17))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    argOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, argOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            argOut_TDATA_blk_n <= argOut_TREADY_int_regslice;
        else 
            argOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    argOut_TVALID <= regslice_both_argOut_U_vld_out;

    argOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state25, ap_block_state25, argOut_TREADY_int_regslice)
    begin
        if ((not(((argOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state25))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            argOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            argOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    args_cont_fu_273_p1 <= taskIn_TDATA_int_regslice(64 - 1 downto 0);

    closureIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln21_fu_297_p2, closureIn_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (icmp_ln21_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            closureIn_TDATA_blk_n <= closureIn_TVALID_int_regslice;
        else 
            closureIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    closureIn_TREADY <= regslice_both_closureIn_U_ack_in;

    closureIn_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, icmp_ln21_fu_297_p2, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (icmp_ln21_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            closureIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            closureIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    fib_args1_n_fu_544_p2 <= std_logic_vector(unsigned(args_n_reg_632) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    fib_args2_n_fu_563_p2 <= std_logic_vector(unsigned(args_n_reg_632) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFE));

    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, gmem_AWREADY, sext_ln43_fu_401_p1, sext_ln43_1_fu_443_p1, sext_ln43_2_fu_481_p1, sext_ln43_3_fu_519_p1, sext_ln45_fu_529_p1, sext_ln23_fu_606_p1, ap_block_state3_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_AWADDR <= sext_ln23_fu_606_p1;
        elsif (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWADDR <= sext_ln45_fu_529_p1;
        elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_AWADDR <= sext_ln43_3_fu_519_p1;
        elsif (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWADDR <= sext_ln43_2_fu_481_p1;
        elsif (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_AWADDR <= sext_ln43_1_fu_443_p1;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWADDR <= sext_ln43_fu_401_p1;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, gmem_AWREADY, ap_block_state3_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWLEN <= ap_const_lv64_2(32 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            gmem_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, gmem_AWREADY, ap_block_state3_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, gmem_WREADY, gmem_BVALID)
    begin
        if ((((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, args_cont_reg_626, shl_ln23_2_reg_789, gmem_BVALID, zext_ln43_5_fu_430_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gmem_WDATA <= shl_ln23_2_reg_789;
        elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_WDATA <= args_cont_reg_626;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WDATA <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_WDATA <= zext_ln43_5_fu_430_p1;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, shl_ln43_reg_688, shl_ln43_3_reg_714, shl_ln43_4_reg_735, shl_ln43_5_reg_756, shl_ln23_reg_784, gmem_BVALID)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gmem_WSTRB <= shl_ln23_reg_784;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            gmem_WSTRB <= ap_const_lv8_FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gmem_WSTRB <= shl_ln43_5_reg_756;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem_WSTRB <= shl_ln43_4_reg_735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem_WSTRB <= shl_ln43_3_reg_714;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_WSTRB <= shl_ln43_reg_688;
        else 
            gmem_WSTRB <= "XXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, gmem_WREADY, gmem_BVALID, ap_block_state3_io, ap_block_state4_io, ap_block_state5_io, ap_block_state6_io)
    begin
        if ((((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state19, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln21_fu_297_p2 <= "1" when (tmp_fu_287_p4 = ap_const_lv63_0) else "0";
    icmp_ln25_fu_616_p2 <= "1" when (args_n_reg_632 = zext_ln23_fu_577_p1) else "0";
    p_1_fu_568_p3 <= (fib_args2_n_fu_563_p2 & y_addr_fu_558_p2);
    p_s_fu_549_p3 <= (fib_args1_n_fu_544_p2 & x_addr_fu_539_p2);
        sext_ln23_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln23_1_reg_683),64));

        sext_ln43_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_5_reg_709),64));

        sext_ln43_2_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_6_reg_730),64));

        sext_ln43_3_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_7_reg_751),64));

        sext_ln43_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_4_reg_662),64));

        sext_ln45_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_667),64));

    shl_ln23_1_fu_589_p3 <= (trunc_ln23_reg_677 & ap_const_lv3_0);
    shl_ln23_2_fu_600_p2 <= std_logic_vector(shift_left(unsigned(zext_ln23_fu_577_p1),to_integer(unsigned('0' & zext_ln23_2_fu_596_p1(31-1 downto 0)))));
    shl_ln23_fu_583_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln23_1_fu_580_p1(8-1 downto 0)))));
    shl_ln43_1_fu_384_p3 <= (trunc_ln43_reg_656 & ap_const_lv3_0);
    shl_ln43_2_fu_395_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv58_2),to_integer(unsigned('0' & zext_ln43_1_fu_391_p1(31-1 downto 0)))));
    shl_ln43_3_fu_437_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln43_2_fu_434_p1(8-1 downto 0)))));
    shl_ln43_4_fu_475_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln43_3_fu_472_p1(8-1 downto 0)))));
    shl_ln43_5_fu_513_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln43_4_fu_510_p1(8-1 downto 0)))));
    shl_ln43_fu_378_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln43_fu_375_p1(8-1 downto 0)))));

    taskIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, taskIn_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskIn_TDATA_blk_n <= taskIn_TVALID_int_regslice;
        else 
            taskIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    taskIn_TREADY <= regslice_both_taskIn_U_ack_in;

    taskIn_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            taskIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    taskOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, icmp_ln21_reg_639, taskOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((icmp_ln21_reg_639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            taskOut_TDATA_blk_n <= taskOut_TREADY_int_regslice;
        else 
            taskOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    taskOut_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, p_s_fu_549_p3, p_1_fu_568_p3, ap_block_state15, taskOut_TREADY_int_regslice)
    begin
        if (((taskOut_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            taskOut_TDATA_int_regslice <= p_1_fu_568_p3;
        elsif (((ap_const_boolean_0 = ap_block_state15) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            taskOut_TDATA_int_regslice <= p_s_fu_549_p3;
        else 
            taskOut_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    taskOut_TVALID <= regslice_both_taskOut_U_vld_out;

    taskOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_block_state15, taskOut_TREADY_int_regslice)
    begin
        if ((((taskOut_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((taskOut_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state15))) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            taskOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            taskOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_287_p4 <= taskIn_TDATA_int_regslice(127 downto 65);
    trunc_ln23_fu_361_p1 <= add_ln23_fu_355_p2(3 - 1 downto 0);
    trunc_ln43_1_fu_416_p1 <= add_ln43_1_fu_411_p2(3 - 1 downto 0);
    trunc_ln43_2_fu_458_p1 <= add_ln43_2_fu_453_p2(3 - 1 downto 0);
    trunc_ln43_3_fu_496_p1 <= add_ln43_3_fu_491_p2(3 - 1 downto 0);
    trunc_ln43_fu_309_p1 <= add_ln43_fu_303_p2(3 - 1 downto 0);
    x_addr_fu_539_p2 <= std_logic_vector(unsigned(sum_addr_reg_643) + unsigned(ap_const_lv64_4));
    y_addr_fu_558_p2 <= std_logic_vector(unsigned(sum_addr_reg_643) + unsigned(ap_const_lv64_8));
    zext_ln23_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_reg_677),8));
    zext_ln23_2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_1_fu_589_p3),64));
    zext_ln23_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_672),64));
    zext_ln43_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln43_1_fu_384_p3),58));
    zext_ln43_2_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_1_reg_704),8));
    zext_ln43_3_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_2_reg_725),8));
    zext_ln43_4_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_3_reg_746),8));
    zext_ln43_5_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln43_2_reg_693),64));
    zext_ln43_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_reg_656),8));
end behav;

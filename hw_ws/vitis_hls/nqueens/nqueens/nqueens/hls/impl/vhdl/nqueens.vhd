-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nqueens is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    taskIn_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    taskIn_TVALID : IN STD_LOGIC;
    taskIn_TREADY : OUT STD_LOGIC;
    taskOut_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    taskOut_TVALID : OUT STD_LOGIC;
    taskOut_TREADY : IN STD_LOGIC;
    argOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    argOut_TVALID : OUT STD_LOGIC;
    argOut_TREADY : IN STD_LOGIC;
    taskOutGlobal_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    taskOutGlobal_TVALID : OUT STD_LOGIC;
    taskOutGlobal_TREADY : IN STD_LOGIC;
    closureIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    closureIn_TVALID : IN STD_LOGIC;
    closureIn_TREADY : OUT STD_LOGIC;
    mallocIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    mallocIn_TVALID : IN STD_LOGIC;
    mallocIn_TREADY : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of nqueens is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nqueens_nqueens,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3596,HLS_SYN_LUT=5454,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (79 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (79 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (79 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (79 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (79 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (79 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (79 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (79 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (79 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (79 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (79 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000100";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv57_1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal taskIn_TDATA_blk_n : STD_LOGIC;
    signal argOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal taskOutGlobal_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln96_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal closureIn_TDATA_blk_n : STD_LOGIC;
    signal mallocIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mem_read_reg_1426 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln70_fu_543_p1 : STD_LOGIC_VECTOR (196 downto 0);
    signal trunc_ln70_reg_1436 : STD_LOGIC_VECTOR (196 downto 0);
    signal task_cont_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal task_cont_reg_1441 : STD_LOGIC_VECTOR (63 downto 0);
    signal task_a_reg_1448 : STD_LOGIC_VECTOR (63 downto 0);
    signal task_ret_addr_fu_561_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal task_ret_addr_reg_1453 : STD_LOGIC_VECTOR (63 downto 0);
    signal task_n_fu_571_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal task_n_reg_1459 : STD_LOGIC_VECTOR (7 downto 0);
    signal task_n66_cast_reg_1466 : STD_LOGIC_VECTOR (4 downto 0);
    signal task_j_fu_591_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal task_j_reg_1472 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_fu_613_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln79_reg_1482 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln79_1_reg_1488 : STD_LOGIC_VECTOR (60 downto 0);
    signal count_reg_1514 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_642_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln88_reg_1522 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal arg_j_fu_648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal arg_j_reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp7_i_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp7_i_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln96_fu_659_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln96_reg_1537 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln109_fu_663_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln109_reg_1543 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln96_fu_680_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln96_reg_1551 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln96_1_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_1_reg_1556 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_reg_1562 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln103_fu_690_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln103_reg_1568 : STD_LOGIC_VECTOR (63 downto 0);
    signal spawn_count_load_1_reg_1575 : STD_LOGIC_VECTOR (7 downto 0);
    signal cont_addr_reg_1580 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln124_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln128_fu_701_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln128_reg_1590 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln128_fu_706_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_reg_1598 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_5_reg_1604 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln100_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln100_reg_1617 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln100_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_reg_1622 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln102_1_reg_1627 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln102_fu_768_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln102_reg_1632 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln109_fu_776_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln109_reg_1637 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln109_1_reg_1643 : STD_LOGIC_VECTOR (60 downto 0);
    signal gmem_addr_8_read_reg_1654 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln103_fu_804_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln103_reg_1659 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln103_1_reg_1665 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln103_fu_845_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln103_reg_1670 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln103_2_fu_862_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln103_2_reg_1675 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln109_fu_885_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln109_reg_1686 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln109_2_fu_902_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln109_2_reg_1691 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln19_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1702 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal trunc_ln18_1_reg_1706 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln18_fu_942_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln18_reg_1711 : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_addr_10_read_reg_1722 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_1_fu_956_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_1_reg_1727 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal p_fu_976_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_reg_1732 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_fu_986_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_reg_1737 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln19_2_fu_990_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_2_reg_1742 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln19_1_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_1748 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_1_reg_1755 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal trunc_ln22_fu_1023_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln22_reg_1760 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln19_1_fu_1027_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_1_reg_1765 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_fu_1033_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_addr_11_read_reg_1781 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln128_fu_1151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_reg_1792 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_2_fu_1168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln128_2_reg_1797 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln128_1_fu_1189_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_1_reg_1808 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_6_reg_1814 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln3_reg_1819 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln128_3_fu_1226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_3_reg_1824 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_5_fu_1243_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln128_5_reg_1829 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln128_2_fu_1263_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_2_reg_1840 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_7_reg_1845 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln128_6_fu_1284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_6_reg_1850 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln128_3_fu_1305_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_3_reg_1861 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_8_reg_1866 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln128_7_fu_1322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_7_reg_1871 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln128_4_fu_1343_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_4_reg_1882 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_9_reg_1887 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln128_8_fu_1360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_8_reg_1892 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln79_fu_1389_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln79_reg_1911 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln79_2_fu_1406_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal shl_ln79_2_reg_1916 : STD_LOGIC_VECTOR (56 downto 0);
    signal spawn_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal spawn_ce0 : STD_LOGIC;
    signal spawn_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bs_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bs_ce0 : STD_LOGIC;
    signal bs_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_idle : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_ready : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_idle : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_ready : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TREADY : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0 : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0 : STD_LOGIC;
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TVALID : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal k_reg_449 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op149_write_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal i_3_reg_460 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln19_2_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal indvars_iv_i_reg_472 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_484 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal icmp_ln23_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_is_ok_phi_fu_499_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_ok_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg : STD_LOGIC := '0';
    signal grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal icmp_ln100_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln102_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln103_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln109_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln22_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln128_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln128_1_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln128_2_fu_1290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln128_3_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln128_4_fu_1366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln129_fu_1376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln79_fu_1412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_state55_io : BOOLEAN;
    signal zext_ln128_8_fu_1277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state56_io : BOOLEAN;
    signal ap_block_state57_io : BOOLEAN;
    signal ap_block_state58_io : BOOLEAN;
    signal zext_ln79_2_fu_1422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal spawn_count_fu_184 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal spawn_count_1_fu_1119_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i14_08_fu_188 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_4_fu_1125_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_192 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state78 : BOOLEAN;
    signal bs_we0_local : STD_LOGIC;
    signal bs_ce0_local : STD_LOGIC;
    signal spawn_we0_local : STD_LOGIC;
    signal spawn_ce0_local : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal add_ln79_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv39_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_2_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_fu_748_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln102_1_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln109_1_fu_772_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln103_1_fu_800_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_818_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln102_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln102_fu_829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_834_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln103_1_fu_842_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln103_1_fu_851_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln103_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_2_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_fu_882_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln109_1_fu_891_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln109_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_2_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln18_fu_927_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln3_fu_960_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln18_fu_971_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_980_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_3_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_1008_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln4_fu_1049_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln22_fu_1060_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_fu_1065_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln23_fu_1078_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln23_fu_1083_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln23_1_fu_1087_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_fu_1074_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_fu_1098_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_1_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln113_fu_1115_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln128_1_fu_1148_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_1_fu_1157_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln128_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_2_fu_1164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln128_1_fu_1184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln128_5_fu_1203_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln128_6_fu_1208_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_3_fu_1223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln128_4_fu_1232_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln128_4_fu_1239_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln128_2_fu_1258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_5_fu_1281_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln128_3_fu_1300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_6_fu_1319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln128_4_fu_1338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_7_fu_1357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_fu_1386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln79_1_fu_1395_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_1_fu_1402_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal icmp_ln76_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal regslice_both_taskOut_U_apdone_blk : STD_LOGIC;
    signal regslice_both_argOut_U_apdone_blk : STD_LOGIC;
    signal regslice_both_taskOutGlobal_U_apdone_blk : STD_LOGIC;
    signal ap_block_state80 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_block_state69_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal regslice_both_taskIn_U_apdone_blk : STD_LOGIC;
    signal taskIn_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal taskIn_TVALID_int_regslice : STD_LOGIC;
    signal taskIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_taskIn_U_ack_in : STD_LOGIC;
    signal taskOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_taskOut_U_vld_out : STD_LOGIC;
    signal argOut_TVALID_int_regslice : STD_LOGIC;
    signal argOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_argOut_U_vld_out : STD_LOGIC;
    signal taskOutGlobal_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal taskOutGlobal_TVALID_int_regslice : STD_LOGIC;
    signal taskOutGlobal_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_taskOutGlobal_U_vld_out : STD_LOGIC;
    signal regslice_both_closureIn_U_apdone_blk : STD_LOGIC;
    signal closureIn_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal closureIn_TVALID_int_regslice : STD_LOGIC;
    signal closureIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_closureIn_U_ack_in : STD_LOGIC;
    signal regslice_both_mallocIn_U_apdone_blk : STD_LOGIC;
    signal mallocIn_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal mallocIn_TVALID_int_regslice : STD_LOGIC;
    signal mallocIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_mallocIn_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nqueens_nqueens_Pipeline_VITIS_LOOP_88_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        task_n66 : IN STD_LOGIC_VECTOR (7 downto 0);
        mem : IN STD_LOGIC_VECTOR (63 downto 0);
        count : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nqueens_nqueens_Pipeline_VITIS_LOOP_133_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        taskOut_TREADY : IN STD_LOGIC;
        task_n66 : IN STD_LOGIC_VECTOR (4 downto 0);
        spawn_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        spawn_ce0 : OUT STD_LOGIC;
        spawn_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        bs_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bs_ce0 : OUT STD_LOGIC;
        bs_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        count : IN STD_LOGIC_VECTOR (63 downto 0);
        empty : IN STD_LOGIC_VECTOR (196 downto 0);
        arg_j : IN STD_LOGIC_VECTOR (7 downto 0);
        cont_addr : IN STD_LOGIC_VECTOR (63 downto 0);
        taskOut_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        taskOut_TVALID : OUT STD_LOGIC );
    end component;


    component nqueens_spawn_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nqueens_bs_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nqueens_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mem : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nqueens_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component nqueens_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    spawn_U : component nqueens_spawn_RAM_AUTO_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => spawn_address0,
        ce0 => spawn_ce0,
        we0 => spawn_we0_local,
        d0 => ap_phi_mux_is_ok_phi_fu_499_p4,
        q0 => spawn_q0);

    bs_U : component nqueens_bs_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bs_address0,
        ce0 => bs_ce0,
        we0 => bs_we0_local,
        d0 => b_reg_1562,
        q0 => bs_q0);

    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508 : component nqueens_nqueens_Pipeline_VITIS_LOOP_88_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start,
        ap_done => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done,
        ap_idle => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_idle,
        ap_ready => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_ready,
        m_axi_gmem_AWVALID => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv64_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        task_n66 => task_n_reg_1459,
        mem => mem_read_reg_1426,
        count => count_reg_1514);

    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518 : component nqueens_nqueens_Pipeline_VITIS_LOOP_133_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start,
        ap_done => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done,
        ap_idle => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_idle,
        ap_ready => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_ready,
        taskOut_TREADY => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TREADY,
        task_n66 => task_n66_cast_reg_1466,
        spawn_address0 => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0,
        spawn_ce0 => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0,
        spawn_q0 => spawn_q0,
        bs_address0 => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0,
        bs_ce0 => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0,
        bs_q0 => bs_q0,
        count => count_reg_1514,
        empty => trunc_ln70_reg_1436,
        arg_j => arg_j_reg_1527,
        cont_addr => cont_addr_reg_1580,
        taskOut_TDATA => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TDATA,
        taskOut_TVALID => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TVALID);

    control_s_axi_U : component nqueens_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mem => mem);

    gmem_m_axi_U : component nqueens_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 64,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem_ARVALID,
        I_CH0_ARREADY => gmem_ARREADY,
        I_CH0_ARADDR => gmem_ARADDR,
        I_CH0_ARLEN => gmem_ARLEN,
        I_CH0_RVALID => gmem_RVALID,
        I_CH0_RREADY => gmem_RREADY,
        I_CH0_RDATA => gmem_RDATA,
        I_CH0_RFIFONUM => gmem_RFIFONUM,
        I_CH0_AWVALID => gmem_AWVALID,
        I_CH0_AWREADY => gmem_AWREADY,
        I_CH0_AWADDR => gmem_AWADDR,
        I_CH0_AWLEN => gmem_AWLEN,
        I_CH0_WVALID => gmem_WVALID,
        I_CH0_WREADY => gmem_WREADY,
        I_CH0_WDATA => gmem_WDATA,
        I_CH0_WSTRB => gmem_WSTRB,
        I_CH0_BVALID => gmem_BVALID,
        I_CH0_BREADY => gmem_BREADY);

    regslice_both_taskIn_U : component nqueens_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => taskIn_TDATA,
        vld_in => taskIn_TVALID,
        ack_in => regslice_both_taskIn_U_ack_in,
        data_out => taskIn_TDATA_int_regslice,
        vld_out => taskIn_TVALID_int_regslice,
        ack_out => taskIn_TREADY_int_regslice,
        apdone_blk => regslice_both_taskIn_U_apdone_blk);

    regslice_both_taskOut_U : component nqueens_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TDATA,
        vld_in => grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TVALID,
        ack_in => taskOut_TREADY_int_regslice,
        data_out => taskOut_TDATA,
        vld_out => regslice_both_taskOut_U_vld_out,
        ack_out => taskOut_TREADY,
        apdone_blk => regslice_both_taskOut_U_apdone_blk);

    regslice_both_argOut_U : component nqueens_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => task_cont_reg_1441,
        vld_in => argOut_TVALID_int_regslice,
        ack_in => argOut_TREADY_int_regslice,
        data_out => argOut_TDATA,
        vld_out => regslice_both_argOut_U_vld_out,
        ack_out => argOut_TREADY,
        apdone_blk => regslice_both_argOut_U_apdone_blk);

    regslice_both_taskOutGlobal_U : component nqueens_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => taskOutGlobal_TDATA_int_regslice,
        vld_in => taskOutGlobal_TVALID_int_regslice,
        ack_in => taskOutGlobal_TREADY_int_regslice,
        data_out => taskOutGlobal_TDATA,
        vld_out => regslice_both_taskOutGlobal_U_vld_out,
        ack_out => taskOutGlobal_TREADY,
        apdone_blk => regslice_both_taskOutGlobal_U_apdone_blk);

    regslice_both_closureIn_U : component nqueens_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => closureIn_TDATA,
        vld_in => closureIn_TVALID,
        ack_in => regslice_both_closureIn_U_ack_in,
        data_out => closureIn_TDATA_int_regslice,
        vld_out => closureIn_TVALID_int_regslice,
        ack_out => closureIn_TREADY_int_regslice,
        apdone_blk => regslice_both_closureIn_U_apdone_blk);

    regslice_both_mallocIn_U : component nqueens_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mallocIn_TDATA,
        vld_in => mallocIn_TVALID,
        ack_in => regslice_both_mallocIn_U_ack_in,
        data_out => mallocIn_TDATA_int_regslice,
        vld_out => mallocIn_TVALID_int_regslice,
        ack_out => mallocIn_TREADY_int_regslice,
        apdone_blk => regslice_both_mallocIn_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_ready = ap_const_logic_1)) then 
                    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (mallocIn_TVALID_int_regslice = ap_const_logic_1))) then 
                    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_ready = ap_const_logic_1)) then 
                    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i14_08_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (mallocIn_TVALID_int_regslice = ap_const_logic_1))) then 
                i14_08_fu_188 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i14_08_fu_188 <= i_4_fu_1125_p2;
            end if; 
        end if;
    end process;

    i_1_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (mallocIn_TVALID_int_regslice = ap_const_logic_1))) then 
                i_1_fu_192 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_1_fu_192 <= add_ln96_reg_1551;
            end if; 
        end if;
    end process;

    i_3_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_1 = ap_const_lv1_0)) and (cmp7_i_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_3_reg_460 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and ((icmp_ln19_2_fu_999_p2 = ap_const_lv1_0) or (icmp_ln19_1_reg_1748 = ap_const_lv1_0)))) then 
                i_3_reg_460 <= empty_32_reg_1737;
            end if; 
        end if;
    end process;

    indvars_iv_i_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_1 = ap_const_lv1_0)) and (cmp7_i_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                indvars_iv_i_reg_472 <= ap_const_lv9_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and ((icmp_ln19_2_fu_999_p2 = ap_const_lv1_0) or (icmp_ln19_1_reg_1748 = ap_const_lv1_0)))) then 
                indvars_iv_i_reg_472 <= add_ln16_fu_1033_p2;
            end if; 
        end if;
    end process;

    is_ok_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_1702 = ap_const_lv1_1) and (cmp7_i_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                is_ok_reg_495 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and ((icmp_ln19_fu_918_p2 = ap_const_lv1_0) or (cmp7_i_reg_1533 = ap_const_lv1_1)))) then 
                is_ok_reg_495 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    j_1_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_1_fu_994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                j_1_reg_484 <= indvars_iv_i_reg_472;
            elsif (((or_ln23_fu_1109_p2 = ap_const_lv1_0) and (icmp_ln23_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                j_1_reg_484 <= add_ln19_1_reg_1765;
            end if; 
        end if;
    end process;

    k_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                k_reg_449 <= add_ln100_reg_1617;
            elsif ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (icmp_ln96_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_reg_449 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    spawn_count_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (mallocIn_TVALID_int_regslice = ap_const_logic_1))) then 
                spawn_count_fu_184 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                spawn_count_fu_184 <= spawn_count_1_fu_1119_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln100_reg_1617 <= add_ln100_fu_738_p2;
                trunc_ln102_1_reg_1627 <= add_ln102_1_fu_753_p2(63 downto 3);
                trunc_ln102_reg_1632 <= trunc_ln102_fu_768_p1;
                trunc_ln109_1_reg_1643 <= add_ln109_1_fu_772_p2(63 downto 3);
                trunc_ln109_reg_1637 <= trunc_ln109_fu_776_p1;
                    zext_ln100_reg_1622(7 downto 0) <= zext_ln100_fu_744_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln103_reg_1568 <= add_ln103_fu_690_p2;
                add_ln128_reg_1590 <= add_ln128_fu_701_p2;
                add_ln96_reg_1551 <= add_ln96_fu_680_p2;
                b_reg_1562 <= mallocIn_TDATA_int_regslice;
                cont_addr_reg_1580 <= closureIn_TDATA_int_regslice;
                icmp_ln124_reg_1586 <= icmp_ln124_fu_695_p2;
                spawn_count_load_1_reg_1575 <= spawn_count_fu_184;
                trunc_ln128_5_reg_1604 <= add_ln128_fu_701_p2(63 downto 3);
                trunc_ln128_reg_1598 <= trunc_ln128_fu_706_p1;
                    zext_ln96_1_reg_1556(4 downto 0) <= zext_ln96_1_fu_686_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln109_reg_1543 <= add_ln109_fu_663_p2;
                arg_j_reg_1527 <= arg_j_fu_648_p2;
                cmp7_i_reg_1533 <= cmp7_i_fu_653_p2;
                    zext_ln88_reg_1522(7 downto 0) <= zext_ln88_fu_642_p1(7 downto 0);
                    zext_ln96_reg_1537(7 downto 0) <= zext_ln96_fu_659_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln19_1_reg_1765 <= add_ln19_1_fu_1027_p2;
                trunc_ln22_1_reg_1755 <= add_ln22_fu_1008_p2(63 downto 3);
                trunc_ln22_reg_1760 <= trunc_ln22_fu_1023_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                count_reg_1514 <= mallocIn_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                empty_32_reg_1737 <= empty_32_fu_986_p1;
                icmp_ln19_1_reg_1748 <= icmp_ln19_1_fu_994_p2;
                p_reg_1732 <= p_fu_976_p1;
                    zext_ln19_1_reg_1727(7 downto 0) <= zext_ln19_1_fu_956_p1(7 downto 0);
                    zext_ln19_2_reg_1742(7 downto 0) <= zext_ln19_2_fu_990_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                gmem_addr_10_read_reg_1722 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                gmem_addr_11_read_reg_1781 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                gmem_addr_8_read_reg_1654 <= gmem_RDATA;
                trunc_ln103_1_reg_1665 <= add_ln103_1_fu_800_p2(63 downto 3);
                trunc_ln103_reg_1659 <= trunc_ln103_fu_804_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                icmp_ln19_reg_1702 <= icmp_ln19_fu_918_p2;
                trunc_ln18_1_reg_1706 <= add_ln18_fu_927_p2(63 downto 3);
                trunc_ln18_reg_1711 <= trunc_ln18_fu_942_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mem_read_reg_1426 <= mem;
                task_a_reg_1448 <= taskIn_TDATA_int_regslice(127 downto 64);
                task_cont_reg_1441 <= task_cont_fu_547_p1;
                task_j_reg_1472 <= taskIn_TDATA_int_regslice(207 downto 200);
                task_n66_cast_reg_1466 <= taskIn_TDATA_int_regslice(196 downto 192);
                task_n_reg_1459 <= taskIn_TDATA_int_regslice(199 downto 192);
                task_ret_addr_reg_1453 <= taskIn_TDATA_int_regslice(191 downto 128);
                trunc_ln70_reg_1436 <= trunc_ln70_fu_543_p1;
                trunc_ln79_1_reg_1488 <= add_ln79_fu_607_p2(63 downto 3);
                trunc_ln79_reg_1482 <= trunc_ln79_fu_613_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                shl_ln103_2_reg_1675 <= shl_ln103_2_fu_862_p2;
                shl_ln103_reg_1670 <= shl_ln103_fu_845_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                shl_ln109_2_reg_1691 <= shl_ln109_2_fu_902_p2;
                shl_ln109_reg_1686 <= shl_ln109_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                shl_ln128_2_reg_1797 <= shl_ln128_2_fu_1168_p2;
                shl_ln128_reg_1792 <= shl_ln128_fu_1151_p2;
                trunc_ln128_1_reg_1808 <= trunc_ln128_1_fu_1189_p1;
                trunc_ln128_6_reg_1814 <= add_ln128_1_fu_1184_p2(63 downto 3);
                trunc_ln3_reg_1819 <= add_ln128_6_fu_1208_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                shl_ln128_3_reg_1824 <= shl_ln128_3_fu_1226_p2;
                shl_ln128_5_reg_1829 <= shl_ln128_5_fu_1243_p2;
                trunc_ln128_2_reg_1840 <= trunc_ln128_2_fu_1263_p1;
                trunc_ln128_7_reg_1845 <= add_ln128_2_fu_1258_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                shl_ln128_6_reg_1850 <= shl_ln128_6_fu_1284_p2;
                trunc_ln128_3_reg_1861 <= trunc_ln128_3_fu_1305_p1;
                trunc_ln128_8_reg_1866 <= add_ln128_3_fu_1300_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                shl_ln128_7_reg_1871 <= shl_ln128_7_fu_1322_p2;
                trunc_ln128_4_reg_1882 <= trunc_ln128_4_fu_1343_p1;
                trunc_ln128_9_reg_1887 <= add_ln128_4_fu_1338_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                shl_ln128_8_reg_1892 <= shl_ln128_8_fu_1360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                shl_ln79_2_reg_1916 <= shl_ln79_2_fu_1406_p2;
                shl_ln79_reg_1911 <= shl_ln79_fu_1389_p2;
            end if;
        end if;
    end process;
    zext_ln88_reg_1522(60 downto 8) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln96_reg_1537(8) <= '0';
    zext_ln96_1_reg_1556(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln100_reg_1622(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln19_1_reg_1727(8) <= '0';
    zext_ln19_2_reg_1742(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state39, ap_CS_fsm_state42, ap_CS_fsm_state50, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state58, ap_CS_fsm_state63, ap_CS_fsm_state66, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state4, icmp_ln96_fu_675_p2, icmp_ln124_fu_695_p2, ap_CS_fsm_state70, ap_CS_fsm_state2, ap_CS_fsm_state3, cmp7_i_reg_1533, ap_CS_fsm_state5, icmp_ln19_fu_918_p2, ap_CS_fsm_state30, icmp_ln19_1_reg_1748, ap_CS_fsm_state41, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_block_state4, ap_block_state4_io, icmp_ln19_2_fu_999_p2, ap_CS_fsm_state29, ap_CS_fsm_state51, icmp_ln23_fu_1069_p2, or_ln23_fu_1109_p2, ap_CS_fsm_state69, icmp_ln100_fu_733_p2, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io, ap_block_state1, ap_block_state78, ap_CS_fsm_state67, icmp_ln76_fu_601_p2, ap_CS_fsm_state80, ap_block_state80, ap_block_state69_on_subcall_done, argOut_TREADY_int_regslice, taskOutGlobal_TREADY_int_regslice, mallocIn_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln76_fu_601_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln76_fu_601_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (mallocIn_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (icmp_ln124_fu_695_p2 = ap_const_lv1_1) and (icmp_ln96_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                elsif ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (icmp_ln124_fu_695_p2 = ap_const_lv1_0) and (icmp_ln96_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (icmp_ln96_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln100_fu_733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if ((not((ap_const_lv1_1 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and ((icmp_ln19_fu_918_p2 = ap_const_lv1_0) or (cmp7_i_reg_1533 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and ((icmp_ln19_2_fu_999_p2 = ap_const_lv1_0) or (icmp_ln19_1_reg_1748 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((or_ln23_fu_1109_p2 = ap_const_lv1_0) and (icmp_ln23_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state53 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                if ((not((ap_const_lv1_1 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_boolean_0 = ap_block_state69_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (taskOutGlobal_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                if ((not(((ap_const_boolean_1 = ap_block_state78) or (argOut_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (argOut_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_boolean_0 = ap_block_state80) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_738_p2 <= std_logic_vector(unsigned(k_reg_449) + unsigned(ap_const_lv8_1));
    add_ln102_1_fu_753_p2 <= std_logic_vector(unsigned(add_ln102_fu_748_p2) + unsigned(task_a_reg_1448));
    add_ln102_fu_748_p2 <= std_logic_vector(unsigned(zext_ln100_fu_744_p1) + unsigned(mem_read_reg_1426));
    add_ln103_1_fu_800_p2 <= std_logic_vector(unsigned(zext_ln100_reg_1622) + unsigned(add_ln103_reg_1568));
    add_ln103_fu_690_p2 <= std_logic_vector(unsigned(mallocIn_TDATA_int_regslice) + unsigned(mem_read_reg_1426));
    add_ln109_1_fu_772_p2 <= std_logic_vector(unsigned(add_ln109_reg_1543) + unsigned(b_reg_1562));
    add_ln109_fu_663_p2 <= std_logic_vector(unsigned(conv39_fu_645_p1) + unsigned(mem_read_reg_1426));
    add_ln128_1_fu_1184_p2 <= std_logic_vector(unsigned(add_ln128_reg_1590) + unsigned(ap_const_lv64_4));
    add_ln128_2_fu_1258_p2 <= std_logic_vector(unsigned(add_ln128_reg_1590) + unsigned(ap_const_lv64_5));
    add_ln128_3_fu_1300_p2 <= std_logic_vector(unsigned(add_ln128_reg_1590) + unsigned(ap_const_lv64_6));
    add_ln128_4_fu_1338_p2 <= std_logic_vector(unsigned(add_ln128_reg_1590) + unsigned(ap_const_lv64_7));
    add_ln128_5_fu_1203_p2 <= std_logic_vector(unsigned(mem_read_reg_1426) + unsigned(ap_const_lv64_8));
    add_ln128_6_fu_1208_p2 <= std_logic_vector(unsigned(add_ln128_5_fu_1203_p2) + unsigned(cont_addr_reg_1580));
    add_ln128_fu_701_p2 <= std_logic_vector(unsigned(closureIn_TDATA_int_regslice) + unsigned(mem_read_reg_1426));
    add_ln16_fu_1033_p2 <= std_logic_vector(unsigned(indvars_iv_i_reg_472) + unsigned(ap_const_lv9_1));
    add_ln18_fu_927_p2 <= std_logic_vector(unsigned(zext_ln19_fu_923_p1) + unsigned(add_ln103_reg_1568));
    add_ln19_1_fu_1027_p2 <= std_logic_vector(unsigned(j_1_reg_484) + unsigned(ap_const_lv9_1));
    add_ln19_fu_980_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_956_p1) + unsigned(ap_const_lv9_1));
    add_ln22_fu_1008_p2 <= std_logic_vector(unsigned(zext_ln19_3_fu_1004_p1) + unsigned(add_ln103_reg_1568));
    add_ln23_fu_1098_p2 <= std_logic_vector(signed(sext_ln23_fu_1083_p1) + signed(zext_ln19_2_reg_1742));
    add_ln79_fu_607_p2 <= std_logic_vector(unsigned(task_ret_addr_fu_561_p4) + unsigned(mem));
    add_ln96_fu_680_p2 <= std_logic_vector(unsigned(i_1_fu_192) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;

    ap_ST_fsm_state28_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state29_blk <= ap_const_logic_1;

    ap_ST_fsm_state2_blk_assign_proc : process(mallocIn_TVALID_int_regslice)
    begin
        if ((mallocIn_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done)
    begin
        if ((grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;

    ap_ST_fsm_state42_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4, ap_block_state4_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state50_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state50_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state50_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;

    ap_ST_fsm_state53_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state53_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state53_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state54_blk_assign_proc : process(ap_block_state54_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state54_io)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state55_blk_assign_proc : process(ap_block_state55_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state55_io)) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state56_blk_assign_proc : process(ap_block_state56_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state56_io)) then 
            ap_ST_fsm_state56_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state56_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state57_blk_assign_proc : process(ap_block_state57_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state57_io)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state58_blk_assign_proc : process(ap_block_state58_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state58_io)) then 
            ap_ST_fsm_state58_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state58_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state59_blk_assign_proc : process(gmem_WREADY, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state60_blk_assign_proc : process(gmem_WREADY, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state61_blk_assign_proc : process(gmem_WREADY, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state61_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state61_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state62_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state62_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state62_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state63_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state63_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state63_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;

    ap_ST_fsm_state66_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state66_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state66_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state67_blk <= ap_const_logic_1;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;

    ap_ST_fsm_state69_blk_assign_proc : process(ap_block_state69_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state69_on_subcall_done)) then 
            ap_ST_fsm_state69_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state69_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state70_blk_assign_proc : process(taskOutGlobal_TREADY_int_regslice)
    begin
        if ((taskOutGlobal_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state70_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state70_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state71_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state72_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;

    ap_ST_fsm_state77_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state78_blk_assign_proc : process(ap_block_state78, argOut_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state78) or (argOut_TREADY_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state79_blk_assign_proc : process(argOut_TREADY_int_regslice)
    begin
        if ((argOut_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state79_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state79_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state80_blk_assign_proc : process(ap_block_state80)
    begin
        if ((ap_const_boolean_1 = ap_block_state80)) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, taskIn_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (taskIn_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(icmp_ln96_fu_675_p2, ap_predicate_op149_write_state4, taskOutGlobal_TREADY_int_regslice, closureIn_TVALID_int_regslice, mallocIn_TVALID_int_regslice)
    begin
                ap_block_state4 <= (((ap_predicate_op149_write_state4 = ap_const_boolean_1) and (taskOutGlobal_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln96_fu_675_p2 = ap_const_lv1_0) and (mallocIn_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln96_fu_675_p2 = ap_const_lv1_1) and (closureIn_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state4_io_assign_proc : process(ap_predicate_op149_write_state4, taskOutGlobal_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((ap_predicate_op149_write_state4 = ap_const_boolean_1) and (taskOutGlobal_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state54_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state54_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state55_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state55_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state56_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state56_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state57_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state57_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state58_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state58_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state69_on_subcall_done_assign_proc : process(icmp_ln124_reg_1586, grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done)
    begin
                ap_block_state69_on_subcall_done <= ((grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done = ap_const_logic_0) and (icmp_ln124_reg_1586 = ap_const_lv1_0));
    end process;


    ap_block_state78_assign_proc : process(argOut_TREADY_int_regslice)
    begin
                ap_block_state78 <= ((ap_const_lv1_1 = ap_const_lv1_0) or (argOut_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state80_assign_proc : process(regslice_both_taskOut_U_apdone_blk, regslice_both_argOut_U_apdone_blk, regslice_both_taskOutGlobal_U_apdone_blk)
    begin
                ap_block_state80 <= ((regslice_both_taskOutGlobal_U_apdone_blk = ap_const_logic_1) or (regslice_both_argOut_U_apdone_blk = ap_const_logic_1) or (regslice_both_taskOut_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state80, ap_block_state80)
    begin
        if (((ap_const_boolean_0 = ap_block_state80) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_is_ok_phi_fu_499_p4_assign_proc : process(cmp7_i_reg_1533, icmp_ln19_reg_1702, is_ok_reg_495, ap_CS_fsm_state52)
    begin
        if (((icmp_ln19_reg_1702 = ap_const_lv1_1) and (cmp7_i_reg_1533 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            ap_phi_mux_is_ok_phi_fu_499_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_is_ok_phi_fu_499_p4 <= is_ok_reg_495;
        end if; 
    end process;


    ap_predicate_op149_write_state4_assign_proc : process(icmp_ln96_fu_675_p2, icmp_ln124_fu_695_p2)
    begin
                ap_predicate_op149_write_state4 <= ((icmp_ln124_fu_695_p2 = ap_const_lv1_1) and (icmp_ln96_fu_675_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state80, ap_block_state80)
    begin
        if (((ap_const_boolean_0 = ap_block_state80) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    argOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state79, argOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            argOut_TDATA_blk_n <= argOut_TREADY_int_regslice;
        else 
            argOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    argOut_TVALID <= regslice_both_argOut_U_vld_out;

    argOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state78, ap_block_state78, argOut_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state78) or (argOut_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            argOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            argOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    arg_j_fu_648_p2 <= std_logic_vector(unsigned(task_j_reg_1472) + unsigned(ap_const_lv8_1));

    bs_address0_assign_proc : process(zext_ln96_1_reg_1556, icmp_ln124_reg_1586, grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0, ap_CS_fsm_state69)
    begin
        if (((icmp_ln124_reg_1586 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            bs_address0 <= grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0;
        else 
            bs_address0 <= zext_ln96_1_reg_1556(4 - 1 downto 0);
        end if; 
    end process;


    bs_ce0_assign_proc : process(icmp_ln124_reg_1586, grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0, ap_CS_fsm_state69, bs_ce0_local)
    begin
        if (((icmp_ln124_reg_1586 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            bs_ce0 <= grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0;
        else 
            bs_ce0 <= bs_ce0_local;
        end if; 
    end process;


    bs_ce0_local_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bs_ce0_local <= ap_const_logic_1;
        else 
            bs_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    bs_we0_local_assign_proc : process(ap_CS_fsm_state5, icmp_ln100_fu_733_p2)
    begin
        if (((icmp_ln100_fu_733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            bs_we0_local <= ap_const_logic_1;
        else 
            bs_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    closureIn_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, icmp_ln96_fu_675_p2, closureIn_TVALID_int_regslice)
    begin
        if (((icmp_ln96_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            closureIn_TDATA_blk_n <= closureIn_TVALID_int_regslice;
        else 
            closureIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    closureIn_TREADY <= regslice_both_closureIn_U_ack_in;

    closureIn_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, icmp_ln96_fu_675_p2, ap_block_state4, ap_block_state4_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (icmp_ln96_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            closureIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            closureIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    cmp7_i_fu_653_p2 <= "1" when (arg_j_fu_648_p2 = ap_const_lv8_0) else "0";
    conv39_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(task_j_reg_1472),64));
    empty_32_fu_986_p1 <= add_ln19_fu_980_p2(8 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state42, gmem_ARREADY, sext_ln102_fu_790_p1, sext_ln18_fu_946_p1, sext_ln22_fu_1039_p1)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                gmem_ARADDR <= sext_ln22_fu_1039_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                gmem_ARADDR <= sext_ln18_fu_946_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                gmem_ARADDR <= sext_ln102_fu_790_p1;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state42, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR, gmem_AWREADY, sext_ln103_fu_868_p1, sext_ln109_fu_908_p1, sext_ln128_fu_1174_p1, sext_ln128_1_fu_1248_p1, sext_ln128_2_fu_1290_p1, sext_ln128_3_fu_1328_p1, sext_ln128_4_fu_1366_p1, sext_ln129_fu_1376_p1, sext_ln79_fu_1412_p1, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            gmem_AWADDR <= sext_ln79_fu_1412_p1;
        elsif (((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            gmem_AWADDR <= sext_ln129_fu_1376_p1;
        elsif (((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            gmem_AWADDR <= sext_ln128_4_fu_1366_p1;
        elsif (((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            gmem_AWADDR <= sext_ln128_3_fu_1328_p1;
        elsif (((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            gmem_AWADDR <= sext_ln128_2_fu_1290_p1;
        elsif (((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            gmem_AWADDR <= sext_ln128_1_fu_1248_p1;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            gmem_AWADDR <= sext_ln128_fu_1174_p1;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            gmem_AWADDR <= sext_ln109_fu_908_p1;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_AWADDR <= sext_ln103_fu_868_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWADDR <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN, gmem_AWREADY, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            gmem_AWLEN <= ap_const_lv64_3(32 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71)))) then 
            gmem_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWLEN <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID, gmem_AWREADY, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWVALID <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state21, ap_CS_fsm_state28, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state66, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY, gmem_WREADY, gmem_BVALID)
    begin
        if (((not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state61)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state60)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
            gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_BREADY <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state39, ap_CS_fsm_state50, gmem_RVALID)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state2, task_cont_reg_1441, task_ret_addr_reg_1453, count_reg_1514, ap_CS_fsm_state3, shl_ln103_2_reg_1675, shl_ln109_2_reg_1691, shl_ln128_2_reg_1797, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA, gmem_BVALID, zext_ln128_8_fu_1277_p1, zext_ln79_2_fu_1422_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            gmem_WDATA <= zext_ln79_2_fu_1422_p1;
        elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            gmem_WDATA <= task_ret_addr_reg_1453;
        elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            gmem_WDATA <= count_reg_1514;
        elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_WDATA <= task_cont_reg_1441;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            gmem_WDATA <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            gmem_WDATA <= zext_ln128_8_fu_1277_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            gmem_WDATA <= shl_ln128_2_reg_1797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gmem_WDATA <= shl_ln109_2_reg_1691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            gmem_WDATA <= shl_ln103_2_reg_1675;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WDATA <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state3, shl_ln103_reg_1670, shl_ln109_reg_1686, shl_ln128_reg_1792, shl_ln128_3_reg_1824, shl_ln128_6_reg_1850, shl_ln128_7_reg_1871, shl_ln128_8_reg_1892, shl_ln79_reg_1911, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB, gmem_BVALID)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            gmem_WSTRB <= shl_ln79_reg_1911;
        elsif ((((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            gmem_WSTRB <= ap_const_lv8_FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            gmem_WSTRB <= shl_ln128_8_reg_1892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            gmem_WSTRB <= shl_ln128_7_reg_1871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            gmem_WSTRB <= shl_ln128_6_reg_1850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            gmem_WSTRB <= shl_ln128_3_reg_1824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            gmem_WSTRB <= shl_ln128_reg_1792;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gmem_WSTRB <= shl_ln109_reg_1686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            gmem_WSTRB <= shl_ln103_reg_1670;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WSTRB <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB;
        else 
            gmem_WSTRB <= "XXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID, gmem_WREADY, gmem_BVALID, ap_block_state54_io, ap_block_state55_io, ap_block_state56_io, ap_block_state57_io, ap_block_state58_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state58_io) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((ap_const_boolean_0 = ap_block_state57_io) and (ap_const_logic_1 = ap_CS_fsm_state57)) or ((ap_const_boolean_0 = ap_block_state56_io) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((ap_const_boolean_0 = ap_block_state55_io) and (ap_const_logic_1 = ap_CS_fsm_state55)) or ((ap_const_boolean_0 = ap_block_state54_io) and (ap_const_logic_1 = ap_CS_fsm_state54)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state61)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state60)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_WREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((gmem_WREADY = ap_const_logic_1) and 
    (ap_const_logic_1 = ap_CS_fsm_state72)))) then 
            gmem_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WVALID <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state71, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state77, ap_CS_fsm_state21, ap_CS_fsm_state28, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state14, ap_CS_fsm_state39, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state72, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state56, ap_CS_fsm_state61, ap_CS_fsm_state57, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start <= grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg;
    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TREADY <= (taskOut_TREADY_int_regslice and ap_CS_fsm_state69);
    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start <= grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg;
    i_4_fu_1125_p2 <= std_logic_vector(unsigned(i14_08_fu_188) + unsigned(ap_const_lv8_1));
    icmp_ln100_fu_733_p2 <= "1" when (k_reg_449 = task_j_reg_1472) else "0";
    icmp_ln124_fu_695_p2 <= "1" when (spawn_count_fu_184 = ap_const_lv8_0) else "0";
    icmp_ln19_1_fu_994_p2 <= "1" when (unsigned(add_ln19_fu_980_p2) < unsigned(zext_ln96_reg_1537)) else "0";
    icmp_ln19_2_fu_999_p2 <= "1" when (unsigned(j_1_reg_484) < unsigned(zext_ln96_reg_1537)) else "0";
    icmp_ln19_fu_918_p2 <= "1" when (unsigned(i_3_reg_460) < unsigned(arg_j_reg_1527)) else "0";
    icmp_ln23_1_fu_1092_p2 <= "1" when (sub_ln23_1_fu_1087_p2 = zext_ln23_fu_1074_p1) else "0";
    icmp_ln23_2_fu_1103_p2 <= "1" when (add_ln23_fu_1098_p2 = zext_ln23_fu_1074_p1) else "0";
    icmp_ln23_fu_1069_p2 <= "1" when (q_fu_1065_p1 = p_reg_1732) else "0";
    icmp_ln76_fu_601_p2 <= "1" when (task_n_fu_571_p4 = task_j_fu_591_p4) else "0";
    icmp_ln96_fu_675_p2 <= "1" when (zext_ln96_2_fu_671_p1 = task_n_reg_1459) else "0";
    lshr_ln102_fu_829_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_8_read_reg_1654),to_integer(unsigned('0' & zext_ln102_fu_825_p1(31-1 downto 0)))));
    lshr_ln18_fu_971_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_10_read_reg_1722),to_integer(unsigned('0' & zext_ln18_fu_967_p1(31-1 downto 0)))));
    lshr_ln22_fu_1060_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_11_read_reg_1781),to_integer(unsigned('0' & zext_ln22_fu_1056_p1(31-1 downto 0)))));

    mallocIn_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, icmp_ln96_fu_675_p2, ap_CS_fsm_state2, mallocIn_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln96_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            mallocIn_TDATA_blk_n <= mallocIn_TVALID_int_regslice;
        else 
            mallocIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mallocIn_TREADY <= regslice_both_mallocIn_U_ack_in;

    mallocIn_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, icmp_ln96_fu_675_p2, ap_CS_fsm_state2, ap_block_state4, ap_block_state4_io, mallocIn_TVALID_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (icmp_ln96_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (mallocIn_TVALID_int_regslice = ap_const_logic_1)))) then 
            mallocIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            mallocIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    or_ln23_fu_1109_p2 <= (icmp_ln23_2_fu_1103_p2 or icmp_ln23_1_fu_1092_p2);
    p_fu_976_p1 <= lshr_ln18_fu_971_p2(8 - 1 downto 0);
    q_fu_1065_p1 <= lshr_ln22_fu_1060_p2(8 - 1 downto 0);
        sext_ln102_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln102_1_reg_1627),64));

        sext_ln103_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln103_1_reg_1665),64));

        sext_ln109_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln109_1_reg_1643),64));

        sext_ln128_1_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln128_6_reg_1814),64));

        sext_ln128_2_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln128_7_reg_1845),64));

        sext_ln128_3_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln128_8_reg_1866),64));

        sext_ln128_4_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln128_9_reg_1887),64));

        sext_ln128_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln128_5_reg_1604),64));

        sext_ln129_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_1819),64));

        sext_ln18_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln18_1_reg_1706),64));

        sext_ln22_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln22_1_reg_1755),64));

        sext_ln23_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln23_fu_1078_p2),10));

        sext_ln79_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln79_1_reg_1488),64));

    shl_ln103_1_fu_851_p3 <= (trunc_ln103_reg_1659 & ap_const_lv3_0);
    shl_ln103_2_fu_862_p2 <= std_logic_vector(shift_left(unsigned(zext_ln103_fu_838_p1),to_integer(unsigned('0' & zext_ln103_2_fu_858_p1(31-1 downto 0)))));
    shl_ln103_fu_845_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln103_1_fu_842_p1(8-1 downto 0)))));
    shl_ln109_1_fu_891_p3 <= (trunc_ln109_reg_1637 & ap_const_lv3_0);
    shl_ln109_2_fu_902_p2 <= std_logic_vector(shift_left(unsigned(zext_ln109_fu_878_p1),to_integer(unsigned('0' & zext_ln109_2_fu_898_p1(31-1 downto 0)))));
    shl_ln109_fu_885_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln109_1_fu_882_p1(8-1 downto 0)))));
    shl_ln128_1_fu_1157_p3 <= (trunc_ln128_reg_1598 & ap_const_lv3_0);
    shl_ln128_2_fu_1168_p2 <= std_logic_vector(shift_left(unsigned(zext_ln128_fu_1145_p1),to_integer(unsigned('0' & zext_ln128_2_fu_1164_p1(31-1 downto 0)))));
    shl_ln128_3_fu_1226_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln128_3_fu_1223_p1(8-1 downto 0)))));
    shl_ln128_4_fu_1232_p3 <= (trunc_ln128_1_reg_1808 & ap_const_lv3_0);
    shl_ln128_5_fu_1243_p2 <= std_logic_vector(shift_left(unsigned(zext_ln88_reg_1522),to_integer(unsigned('0' & zext_ln128_4_fu_1239_p1(31-1 downto 0)))));
    shl_ln128_6_fu_1284_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln128_5_fu_1281_p1(8-1 downto 0)))));
    shl_ln128_7_fu_1322_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln128_6_fu_1319_p1(8-1 downto 0)))));
    shl_ln128_8_fu_1360_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln128_7_fu_1357_p1(8-1 downto 0)))));
    shl_ln128_fu_1151_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln128_1_fu_1148_p1(8-1 downto 0)))));
    shl_ln1_fu_818_p3 <= (trunc_ln102_reg_1632 & ap_const_lv3_0);
    shl_ln3_fu_960_p3 <= (trunc_ln18_reg_1711 & ap_const_lv3_0);
    shl_ln4_fu_1049_p3 <= (trunc_ln22_reg_1760 & ap_const_lv3_0);
    shl_ln79_1_fu_1395_p3 <= (trunc_ln79_reg_1482 & ap_const_lv3_0);
    shl_ln79_2_fu_1406_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv57_1),to_integer(unsigned('0' & zext_ln79_1_fu_1402_p1(31-1 downto 0)))));
    shl_ln79_fu_1389_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln79_fu_1386_p1(8-1 downto 0)))));

    spawn_address0_assign_proc : process(zext_ln96_1_reg_1556, icmp_ln124_reg_1586, grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0, ap_CS_fsm_state69)
    begin
        if (((icmp_ln124_reg_1586 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            spawn_address0 <= grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0;
        else 
            spawn_address0 <= zext_ln96_1_reg_1556(4 - 1 downto 0);
        end if; 
    end process;


    spawn_ce0_assign_proc : process(icmp_ln124_reg_1586, grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0, ap_CS_fsm_state69, spawn_ce0_local)
    begin
        if (((icmp_ln124_reg_1586 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            spawn_ce0 <= grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0;
        else 
            spawn_ce0 <= spawn_ce0_local;
        end if; 
    end process;


    spawn_ce0_local_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            spawn_ce0_local <= ap_const_logic_1;
        else 
            spawn_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    spawn_count_1_fu_1119_p2 <= std_logic_vector(unsigned(zext_ln113_fu_1115_p1) + unsigned(spawn_count_fu_184));

    spawn_we0_local_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            spawn_we0_local <= ap_const_logic_1;
        else 
            spawn_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln23_1_fu_1087_p2 <= std_logic_vector(unsigned(zext_ln19_2_reg_1742) - unsigned(sext_ln23_fu_1083_p1));
    sub_ln23_fu_1078_p2 <= std_logic_vector(unsigned(j_1_reg_484) - unsigned(zext_ln19_1_reg_1727));

    taskIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, taskIn_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskIn_TDATA_blk_n <= taskIn_TVALID_int_regslice;
        else 
            taskIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    taskIn_TREADY <= regslice_both_taskIn_U_ack_in;

    taskIn_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            taskIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    taskOutGlobal_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, icmp_ln96_fu_675_p2, icmp_ln124_fu_695_p2, ap_CS_fsm_state70, taskOutGlobal_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or ((icmp_ln124_fu_695_p2 = ap_const_lv1_1) and (icmp_ln96_fu_675_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            taskOutGlobal_TDATA_blk_n <= taskOutGlobal_TREADY_int_regslice;
        else 
            taskOutGlobal_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    taskOutGlobal_TDATA_int_regslice <= (((((task_ret_addr_reg_1453 & count_reg_1514) & task_cont_reg_1441) & ap_const_lv27_0) & task_n66_cast_reg_1466) & ap_const_lv32_0);
    taskOutGlobal_TVALID <= regslice_both_taskOutGlobal_U_vld_out;

    taskOutGlobal_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state4, ap_predicate_op149_write_state4, ap_block_state4, ap_block_state4_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4))) and (ap_predicate_op149_write_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            taskOutGlobal_TVALID_int_regslice <= ap_const_logic_1;
        else 
            taskOutGlobal_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    taskOut_TVALID <= regslice_both_taskOut_U_vld_out;
    task_cont_fu_547_p1 <= taskIn_TDATA_int_regslice(64 - 1 downto 0);
    task_j_fu_591_p4 <= taskIn_TDATA_int_regslice(207 downto 200);
    task_n_fu_571_p4 <= taskIn_TDATA_int_regslice(199 downto 192);
    task_ret_addr_fu_561_p4 <= taskIn_TDATA_int_regslice(191 downto 128);
    tmp_fu_834_p1 <= lshr_ln102_fu_829_p2(8 - 1 downto 0);
    trunc_ln102_fu_768_p1 <= add_ln102_1_fu_753_p2(3 - 1 downto 0);
    trunc_ln103_fu_804_p1 <= add_ln103_1_fu_800_p2(3 - 1 downto 0);
    trunc_ln109_fu_776_p1 <= add_ln109_1_fu_772_p2(3 - 1 downto 0);
    trunc_ln128_1_fu_1189_p1 <= add_ln128_1_fu_1184_p2(3 - 1 downto 0);
    trunc_ln128_2_fu_1263_p1 <= add_ln128_2_fu_1258_p2(3 - 1 downto 0);
    trunc_ln128_3_fu_1305_p1 <= add_ln128_3_fu_1300_p2(3 - 1 downto 0);
    trunc_ln128_4_fu_1343_p1 <= add_ln128_4_fu_1338_p2(3 - 1 downto 0);
    trunc_ln128_fu_706_p1 <= add_ln128_fu_701_p2(3 - 1 downto 0);
    trunc_ln18_fu_942_p1 <= add_ln18_fu_927_p2(3 - 1 downto 0);
    trunc_ln22_fu_1023_p1 <= add_ln22_fu_1008_p2(3 - 1 downto 0);
    trunc_ln70_fu_543_p1 <= taskIn_TDATA_int_regslice(197 - 1 downto 0);
    trunc_ln79_fu_613_p1 <= add_ln79_fu_607_p2(3 - 1 downto 0);
    zext_ln100_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_449),64));
    zext_ln102_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_818_p3),64));
    zext_ln103_1_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln103_reg_1659),8));
    zext_ln103_2_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln103_1_fu_851_p3),64));
    zext_ln103_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_834_p1),64));
    zext_ln109_1_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln109_reg_1637),8));
    zext_ln109_2_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln109_1_fu_891_p3),64));
    zext_ln109_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i14_08_fu_188),64));
    zext_ln113_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_is_ok_phi_fu_499_p4),8));
    zext_ln128_1_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln128_reg_1598),8));
    zext_ln128_2_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln128_1_fu_1157_p3),64));
    zext_ln128_3_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln128_1_reg_1808),8));
    zext_ln128_4_fu_1239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln128_4_fu_1232_p3),61));
    zext_ln128_5_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln128_2_reg_1840),8));
    zext_ln128_6_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln128_3_reg_1861),8));
    zext_ln128_7_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln128_4_reg_1882),8));
    zext_ln128_8_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln128_5_reg_1829),64));
    zext_ln128_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(spawn_count_load_1_reg_1575),64));
    zext_ln18_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_960_p3),64));
    zext_ln19_1_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_460),9));
    zext_ln19_2_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_fu_976_p1),10));
    zext_ln19_3_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_484),64));
    zext_ln19_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_460),64));
    zext_ln22_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_1049_p3),64));
    zext_ln23_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_fu_1065_p1),10));
    zext_ln79_1_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln79_1_fu_1395_p3),57));
    zext_ln79_2_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln79_2_reg_1916),64));
    zext_ln79_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln79_reg_1482),8));
    zext_ln88_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(task_n_reg_1459),61));
    zext_ln96_1_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_192),64));
    zext_ln96_2_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_192),8));
    zext_ln96_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg_j_fu_648_p2),9));
end behav;

// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module nqueens_nqueens_Pipeline_VITIS_LOOP_131_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        taskOut_TREADY,
        task_n88,
        spawn_address0,
        spawn_ce0,
        spawn_q0,
        bs_address0,
        bs_ce0,
        bs_q0,
        count,
        empty,
        arg_j,
        cont_addr,
        taskOut_TDATA,
        taskOut_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   taskOut_TREADY;
input  [4:0] task_n88;
output  [3:0] spawn_address0;
output   spawn_ce0;
input  [0:0] spawn_q0;
output  [3:0] bs_address0;
output   bs_ce0;
input  [63:0] bs_q0;
input  [63:0] count;
input  [196:0] empty;
input  [7:0] arg_j;
input  [63:0] cont_addr;
output  [255:0] taskOut_TDATA;
output   taskOut_TVALID;

reg ap_idle;
reg taskOut_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] spawn_load_reg_256;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln131_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    taskOut_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] i_3_reg_237;
reg   [4:0] i_3_reg_237_pp0_iter1_reg;
wire   [63:0] zext_ln131_fu_157_p1;
reg   [63:0] zext_ln131_reg_246;
reg   [4:0] tmp_s_reg_265;
reg   [4:0] i_fu_70;
wire   [4:0] add_ln131_fu_151_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_3;
reg    ap_block_pp0_stage0_01001;
reg    spawn_ce0_local;
reg    bs_ce0_local;
wire   [6:0] shl_ln3_fu_176_p3;
wire   [63:0] zext_ln139_fu_183_p1;
wire   [63:0] arg_ret_addr_fu_187_p2;
wire   [207:0] tmp_5_fu_192_p7;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_70 = 5'd0;
#0 ap_done_reg = 1'b0;
end

nqueens_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln131_fu_145_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= add_ln131_fu_151_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_3_reg_237 <= ap_sig_allocacmp_i_3;
        i_3_reg_237_pp0_iter1_reg <= i_3_reg_237;
        spawn_load_reg_256 <= spawn_q0;
        tmp_s_reg_265 <= {{empty[196:192]}};
        zext_ln131_reg_246[4 : 0] <= zext_ln131_fu_157_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln131_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bs_ce0_local = 1'b1;
    end else begin
        bs_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        spawn_ce0_local = 1'b1;
    end else begin
        spawn_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (spawn_load_reg_256 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        taskOut_TDATA_blk_n = taskOut_TREADY;
    end else begin
        taskOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (spawn_load_reg_256 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        taskOut_TVALID = 1'b1;
    end else begin
        taskOut_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_fu_151_p2 = (ap_sig_allocacmp_i_3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state3_io = ((spawn_load_reg_256 == 1'd1) & (taskOut_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((spawn_load_reg_256 == 1'd1) & (taskOut_TREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign arg_ret_addr_fu_187_p2 = (count + zext_ln139_fu_183_p1);

assign bs_address0 = zext_ln131_reg_246;

assign bs_ce0 = bs_ce0_local;

assign icmp_ln131_fu_145_p2 = ((ap_sig_allocacmp_i_3 == task_n88) ? 1'b1 : 1'b0);

assign shl_ln3_fu_176_p3 = {{i_3_reg_237_pp0_iter1_reg}, {2'd0}};

assign spawn_address0 = zext_ln131_fu_157_p1;

assign spawn_ce0 = spawn_ce0_local;

assign taskOut_TDATA = tmp_5_fu_192_p7;

assign tmp_5_fu_192_p7 = {{{{{{arg_j}, {3'd0}}, {tmp_s_reg_265}}, {arg_ret_addr_fu_187_p2}}, {bs_q0}}, {cont_addr}};

assign zext_ln131_fu_157_p1 = ap_sig_allocacmp_i_3;

assign zext_ln139_fu_183_p1 = shl_ln3_fu_176_p3;

always @ (posedge ap_clk) begin
    zext_ln131_reg_246[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //nqueens_nqueens_Pipeline_VITIS_LOOP_131_4

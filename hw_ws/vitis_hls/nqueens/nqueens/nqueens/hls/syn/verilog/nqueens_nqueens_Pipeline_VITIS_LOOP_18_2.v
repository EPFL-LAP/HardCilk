// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module nqueens_nqueens_Pipeline_VITIS_LOOP_18_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indvars_iv_i,
        zext_ln119,
        i_8,
        zext_ln18_1,
        zext_ln17,
        l_bs_address0,
        l_bs_ce0,
        l_bs_q0,
        p,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] indvars_iv_i;
input  [7:0] zext_ln119;
input  [5:0] i_8;
input  [7:0] zext_ln18_1;
input  [7:0] zext_ln17;
output  [7:0] l_bs_address0;
output   l_bs_ce0;
input  [7:0] l_bs_q0;
input  [7:0] p;
output  [1:0] ap_return;

reg ap_idle;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] or_ln21_fu_208_p2;
wire   [0:0] icmp_ln21_fu_163_p2;
reg   [0:0] icmp_ln18_reg_247;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] merge_reg_103;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] zext_ln18_1_cast_fu_119_p1;
reg   [9:0] zext_ln18_1_cast_reg_235;
reg   [8:0] j_1_reg_241;
wire   [0:0] icmp_ln18_fu_139_p2;
reg   [0:0] icmp_ln21_reg_256;
wire    ap_block_pp0_stage1_11001;
wire   [8:0] add_ln18_fu_168_p2;
reg   [8:0] add_ln18_reg_260;
reg   [0:0] or_ln21_reg_265;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [1:0] ap_phi_mux_merge_phi_fu_108_p6;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln20_fu_155_p1;
reg   [8:0] j_fu_50;
wire   [8:0] indvars_iv_i_cast_fu_127_p1;
reg   [8:0] ap_sig_allocacmp_j_1;
wire    ap_loop_init;
reg    l_bs_ce0_local;
wire   [8:0] zext_ln119_cast_fu_123_p1;
wire   [7:0] trunc_ln20_fu_145_p1;
wire   [7:0] add_ln20_fu_149_p2;
wire    ap_block_pp0_stage1;
wire   [5:0] trunc_ln18_fu_160_p1;
wire   [5:0] sub_ln21_fu_177_p2;
wire  signed [9:0] sext_ln21_fu_182_p1;
wire   [9:0] sub_ln21_1_fu_186_p2;
wire   [9:0] zext_ln21_fu_173_p1;
wire   [9:0] add_ln21_fu_197_p2;
wire   [0:0] icmp_ln21_1_fu_191_p2;
wire   [0:0] icmp_ln21_2_fu_202_p2;
reg   [1:0] ap_return_preg;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_277;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_50 = 9'd0;
#0 ap_return_preg = 2'd0;
#0 ap_done_reg = 1'b0;
end

nqueens_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_preg <= ap_phi_mux_merge_phi_fu_108_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_50 <= indvars_iv_i_cast_fu_127_p1;
        end else if ((1'b1 == ap_condition_277)) begin
            j_fu_50 <= add_ln18_reg_260;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_247 == 1'd1) & (icmp_ln21_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        merge_reg_103 <= 2'd2;
    end else if (((or_ln21_reg_265 == 1'd1) & (icmp_ln21_reg_256 == 1'd0) & (icmp_ln18_reg_247 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        merge_reg_103 <= 2'd1;
    end else if (((icmp_ln18_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        merge_reg_103 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln18_reg_260 <= add_ln18_fu_168_p2;
        icmp_ln21_reg_256 <= icmp_ln21_fu_163_p2;
        or_ln21_reg_265 <= or_ln21_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_247 <= icmp_ln18_fu_139_p2;
        j_1_reg_241 <= ap_sig_allocacmp_j_1;
        zext_ln18_1_cast_reg_235[7 : 0] <= zext_ln18_1_cast_fu_119_p1[7 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((icmp_ln18_reg_247 == 1'd0) | ((icmp_ln21_fu_163_p2 == 1'd1) | (or_ln21_fu_208_p2 == 1'd1))))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln18_reg_247 == 1'd0) | ((or_ln21_reg_265 == 1'd1) | (icmp_ln21_reg_256 == 1'd1))))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln21_reg_265 == 1'd1) & (icmp_ln21_reg_256 == 1'd0) & (icmp_ln18_reg_247 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_merge_phi_fu_108_p6 = 2'd1;
    end else begin
        ap_phi_mux_merge_phi_fu_108_p6 = merge_reg_103;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return = ap_phi_mux_merge_phi_fu_108_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_j_1 = indvars_iv_i_cast_fu_127_p1;
        end else if ((1'b1 == ap_condition_277)) begin
            ap_sig_allocacmp_j_1 = add_ln18_reg_260;
        end else begin
            ap_sig_allocacmp_j_1 = j_fu_50;
        end
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_bs_ce0_local = 1'b1;
    end else begin
        l_bs_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_168_p2 = (j_1_reg_241 + 9'd1);

assign add_ln20_fu_149_p2 = (zext_ln17 + trunc_ln20_fu_145_p1);

assign add_ln21_fu_197_p2 = ($signed(sext_ln21_fu_182_p1) + $signed(zext_ln18_1_cast_reg_235));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_277 = ((or_ln21_reg_265 == 1'd0) & (icmp_ln21_reg_256 == 1'd0) & (icmp_ln18_reg_247 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln18_fu_139_p2 = ((ap_sig_allocacmp_j_1 < zext_ln119_cast_fu_123_p1) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_191_p2 = ((sub_ln21_1_fu_186_p2 == zext_ln21_fu_173_p1) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_202_p2 = ((add_ln21_fu_197_p2 == zext_ln21_fu_173_p1) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_163_p2 = ((l_bs_q0 == p) ? 1'b1 : 1'b0);

assign indvars_iv_i_cast_fu_127_p1 = indvars_iv_i;

assign l_bs_address0 = zext_ln20_fu_155_p1;

assign l_bs_ce0 = l_bs_ce0_local;

assign or_ln21_fu_208_p2 = (icmp_ln21_2_fu_202_p2 | icmp_ln21_1_fu_191_p2);

assign sext_ln21_fu_182_p1 = $signed(sub_ln21_fu_177_p2);

assign sub_ln21_1_fu_186_p2 = ($signed(zext_ln18_1_cast_reg_235) - $signed(sext_ln21_fu_182_p1));

assign sub_ln21_fu_177_p2 = (trunc_ln18_fu_160_p1 - i_8);

assign trunc_ln18_fu_160_p1 = j_1_reg_241[5:0];

assign trunc_ln20_fu_145_p1 = ap_sig_allocacmp_j_1[7:0];

assign zext_ln119_cast_fu_123_p1 = zext_ln119;

assign zext_ln18_1_cast_fu_119_p1 = zext_ln18_1;

assign zext_ln20_fu_155_p1 = add_ln20_fu_149_p2;

assign zext_ln21_fu_173_p1 = l_bs_q0;

always @ (posedge ap_clk) begin
    zext_ln18_1_cast_reg_235[9:8] <= 2'b00;
end

endmodule //nqueens_nqueens_Pipeline_VITIS_LOOP_18_2

// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nqueens_nqueens,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3596,HLS_SYN_LUT=5454,HLS_VERSION=2024_1}" *)

module nqueens (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        taskIn_TDATA,
        taskIn_TVALID,
        taskIn_TREADY,
        taskOut_TDATA,
        taskOut_TVALID,
        taskOut_TREADY,
        argOut_TDATA,
        argOut_TVALID,
        argOut_TREADY,
        taskOutGlobal_TDATA,
        taskOutGlobal_TVALID,
        taskOutGlobal_TREADY,
        closureIn_TDATA,
        closureIn_TVALID,
        closureIn_TREADY,
        mallocIn_TDATA,
        mallocIn_TVALID,
        mallocIn_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 80'd1;
parameter    ap_ST_fsm_state2 = 80'd2;
parameter    ap_ST_fsm_state3 = 80'd4;
parameter    ap_ST_fsm_state4 = 80'd8;
parameter    ap_ST_fsm_state5 = 80'd16;
parameter    ap_ST_fsm_state6 = 80'd32;
parameter    ap_ST_fsm_state7 = 80'd64;
parameter    ap_ST_fsm_state8 = 80'd128;
parameter    ap_ST_fsm_state9 = 80'd256;
parameter    ap_ST_fsm_state10 = 80'd512;
parameter    ap_ST_fsm_state11 = 80'd1024;
parameter    ap_ST_fsm_state12 = 80'd2048;
parameter    ap_ST_fsm_state13 = 80'd4096;
parameter    ap_ST_fsm_state14 = 80'd8192;
parameter    ap_ST_fsm_state15 = 80'd16384;
parameter    ap_ST_fsm_state16 = 80'd32768;
parameter    ap_ST_fsm_state17 = 80'd65536;
parameter    ap_ST_fsm_state18 = 80'd131072;
parameter    ap_ST_fsm_state19 = 80'd262144;
parameter    ap_ST_fsm_state20 = 80'd524288;
parameter    ap_ST_fsm_state21 = 80'd1048576;
parameter    ap_ST_fsm_state22 = 80'd2097152;
parameter    ap_ST_fsm_state23 = 80'd4194304;
parameter    ap_ST_fsm_state24 = 80'd8388608;
parameter    ap_ST_fsm_state25 = 80'd16777216;
parameter    ap_ST_fsm_state26 = 80'd33554432;
parameter    ap_ST_fsm_state27 = 80'd67108864;
parameter    ap_ST_fsm_state28 = 80'd134217728;
parameter    ap_ST_fsm_state29 = 80'd268435456;
parameter    ap_ST_fsm_state30 = 80'd536870912;
parameter    ap_ST_fsm_state31 = 80'd1073741824;
parameter    ap_ST_fsm_state32 = 80'd2147483648;
parameter    ap_ST_fsm_state33 = 80'd4294967296;
parameter    ap_ST_fsm_state34 = 80'd8589934592;
parameter    ap_ST_fsm_state35 = 80'd17179869184;
parameter    ap_ST_fsm_state36 = 80'd34359738368;
parameter    ap_ST_fsm_state37 = 80'd68719476736;
parameter    ap_ST_fsm_state38 = 80'd137438953472;
parameter    ap_ST_fsm_state39 = 80'd274877906944;
parameter    ap_ST_fsm_state40 = 80'd549755813888;
parameter    ap_ST_fsm_state41 = 80'd1099511627776;
parameter    ap_ST_fsm_state42 = 80'd2199023255552;
parameter    ap_ST_fsm_state43 = 80'd4398046511104;
parameter    ap_ST_fsm_state44 = 80'd8796093022208;
parameter    ap_ST_fsm_state45 = 80'd17592186044416;
parameter    ap_ST_fsm_state46 = 80'd35184372088832;
parameter    ap_ST_fsm_state47 = 80'd70368744177664;
parameter    ap_ST_fsm_state48 = 80'd140737488355328;
parameter    ap_ST_fsm_state49 = 80'd281474976710656;
parameter    ap_ST_fsm_state50 = 80'd562949953421312;
parameter    ap_ST_fsm_state51 = 80'd1125899906842624;
parameter    ap_ST_fsm_state52 = 80'd2251799813685248;
parameter    ap_ST_fsm_state53 = 80'd4503599627370496;
parameter    ap_ST_fsm_state54 = 80'd9007199254740992;
parameter    ap_ST_fsm_state55 = 80'd18014398509481984;
parameter    ap_ST_fsm_state56 = 80'd36028797018963968;
parameter    ap_ST_fsm_state57 = 80'd72057594037927936;
parameter    ap_ST_fsm_state58 = 80'd144115188075855872;
parameter    ap_ST_fsm_state59 = 80'd288230376151711744;
parameter    ap_ST_fsm_state60 = 80'd576460752303423488;
parameter    ap_ST_fsm_state61 = 80'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 80'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 80'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 80'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 80'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 80'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 80'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 80'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 80'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 80'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 80'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 80'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 80'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 80'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 80'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 80'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 80'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 80'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 80'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 80'd604462909807314587353088;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [255:0] taskIn_TDATA;
input   taskIn_TVALID;
output   taskIn_TREADY;
output  [255:0] taskOut_TDATA;
output   taskOut_TVALID;
input   taskOut_TREADY;
output  [63:0] argOut_TDATA;
output   argOut_TVALID;
input   argOut_TREADY;
output  [255:0] taskOutGlobal_TDATA;
output   taskOutGlobal_TVALID;
input   taskOutGlobal_TREADY;
input  [63:0] closureIn_TDATA;
input   closureIn_TVALID;
output   closureIn_TREADY;
input  [63:0] mallocIn_TDATA;
input   mallocIn_TVALID;
output   mallocIn_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [79:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] mem;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state71;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state72;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state77;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state66;
reg    taskIn_TDATA_blk_n;
reg    argOut_TDATA_blk_n;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
reg    taskOutGlobal_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln96_fu_675_p2;
wire   [0:0] icmp_ln124_fu_695_p2;
wire    ap_CS_fsm_state70;
reg    closureIn_TDATA_blk_n;
reg    mallocIn_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg   [63:0] mem_read_reg_1426;
wire   [196:0] trunc_ln70_fu_543_p1;
reg   [196:0] trunc_ln70_reg_1436;
wire   [63:0] task_cont_fu_547_p1;
reg   [63:0] task_cont_reg_1441;
reg   [63:0] task_a_reg_1448;
wire   [63:0] task_ret_addr_fu_561_p4;
reg   [63:0] task_ret_addr_reg_1453;
wire   [7:0] task_n_fu_571_p4;
reg   [7:0] task_n_reg_1459;
reg   [4:0] task_n66_cast_reg_1466;
wire   [7:0] task_j_fu_591_p4;
reg   [7:0] task_j_reg_1472;
wire   [2:0] trunc_ln79_fu_613_p1;
reg   [2:0] trunc_ln79_reg_1482;
reg   [60:0] trunc_ln79_1_reg_1488;
reg   [63:0] count_reg_1514;
wire   [60:0] zext_ln88_fu_642_p1;
reg   [60:0] zext_ln88_reg_1522;
wire    ap_CS_fsm_state3;
wire   [7:0] arg_j_fu_648_p2;
reg   [7:0] arg_j_reg_1527;
wire   [0:0] cmp7_i_fu_653_p2;
reg   [0:0] cmp7_i_reg_1533;
wire   [8:0] zext_ln96_fu_659_p1;
reg   [8:0] zext_ln96_reg_1537;
wire   [63:0] add_ln109_fu_663_p2;
reg   [63:0] add_ln109_reg_1543;
wire   [4:0] add_ln96_fu_680_p2;
reg   [4:0] add_ln96_reg_1551;
wire   [63:0] zext_ln96_1_fu_686_p1;
reg   [63:0] zext_ln96_1_reg_1556;
reg   [63:0] b_reg_1562;
wire   [63:0] add_ln103_fu_690_p2;
reg   [63:0] add_ln103_reg_1568;
reg   [7:0] spawn_count_load_1_reg_1575;
reg   [63:0] cont_addr_reg_1580;
reg   [0:0] icmp_ln124_reg_1586;
wire   [63:0] add_ln128_fu_701_p2;
reg   [63:0] add_ln128_reg_1590;
wire   [2:0] trunc_ln128_fu_706_p1;
reg   [2:0] trunc_ln128_reg_1598;
reg   [60:0] trunc_ln128_5_reg_1604;
wire   [7:0] add_ln100_fu_738_p2;
reg   [7:0] add_ln100_reg_1617;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln100_fu_744_p1;
reg   [63:0] zext_ln100_reg_1622;
reg   [60:0] trunc_ln102_1_reg_1627;
wire   [2:0] trunc_ln102_fu_768_p1;
reg   [2:0] trunc_ln102_reg_1632;
wire   [2:0] trunc_ln109_fu_776_p1;
reg   [2:0] trunc_ln109_reg_1637;
reg   [60:0] trunc_ln109_1_reg_1643;
reg   [63:0] gmem_addr_8_read_reg_1654;
wire   [2:0] trunc_ln103_fu_804_p1;
reg   [2:0] trunc_ln103_reg_1659;
reg   [60:0] trunc_ln103_1_reg_1665;
wire   [7:0] shl_ln103_fu_845_p2;
reg   [7:0] shl_ln103_reg_1670;
wire   [63:0] shl_ln103_2_fu_862_p2;
reg   [63:0] shl_ln103_2_reg_1675;
wire   [7:0] shl_ln109_fu_885_p2;
reg   [7:0] shl_ln109_reg_1686;
wire   [63:0] shl_ln109_2_fu_902_p2;
reg   [63:0] shl_ln109_2_reg_1691;
wire   [0:0] icmp_ln19_fu_918_p2;
reg   [0:0] icmp_ln19_reg_1702;
wire    ap_CS_fsm_state30;
reg   [60:0] trunc_ln18_1_reg_1706;
wire   [2:0] trunc_ln18_fu_942_p1;
reg   [2:0] trunc_ln18_reg_1711;
reg   [63:0] gmem_addr_10_read_reg_1722;
wire   [8:0] zext_ln19_1_fu_956_p1;
reg   [8:0] zext_ln19_1_reg_1727;
wire    ap_CS_fsm_state40;
wire   [7:0] p_fu_976_p1;
reg   [7:0] p_reg_1732;
wire   [7:0] empty_32_fu_986_p1;
reg   [7:0] empty_32_reg_1737;
wire   [9:0] zext_ln19_2_fu_990_p1;
reg   [9:0] zext_ln19_2_reg_1742;
wire   [0:0] icmp_ln19_1_fu_994_p2;
reg   [0:0] icmp_ln19_1_reg_1748;
reg   [60:0] trunc_ln22_1_reg_1755;
wire    ap_CS_fsm_state41;
wire   [2:0] trunc_ln22_fu_1023_p1;
reg   [2:0] trunc_ln22_reg_1760;
wire   [8:0] add_ln19_1_fu_1027_p2;
reg   [8:0] add_ln19_1_reg_1765;
wire   [8:0] add_ln16_fu_1033_p2;
reg   [63:0] gmem_addr_11_read_reg_1781;
wire   [7:0] shl_ln128_fu_1151_p2;
reg   [7:0] shl_ln128_reg_1792;
wire   [63:0] shl_ln128_2_fu_1168_p2;
reg   [63:0] shl_ln128_2_reg_1797;
wire   [2:0] trunc_ln128_1_fu_1189_p1;
reg   [2:0] trunc_ln128_1_reg_1808;
reg   [60:0] trunc_ln128_6_reg_1814;
reg   [60:0] trunc_ln3_reg_1819;
wire   [7:0] shl_ln128_3_fu_1226_p2;
reg   [7:0] shl_ln128_3_reg_1824;
wire   [60:0] shl_ln128_5_fu_1243_p2;
reg   [60:0] shl_ln128_5_reg_1829;
wire   [2:0] trunc_ln128_2_fu_1263_p1;
reg   [2:0] trunc_ln128_2_reg_1840;
reg   [60:0] trunc_ln128_7_reg_1845;
wire   [7:0] shl_ln128_6_fu_1284_p2;
reg   [7:0] shl_ln128_6_reg_1850;
wire   [2:0] trunc_ln128_3_fu_1305_p1;
reg   [2:0] trunc_ln128_3_reg_1861;
reg   [60:0] trunc_ln128_8_reg_1866;
wire   [7:0] shl_ln128_7_fu_1322_p2;
reg   [7:0] shl_ln128_7_reg_1871;
wire   [2:0] trunc_ln128_4_fu_1343_p1;
reg   [2:0] trunc_ln128_4_reg_1882;
reg   [60:0] trunc_ln128_9_reg_1887;
wire   [7:0] shl_ln128_8_fu_1360_p2;
reg   [7:0] shl_ln128_8_reg_1892;
wire   [7:0] shl_ln79_fu_1389_p2;
reg   [7:0] shl_ln79_reg_1911;
wire   [56:0] shl_ln79_2_fu_1406_p2;
reg   [56:0] shl_ln79_2_reg_1916;
reg   [3:0] spawn_address0;
reg    spawn_ce0;
wire   [0:0] spawn_q0;
reg   [3:0] bs_address0;
reg    bs_ce0;
wire   [63:0] bs_q0;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_idle;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_ready;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID;
wire   [63:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR;
wire   [0:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWID;
wire   [31:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN;
wire   [2:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWSIZE;
wire   [1:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWBURST;
wire   [1:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLOCK;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWCACHE;
wire   [2:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWPROT;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWQOS;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWREGION;
wire   [0:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWUSER;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID;
wire   [63:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA;
wire   [7:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WLAST;
wire   [0:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WID;
wire   [0:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WUSER;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARVALID;
wire   [63:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARADDR;
wire   [0:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARID;
wire   [31:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLEN;
wire   [2:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARSIZE;
wire   [1:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARBURST;
wire   [1:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLOCK;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARCACHE;
wire   [2:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARPROT;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARQOS;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARREGION;
wire   [0:0] grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARUSER;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_RREADY;
wire    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_idle;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_ready;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TREADY;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0;
wire   [3:0] grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0;
wire   [255:0] grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TDATA;
wire    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TVALID;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [63:0] gmem_WDATA;
reg   [7:0] gmem_WSTRB;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [63:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [7:0] k_reg_449;
reg    ap_predicate_op149_write_state4;
reg    ap_block_state4;
reg    ap_block_state4_io;
reg   [7:0] i_3_reg_460;
wire   [0:0] icmp_ln19_2_fu_999_p2;
wire    ap_CS_fsm_state29;
reg   [8:0] indvars_iv_i_reg_472;
reg   [8:0] j_1_reg_484;
wire    ap_CS_fsm_state51;
wire   [0:0] icmp_ln23_fu_1069_p2;
wire   [0:0] or_ln23_fu_1109_p2;
reg   [0:0] ap_phi_mux_is_ok_phi_fu_499_p4;
reg   [0:0] is_ok_reg_495;
wire    ap_CS_fsm_state52;
reg    grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg;
reg    grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire   [0:0] icmp_ln100_fu_733_p2;
wire  signed [63:0] sext_ln102_fu_790_p1;
wire  signed [63:0] sext_ln103_fu_868_p1;
wire  signed [63:0] sext_ln109_fu_908_p1;
wire  signed [63:0] sext_ln18_fu_946_p1;
wire  signed [63:0] sext_ln22_fu_1039_p1;
wire  signed [63:0] sext_ln128_fu_1174_p1;
wire  signed [63:0] sext_ln128_1_fu_1248_p1;
wire  signed [63:0] sext_ln128_2_fu_1290_p1;
wire  signed [63:0] sext_ln128_3_fu_1328_p1;
wire  signed [63:0] sext_ln128_4_fu_1366_p1;
wire  signed [63:0] sext_ln129_fu_1376_p1;
wire  signed [63:0] sext_ln79_fu_1412_p1;
reg    ap_block_state54_io;
reg    ap_block_state55_io;
wire   [63:0] zext_ln128_8_fu_1277_p1;
reg    ap_block_state56_io;
reg    ap_block_state57_io;
reg    ap_block_state58_io;
wire   [63:0] zext_ln79_2_fu_1422_p1;
reg   [7:0] spawn_count_fu_184;
wire   [7:0] spawn_count_1_fu_1119_p2;
reg   [7:0] i14_08_fu_188;
wire   [7:0] i_4_fu_1125_p2;
reg   [4:0] i_1_fu_192;
reg    ap_block_state1;
reg    ap_block_state78;
reg    bs_we0_local;
reg    bs_ce0_local;
reg    spawn_we0_local;
reg    spawn_ce0_local;
wire    ap_CS_fsm_state67;
wire   [63:0] add_ln79_fu_607_p2;
wire   [63:0] conv39_fu_645_p1;
wire   [7:0] zext_ln96_2_fu_671_p1;
wire   [63:0] add_ln102_fu_748_p2;
wire   [63:0] add_ln102_1_fu_753_p2;
wire   [63:0] add_ln109_1_fu_772_p2;
wire   [63:0] add_ln103_1_fu_800_p2;
wire   [5:0] shl_ln1_fu_818_p3;
wire   [63:0] zext_ln102_fu_825_p1;
wire   [63:0] lshr_ln102_fu_829_p2;
wire   [7:0] tmp_fu_834_p1;
wire   [7:0] zext_ln103_1_fu_842_p1;
wire   [5:0] shl_ln103_1_fu_851_p3;
wire   [63:0] zext_ln103_fu_838_p1;
wire   [63:0] zext_ln103_2_fu_858_p1;
wire   [7:0] zext_ln109_1_fu_882_p1;
wire   [5:0] shl_ln109_1_fu_891_p3;
wire   [63:0] zext_ln109_fu_878_p1;
wire   [63:0] zext_ln109_2_fu_898_p1;
wire   [63:0] zext_ln19_fu_923_p1;
wire   [63:0] add_ln18_fu_927_p2;
wire   [5:0] shl_ln3_fu_960_p3;
wire   [63:0] zext_ln18_fu_967_p1;
wire   [63:0] lshr_ln18_fu_971_p2;
wire   [8:0] add_ln19_fu_980_p2;
wire   [63:0] zext_ln19_3_fu_1004_p1;
wire   [63:0] add_ln22_fu_1008_p2;
wire   [5:0] shl_ln4_fu_1049_p3;
wire   [63:0] zext_ln22_fu_1056_p1;
wire   [63:0] lshr_ln22_fu_1060_p2;
wire   [7:0] q_fu_1065_p1;
wire   [8:0] sub_ln23_fu_1078_p2;
wire  signed [9:0] sext_ln23_fu_1083_p1;
wire   [9:0] sub_ln23_1_fu_1087_p2;
wire   [9:0] zext_ln23_fu_1074_p1;
wire   [9:0] add_ln23_fu_1098_p2;
wire   [0:0] icmp_ln23_1_fu_1092_p2;
wire   [0:0] icmp_ln23_2_fu_1103_p2;
wire   [7:0] zext_ln113_fu_1115_p1;
wire   [7:0] zext_ln128_1_fu_1148_p1;
wire   [5:0] shl_ln128_1_fu_1157_p3;
wire   [63:0] zext_ln128_fu_1145_p1;
wire   [63:0] zext_ln128_2_fu_1164_p1;
wire   [63:0] add_ln128_1_fu_1184_p2;
wire   [63:0] add_ln128_5_fu_1203_p2;
wire   [63:0] add_ln128_6_fu_1208_p2;
wire   [7:0] zext_ln128_3_fu_1223_p1;
wire   [5:0] shl_ln128_4_fu_1232_p3;
wire   [60:0] zext_ln128_4_fu_1239_p1;
wire   [63:0] add_ln128_2_fu_1258_p2;
wire   [7:0] zext_ln128_5_fu_1281_p1;
wire   [63:0] add_ln128_3_fu_1300_p2;
wire   [7:0] zext_ln128_6_fu_1319_p1;
wire   [63:0] add_ln128_4_fu_1338_p2;
wire   [7:0] zext_ln128_7_fu_1357_p1;
wire   [7:0] zext_ln79_fu_1386_p1;
wire   [5:0] shl_ln79_1_fu_1395_p3;
wire   [56:0] zext_ln79_1_fu_1402_p1;
wire   [0:0] icmp_ln76_fu_601_p2;
wire    ap_CS_fsm_state80;
wire    regslice_both_taskOut_U_apdone_blk;
wire    regslice_both_argOut_U_apdone_blk;
wire    regslice_both_taskOutGlobal_U_apdone_blk;
reg    ap_block_state80;
reg   [79:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
reg    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
reg    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
reg    ap_ST_fsm_state58_blk;
reg    ap_ST_fsm_state59_blk;
reg    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
reg    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
reg    ap_block_state69_on_subcall_done;
reg    ap_ST_fsm_state69_blk;
reg    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
reg    ap_ST_fsm_state77_blk;
reg    ap_ST_fsm_state78_blk;
reg    ap_ST_fsm_state79_blk;
reg    ap_ST_fsm_state80_blk;
wire    regslice_both_taskIn_U_apdone_blk;
wire   [255:0] taskIn_TDATA_int_regslice;
wire    taskIn_TVALID_int_regslice;
reg    taskIn_TREADY_int_regslice;
wire    regslice_both_taskIn_U_ack_in;
wire    taskOut_TREADY_int_regslice;
wire    regslice_both_taskOut_U_vld_out;
reg    argOut_TVALID_int_regslice;
wire    argOut_TREADY_int_regslice;
wire    regslice_both_argOut_U_vld_out;
wire   [255:0] taskOutGlobal_TDATA_int_regslice;
reg    taskOutGlobal_TVALID_int_regslice;
wire    taskOutGlobal_TREADY_int_regslice;
wire    regslice_both_taskOutGlobal_U_vld_out;
wire    regslice_both_closureIn_U_apdone_blk;
wire   [63:0] closureIn_TDATA_int_regslice;
wire    closureIn_TVALID_int_regslice;
reg    closureIn_TREADY_int_regslice;
wire    regslice_both_closureIn_U_ack_in;
wire    regslice_both_mallocIn_U_apdone_blk;
wire   [63:0] mallocIn_TDATA_int_regslice;
wire    mallocIn_TVALID_int_regslice;
reg    mallocIn_TREADY_int_regslice;
wire    regslice_both_mallocIn_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 80'd1;
#0 grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg = 1'b0;
#0 grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg = 1'b0;
#0 spawn_count_fu_184 = 8'd0;
#0 i14_08_fu_188 = 8'd0;
#0 i_1_fu_192 = 5'd0;
end

nqueens_spawn_RAM_AUTO_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
spawn_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(spawn_address0),
    .ce0(spawn_ce0),
    .we0(spawn_we0_local),
    .d0(ap_phi_mux_is_ok_phi_fu_499_p4),
    .q0(spawn_q0)
);

nqueens_bs_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bs_address0),
    .ce0(bs_ce0),
    .we0(bs_we0_local),
    .d0(b_reg_1562),
    .q0(bs_q0)
);

nqueens_nqueens_Pipeline_VITIS_LOOP_88_1 grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start),
    .ap_done(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done),
    .ap_idle(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_idle),
    .ap_ready(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_ready),
    .m_axi_gmem_AWVALID(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(64'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .task_n66(task_n_reg_1459),
    .mem(mem_read_reg_1426),
    .count(count_reg_1514)
);

nqueens_nqueens_Pipeline_VITIS_LOOP_133_4 grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start),
    .ap_done(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done),
    .ap_idle(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_idle),
    .ap_ready(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_ready),
    .taskOut_TREADY(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TREADY),
    .task_n66(task_n66_cast_reg_1466),
    .spawn_address0(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0),
    .spawn_ce0(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0),
    .spawn_q0(spawn_q0),
    .bs_address0(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0),
    .bs_ce0(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0),
    .bs_q0(bs_q0),
    .count(count_reg_1514),
    .empty(trunc_ln70_reg_1436),
    .arg_j(arg_j_reg_1527),
    .cont_addr(cont_addr_reg_1580),
    .taskOut_TDATA(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TDATA),
    .taskOut_TVALID(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TVALID)
);

nqueens_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem(mem)
);

nqueens_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 64 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_ARVALID),
    .I_CH0_ARREADY(gmem_ARREADY),
    .I_CH0_ARADDR(gmem_ARADDR),
    .I_CH0_ARLEN(gmem_ARLEN),
    .I_CH0_RVALID(gmem_RVALID),
    .I_CH0_RREADY(gmem_RREADY),
    .I_CH0_RDATA(gmem_RDATA),
    .I_CH0_RFIFONUM(gmem_RFIFONUM),
    .I_CH0_AWVALID(gmem_AWVALID),
    .I_CH0_AWREADY(gmem_AWREADY),
    .I_CH0_AWADDR(gmem_AWADDR),
    .I_CH0_AWLEN(gmem_AWLEN),
    .I_CH0_WVALID(gmem_WVALID),
    .I_CH0_WREADY(gmem_WREADY),
    .I_CH0_WDATA(gmem_WDATA),
    .I_CH0_WSTRB(gmem_WSTRB),
    .I_CH0_BVALID(gmem_BVALID),
    .I_CH0_BREADY(gmem_BREADY)
);

nqueens_regslice_both #(
    .DataWidth( 256 ))
regslice_both_taskIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskIn_TDATA),
    .vld_in(taskIn_TVALID),
    .ack_in(regslice_both_taskIn_U_ack_in),
    .data_out(taskIn_TDATA_int_regslice),
    .vld_out(taskIn_TVALID_int_regslice),
    .ack_out(taskIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_taskIn_U_apdone_blk)
);

nqueens_regslice_both #(
    .DataWidth( 256 ))
regslice_both_taskOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TDATA),
    .vld_in(grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TVALID),
    .ack_in(taskOut_TREADY_int_regslice),
    .data_out(taskOut_TDATA),
    .vld_out(regslice_both_taskOut_U_vld_out),
    .ack_out(taskOut_TREADY),
    .apdone_blk(regslice_both_taskOut_U_apdone_blk)
);

nqueens_regslice_both #(
    .DataWidth( 64 ))
regslice_both_argOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(task_cont_reg_1441),
    .vld_in(argOut_TVALID_int_regslice),
    .ack_in(argOut_TREADY_int_regslice),
    .data_out(argOut_TDATA),
    .vld_out(regslice_both_argOut_U_vld_out),
    .ack_out(argOut_TREADY),
    .apdone_blk(regslice_both_argOut_U_apdone_blk)
);

nqueens_regslice_both #(
    .DataWidth( 256 ))
regslice_both_taskOutGlobal_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskOutGlobal_TDATA_int_regslice),
    .vld_in(taskOutGlobal_TVALID_int_regslice),
    .ack_in(taskOutGlobal_TREADY_int_regslice),
    .data_out(taskOutGlobal_TDATA),
    .vld_out(regslice_both_taskOutGlobal_U_vld_out),
    .ack_out(taskOutGlobal_TREADY),
    .apdone_blk(regslice_both_taskOutGlobal_U_apdone_blk)
);

nqueens_regslice_both #(
    .DataWidth( 64 ))
regslice_both_closureIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(closureIn_TDATA),
    .vld_in(closureIn_TVALID),
    .ack_in(regslice_both_closureIn_U_ack_in),
    .data_out(closureIn_TDATA_int_regslice),
    .vld_out(closureIn_TVALID_int_regslice),
    .ack_out(closureIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_closureIn_U_apdone_blk)
);

nqueens_regslice_both #(
    .DataWidth( 64 ))
regslice_both_mallocIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mallocIn_TDATA),
    .vld_in(mallocIn_TVALID),
    .ack_in(regslice_both_mallocIn_U_ack_in),
    .data_out(mallocIn_TDATA_int_regslice),
    .vld_out(mallocIn_TVALID_int_regslice),
    .ack_out(mallocIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_mallocIn_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state68)) begin
            grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg <= 1'b1;
        end else if ((grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_ready == 1'b1)) begin
            grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (mallocIn_TVALID_int_regslice == 1'b1))) begin
            grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg <= 1'b1;
        end else if ((grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_ready == 1'b1)) begin
            grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (mallocIn_TVALID_int_regslice == 1'b1))) begin
        i14_08_fu_188 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        i14_08_fu_188 <= i_4_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (mallocIn_TVALID_int_regslice == 1'b1))) begin
        i_1_fu_192 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        i_1_fu_192 <= add_ln96_reg_1551;
    end
end

always @ (posedge ap_clk) begin
    if ((~(1'd1 == 1'd0) & (cmp7_i_reg_1533 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        i_3_reg_460 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state41) & ((icmp_ln19_2_fu_999_p2 == 1'd0) | (icmp_ln19_1_reg_1748 == 1'd0)))) begin
        i_3_reg_460 <= empty_32_reg_1737;
    end
end

always @ (posedge ap_clk) begin
    if ((~(1'd1 == 1'd0) & (cmp7_i_reg_1533 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        indvars_iv_i_reg_472 <= 9'd1;
    end else if (((1'b1 == ap_CS_fsm_state41) & ((icmp_ln19_2_fu_999_p2 == 1'd0) | (icmp_ln19_1_reg_1748 == 1'd0)))) begin
        indvars_iv_i_reg_472 <= add_ln16_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_1702 == 1'd1) & (cmp7_i_reg_1533 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        is_ok_reg_495 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & ((icmp_ln19_fu_918_p2 == 1'd0) | (cmp7_i_reg_1533 == 1'd1)))) begin
        is_ok_reg_495 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_1_fu_994_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        j_1_reg_484 <= indvars_iv_i_reg_472;
    end else if (((or_ln23_fu_1109_p2 == 1'd0) & (icmp_ln23_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        j_1_reg_484 <= add_ln19_1_reg_1765;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        k_reg_449 <= add_ln100_reg_1617;
    end else if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (icmp_ln96_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_reg_449 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (mallocIn_TVALID_int_regslice == 1'b1))) begin
        spawn_count_fu_184 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        spawn_count_fu_184 <= spawn_count_1_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln100_reg_1617 <= add_ln100_fu_738_p2;
        trunc_ln102_1_reg_1627 <= {{add_ln102_1_fu_753_p2[63:3]}};
        trunc_ln102_reg_1632 <= trunc_ln102_fu_768_p1;
        trunc_ln109_1_reg_1643 <= {{add_ln109_1_fu_772_p2[63:3]}};
        trunc_ln109_reg_1637 <= trunc_ln109_fu_776_p1;
        zext_ln100_reg_1622[7 : 0] <= zext_ln100_fu_744_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln103_reg_1568 <= add_ln103_fu_690_p2;
        add_ln128_reg_1590 <= add_ln128_fu_701_p2;
        add_ln96_reg_1551 <= add_ln96_fu_680_p2;
        b_reg_1562 <= mallocIn_TDATA_int_regslice;
        cont_addr_reg_1580 <= closureIn_TDATA_int_regslice;
        icmp_ln124_reg_1586 <= icmp_ln124_fu_695_p2;
        spawn_count_load_1_reg_1575 <= spawn_count_fu_184;
        trunc_ln128_5_reg_1604 <= {{add_ln128_fu_701_p2[63:3]}};
        trunc_ln128_reg_1598 <= trunc_ln128_fu_706_p1;
        zext_ln96_1_reg_1556[4 : 0] <= zext_ln96_1_fu_686_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln109_reg_1543 <= add_ln109_fu_663_p2;
        arg_j_reg_1527 <= arg_j_fu_648_p2;
        cmp7_i_reg_1533 <= cmp7_i_fu_653_p2;
        zext_ln88_reg_1522[7 : 0] <= zext_ln88_fu_642_p1[7 : 0];
        zext_ln96_reg_1537[7 : 0] <= zext_ln96_fu_659_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln19_1_reg_1765 <= add_ln19_1_fu_1027_p2;
        trunc_ln22_1_reg_1755 <= {{add_ln22_fu_1008_p2[63:3]}};
        trunc_ln22_reg_1760 <= trunc_ln22_fu_1023_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        count_reg_1514 <= mallocIn_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        empty_32_reg_1737 <= empty_32_fu_986_p1;
        icmp_ln19_1_reg_1748 <= icmp_ln19_1_fu_994_p2;
        p_reg_1732 <= p_fu_976_p1;
        zext_ln19_1_reg_1727[7 : 0] <= zext_ln19_1_fu_956_p1[7 : 0];
        zext_ln19_2_reg_1742[7 : 0] <= zext_ln19_2_fu_990_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gmem_addr_10_read_reg_1722 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        gmem_addr_11_read_reg_1781 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_addr_8_read_reg_1654 <= gmem_RDATA;
        trunc_ln103_1_reg_1665 <= {{add_ln103_1_fu_800_p2[63:3]}};
        trunc_ln103_reg_1659 <= trunc_ln103_fu_804_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        icmp_ln19_reg_1702 <= icmp_ln19_fu_918_p2;
        trunc_ln18_1_reg_1706 <= {{add_ln18_fu_927_p2[63:3]}};
        trunc_ln18_reg_1711 <= trunc_ln18_fu_942_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mem_read_reg_1426 <= mem;
        task_a_reg_1448 <= {{taskIn_TDATA_int_regslice[127:64]}};
        task_cont_reg_1441 <= task_cont_fu_547_p1;
        task_j_reg_1472 <= {{taskIn_TDATA_int_regslice[207:200]}};
        task_n66_cast_reg_1466 <= {{taskIn_TDATA_int_regslice[196:192]}};
        task_n_reg_1459 <= {{taskIn_TDATA_int_regslice[199:192]}};
        task_ret_addr_reg_1453 <= {{taskIn_TDATA_int_regslice[191:128]}};
        trunc_ln70_reg_1436 <= trunc_ln70_fu_543_p1;
        trunc_ln79_1_reg_1488 <= {{add_ln79_fu_607_p2[63:3]}};
        trunc_ln79_reg_1482 <= trunc_ln79_fu_613_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        shl_ln103_2_reg_1675 <= shl_ln103_2_fu_862_p2;
        shl_ln103_reg_1670 <= shl_ln103_fu_845_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        shl_ln109_2_reg_1691 <= shl_ln109_2_fu_902_p2;
        shl_ln109_reg_1686 <= shl_ln109_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        shl_ln128_2_reg_1797 <= shl_ln128_2_fu_1168_p2;
        shl_ln128_reg_1792 <= shl_ln128_fu_1151_p2;
        trunc_ln128_1_reg_1808 <= trunc_ln128_1_fu_1189_p1;
        trunc_ln128_6_reg_1814 <= {{add_ln128_1_fu_1184_p2[63:3]}};
        trunc_ln3_reg_1819 <= {{add_ln128_6_fu_1208_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        shl_ln128_3_reg_1824 <= shl_ln128_3_fu_1226_p2;
        shl_ln128_5_reg_1829 <= shl_ln128_5_fu_1243_p2;
        trunc_ln128_2_reg_1840 <= trunc_ln128_2_fu_1263_p1;
        trunc_ln128_7_reg_1845 <= {{add_ln128_2_fu_1258_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        shl_ln128_6_reg_1850 <= shl_ln128_6_fu_1284_p2;
        trunc_ln128_3_reg_1861 <= trunc_ln128_3_fu_1305_p1;
        trunc_ln128_8_reg_1866 <= {{add_ln128_3_fu_1300_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        shl_ln128_7_reg_1871 <= shl_ln128_7_fu_1322_p2;
        trunc_ln128_4_reg_1882 <= trunc_ln128_4_fu_1343_p1;
        trunc_ln128_9_reg_1887 <= {{add_ln128_4_fu_1338_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        shl_ln128_8_reg_1892 <= shl_ln128_8_fu_1360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        shl_ln79_2_reg_1916 <= shl_ln79_2_fu_1406_p2;
        shl_ln79_reg_1911 <= shl_ln79_fu_1389_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

assign ap_ST_fsm_state29_blk = 1'b1;

always @ (*) begin
    if ((mallocIn_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state54_io)) begin
        ap_ST_fsm_state54_blk = 1'b1;
    end else begin
        ap_ST_fsm_state54_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state55_io)) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state56_io)) begin
        ap_ST_fsm_state56_blk = 1'b1;
    end else begin
        ap_ST_fsm_state56_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state57_io)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state58_io)) begin
        ap_ST_fsm_state58_blk = 1'b1;
    end else begin
        ap_ST_fsm_state58_blk = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0))) begin
        ap_ST_fsm_state59_blk = 1'b1;
    end else begin
        ap_ST_fsm_state59_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0))) begin
        ap_ST_fsm_state60_blk = 1'b1;
    end else begin
        ap_ST_fsm_state60_blk = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0))) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state66_blk = 1'b1;
    end else begin
        ap_ST_fsm_state66_blk = 1'b0;
    end
end

assign ap_ST_fsm_state67_blk = 1'b1;

assign ap_ST_fsm_state68_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state69_on_subcall_done)) begin
        ap_ST_fsm_state69_blk = 1'b1;
    end else begin
        ap_ST_fsm_state69_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((taskOutGlobal_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state70_blk = 1'b1;
    end else begin
        ap_ST_fsm_state70_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state78) | (argOut_TREADY_int_regslice == 1'b0))) begin
        ap_ST_fsm_state78_blk = 1'b1;
    end else begin
        ap_ST_fsm_state78_blk = 1'b0;
    end
end

always @ (*) begin
    if ((argOut_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state79_blk = 1'b1;
    end else begin
        ap_ST_fsm_state79_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state80)) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_state80) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_1702 == 1'd1) & (cmp7_i_reg_1533 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        ap_phi_mux_is_ok_phi_fu_499_p4 = 1'd0;
    end else begin
        ap_phi_mux_is_ok_phi_fu_499_p4 = is_ok_reg_495;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state80) & (1'b1 == ap_CS_fsm_state80))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78))) begin
        argOut_TDATA_blk_n = argOut_TREADY_int_regslice;
    end else begin
        argOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state78) | (argOut_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
        argOut_TVALID_int_regslice = 1'b1;
    end else begin
        argOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln124_reg_1586 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        bs_address0 = grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_address0;
    end else begin
        bs_address0 = zext_ln96_1_reg_1556;
    end
end

always @ (*) begin
    if (((icmp_ln124_reg_1586 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        bs_ce0 = grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_bs_ce0;
    end else begin
        bs_ce0 = bs_ce0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bs_ce0_local = 1'b1;
    end else begin
        bs_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_733_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        bs_we0_local = 1'b1;
    end else begin
        bs_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        closureIn_TDATA_blk_n = closureIn_TVALID_int_regslice;
    end else begin
        closureIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (icmp_ln96_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        closureIn_TREADY_int_regslice = 1'b1;
    end else begin
        closureIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state42)) begin
            gmem_ARADDR = sext_ln22_fu_1039_p1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            gmem_ARADDR = sext_ln18_fu_946_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = sext_ln102_fu_790_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        gmem_AWADDR = sext_ln79_fu_1412_p1;
    end else if (((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58))) begin
        gmem_AWADDR = sext_ln129_fu_1376_p1;
    end else if (((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57))) begin
        gmem_AWADDR = sext_ln128_4_fu_1366_p1;
    end else if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56))) begin
        gmem_AWADDR = sext_ln128_3_fu_1328_p1;
    end else if (((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55))) begin
        gmem_AWADDR = sext_ln128_2_fu_1290_p1;
    end else if (((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54))) begin
        gmem_AWADDR = sext_ln128_1_fu_1248_p1;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
        gmem_AWADDR = sext_ln128_fu_1174_p1;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem_AWADDR = sext_ln109_fu_908_p1;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        gmem_AWADDR = sext_ln103_fu_868_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_AWADDR = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWADDR;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58))) begin
        gmem_AWLEN = 64'd3;
    end else if ((((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state71)))) begin
        gmem_AWLEN = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_AWLEN = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWLEN;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state71)))) begin
        gmem_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_AWVALID = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_AWVALID;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state61)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state60)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state59)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state66)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state63)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state62)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77)))) begin
        gmem_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_BREADY = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_BREADY;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        gmem_WDATA = zext_ln79_2_fu_1422_p1;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
        gmem_WDATA = task_ret_addr_reg_1453;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60))) begin
        gmem_WDATA = count_reg_1514;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        gmem_WDATA = task_cont_reg_1441;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56))) begin
        gmem_WDATA = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        gmem_WDATA = zext_ln128_8_fu_1277_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        gmem_WDATA = shl_ln128_2_reg_1797;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_WDATA = shl_ln109_2_reg_1691;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_WDATA = shl_ln103_2_reg_1675;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_WDATA = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WDATA;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        gmem_WSTRB = shl_ln79_reg_1911;
    end else if ((((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state60)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        gmem_WSTRB = 8'd255;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        gmem_WSTRB = shl_ln128_8_reg_1892;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        gmem_WSTRB = shl_ln128_7_reg_1871;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        gmem_WSTRB = shl_ln128_6_reg_1850;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        gmem_WSTRB = shl_ln128_3_reg_1824;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        gmem_WSTRB = shl_ln128_reg_1792;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        gmem_WSTRB = shl_ln109_reg_1686;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        gmem_WSTRB = shl_ln103_reg_1670;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_WSTRB = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WSTRB;
    end else begin
        gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58)) | ((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57)) | ((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56)) | ((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55)) | ((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state61)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state60)) | (~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state59)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72)))) begin
        gmem_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_WVALID = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_m_axi_gmem_WVALID;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state6))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state71))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state77))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state14))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state72))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln96_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        mallocIn_TDATA_blk_n = mallocIn_TVALID_int_regslice;
    end else begin
        mallocIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (icmp_ln96_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state2) & (mallocIn_TVALID_int_regslice == 1'b1)))) begin
        mallocIn_TREADY_int_regslice = 1'b1;
    end else begin
        mallocIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln124_reg_1586 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        spawn_address0 = grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_address0;
    end else begin
        spawn_address0 = zext_ln96_1_reg_1556;
    end
end

always @ (*) begin
    if (((icmp_ln124_reg_1586 == 1'd0) & (1'b1 == ap_CS_fsm_state69))) begin
        spawn_ce0 = grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_spawn_ce0;
    end else begin
        spawn_ce0 = spawn_ce0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        spawn_ce0_local = 1'b1;
    end else begin
        spawn_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        spawn_we0_local = 1'b1;
    end else begin
        spawn_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TDATA_blk_n = taskIn_TVALID_int_regslice;
    end else begin
        taskIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TREADY_int_regslice = 1'b1;
    end else begin
        taskIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | ((icmp_ln124_fu_695_p2 == 1'd1) & (icmp_ln96_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        taskOutGlobal_TDATA_blk_n = taskOutGlobal_TREADY_int_regslice;
    end else begin
        taskOutGlobal_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (ap_predicate_op149_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        taskOutGlobal_TVALID_int_regslice = 1'b1;
    end else begin
        taskOutGlobal_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln76_fu_601_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln76_fu_601_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (mallocIn_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (icmp_ln124_fu_695_p2 == 1'd1) & (icmp_ln96_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (icmp_ln124_fu_695_p2 == 1'd0) & (icmp_ln96_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (icmp_ln96_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln100_fu_733_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~(1'd1 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & ((icmp_ln19_fu_918_p2 == 1'd0) | (cmp7_i_reg_1533 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & ((icmp_ln19_2_fu_999_p2 == 1'd0) | (icmp_ln19_1_reg_1748 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((or_ln23_fu_1109_p2 == 1'd0) & (icmp_ln23_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state53 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b0 == ap_block_state54_io) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b0 == ap_block_state55_io) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b0 == ap_block_state56_io) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b0 == ap_block_state57_io) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b0 == ap_block_state58_io) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if ((~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if ((~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state60))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if ((~((gmem_BVALID == 1'b0) | (gmem_WREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if ((~(1'd1 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b0 == ap_block_state69_on_subcall_done) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (taskOutGlobal_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            if ((~((1'b1 == ap_block_state78) | (argOut_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == ap_CS_fsm_state79) & (argOut_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((1'b0 == ap_block_state80) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_738_p2 = (k_reg_449 + 8'd1);

assign add_ln102_1_fu_753_p2 = (add_ln102_fu_748_p2 + task_a_reg_1448);

assign add_ln102_fu_748_p2 = (zext_ln100_fu_744_p1 + mem_read_reg_1426);

assign add_ln103_1_fu_800_p2 = (zext_ln100_reg_1622 + add_ln103_reg_1568);

assign add_ln103_fu_690_p2 = (mallocIn_TDATA_int_regslice + mem_read_reg_1426);

assign add_ln109_1_fu_772_p2 = (add_ln109_reg_1543 + b_reg_1562);

assign add_ln109_fu_663_p2 = (conv39_fu_645_p1 + mem_read_reg_1426);

assign add_ln128_1_fu_1184_p2 = (add_ln128_reg_1590 + 64'd4);

assign add_ln128_2_fu_1258_p2 = (add_ln128_reg_1590 + 64'd5);

assign add_ln128_3_fu_1300_p2 = (add_ln128_reg_1590 + 64'd6);

assign add_ln128_4_fu_1338_p2 = (add_ln128_reg_1590 + 64'd7);

assign add_ln128_5_fu_1203_p2 = (mem_read_reg_1426 + 64'd8);

assign add_ln128_6_fu_1208_p2 = (add_ln128_5_fu_1203_p2 + cont_addr_reg_1580);

assign add_ln128_fu_701_p2 = (closureIn_TDATA_int_regslice + mem_read_reg_1426);

assign add_ln16_fu_1033_p2 = (indvars_iv_i_reg_472 + 9'd1);

assign add_ln18_fu_927_p2 = (zext_ln19_fu_923_p1 + add_ln103_reg_1568);

assign add_ln19_1_fu_1027_p2 = (j_1_reg_484 + 9'd1);

assign add_ln19_fu_980_p2 = (zext_ln19_1_fu_956_p1 + 9'd1);

assign add_ln22_fu_1008_p2 = (zext_ln19_3_fu_1004_p1 + add_ln103_reg_1568);

assign add_ln23_fu_1098_p2 = ($signed(sext_ln23_fu_1083_p1) + $signed(zext_ln19_2_reg_1742));

assign add_ln79_fu_607_p2 = (task_ret_addr_fu_561_p4 + mem);

assign add_ln96_fu_680_p2 = (i_1_fu_192 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (taskIn_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = (((ap_predicate_op149_write_state4 == 1'b1) & (taskOutGlobal_TREADY_int_regslice == 1'b0)) | ((icmp_ln96_fu_675_p2 == 1'd0) & (mallocIn_TVALID_int_regslice == 1'b0)) | ((icmp_ln96_fu_675_p2 == 1'd1) & (closureIn_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = ((ap_predicate_op149_write_state4 == 1'b1) & (taskOutGlobal_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state54_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state55_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state56_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state57_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state58_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state69_on_subcall_done = ((grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_done == 1'b0) & (icmp_ln124_reg_1586 == 1'd0));
end

always @ (*) begin
    ap_block_state78 = ((1'd1 == 1'd0) | (argOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state80 = ((regslice_both_taskOutGlobal_U_apdone_blk == 1'b1) | (regslice_both_argOut_U_apdone_blk == 1'b1) | (regslice_both_taskOut_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_predicate_op149_write_state4 = ((icmp_ln124_fu_695_p2 == 1'd1) & (icmp_ln96_fu_675_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign argOut_TVALID = regslice_both_argOut_U_vld_out;

assign arg_j_fu_648_p2 = (task_j_reg_1472 + 8'd1);

assign closureIn_TREADY = regslice_both_closureIn_U_ack_in;

assign cmp7_i_fu_653_p2 = ((arg_j_fu_648_p2 == 8'd0) ? 1'b1 : 1'b0);

assign conv39_fu_645_p1 = task_j_reg_1472;

assign empty_32_fu_986_p1 = add_ln19_fu_980_p2[7:0];

assign gmem_ARLEN = 64'd1;

assign grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start = grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_ap_start_reg;

assign grp_nqueens_Pipeline_VITIS_LOOP_133_4_fu_518_taskOut_TREADY = (taskOut_TREADY_int_regslice & ap_CS_fsm_state69);

assign grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start = grp_nqueens_Pipeline_VITIS_LOOP_88_1_fu_508_ap_start_reg;

assign i_4_fu_1125_p2 = (i14_08_fu_188 + 8'd1);

assign icmp_ln100_fu_733_p2 = ((k_reg_449 == task_j_reg_1472) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_695_p2 = ((spawn_count_fu_184 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_994_p2 = ((add_ln19_fu_980_p2 < zext_ln96_reg_1537) ? 1'b1 : 1'b0);

assign icmp_ln19_2_fu_999_p2 = ((j_1_reg_484 < zext_ln96_reg_1537) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_918_p2 = ((i_3_reg_460 < arg_j_reg_1527) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_1092_p2 = ((sub_ln23_1_fu_1087_p2 == zext_ln23_fu_1074_p1) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_1103_p2 = ((add_ln23_fu_1098_p2 == zext_ln23_fu_1074_p1) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_1069_p2 = ((q_fu_1065_p1 == p_reg_1732) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_601_p2 = ((task_n_fu_571_p4 == task_j_fu_591_p4) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_675_p2 = ((zext_ln96_2_fu_671_p1 == task_n_reg_1459) ? 1'b1 : 1'b0);

assign lshr_ln102_fu_829_p2 = gmem_addr_8_read_reg_1654 >> zext_ln102_fu_825_p1;

assign lshr_ln18_fu_971_p2 = gmem_addr_10_read_reg_1722 >> zext_ln18_fu_967_p1;

assign lshr_ln22_fu_1060_p2 = gmem_addr_11_read_reg_1781 >> zext_ln22_fu_1056_p1;

assign mallocIn_TREADY = regslice_both_mallocIn_U_ack_in;

assign or_ln23_fu_1109_p2 = (icmp_ln23_2_fu_1103_p2 | icmp_ln23_1_fu_1092_p2);

assign p_fu_976_p1 = lshr_ln18_fu_971_p2[7:0];

assign q_fu_1065_p1 = lshr_ln22_fu_1060_p2[7:0];

assign sext_ln102_fu_790_p1 = $signed(trunc_ln102_1_reg_1627);

assign sext_ln103_fu_868_p1 = $signed(trunc_ln103_1_reg_1665);

assign sext_ln109_fu_908_p1 = $signed(trunc_ln109_1_reg_1643);

assign sext_ln128_1_fu_1248_p1 = $signed(trunc_ln128_6_reg_1814);

assign sext_ln128_2_fu_1290_p1 = $signed(trunc_ln128_7_reg_1845);

assign sext_ln128_3_fu_1328_p1 = $signed(trunc_ln128_8_reg_1866);

assign sext_ln128_4_fu_1366_p1 = $signed(trunc_ln128_9_reg_1887);

assign sext_ln128_fu_1174_p1 = $signed(trunc_ln128_5_reg_1604);

assign sext_ln129_fu_1376_p1 = $signed(trunc_ln3_reg_1819);

assign sext_ln18_fu_946_p1 = $signed(trunc_ln18_1_reg_1706);

assign sext_ln22_fu_1039_p1 = $signed(trunc_ln22_1_reg_1755);

assign sext_ln23_fu_1083_p1 = $signed(sub_ln23_fu_1078_p2);

assign sext_ln79_fu_1412_p1 = $signed(trunc_ln79_1_reg_1488);

assign shl_ln103_1_fu_851_p3 = {{trunc_ln103_reg_1659}, {3'd0}};

assign shl_ln103_2_fu_862_p2 = zext_ln103_fu_838_p1 << zext_ln103_2_fu_858_p1;

assign shl_ln103_fu_845_p2 = 8'd1 << zext_ln103_1_fu_842_p1;

assign shl_ln109_1_fu_891_p3 = {{trunc_ln109_reg_1637}, {3'd0}};

assign shl_ln109_2_fu_902_p2 = zext_ln109_fu_878_p1 << zext_ln109_2_fu_898_p1;

assign shl_ln109_fu_885_p2 = 8'd1 << zext_ln109_1_fu_882_p1;

assign shl_ln128_1_fu_1157_p3 = {{trunc_ln128_reg_1598}, {3'd0}};

assign shl_ln128_2_fu_1168_p2 = zext_ln128_fu_1145_p1 << zext_ln128_2_fu_1164_p1;

assign shl_ln128_3_fu_1226_p2 = 8'd1 << zext_ln128_3_fu_1223_p1;

assign shl_ln128_4_fu_1232_p3 = {{trunc_ln128_1_reg_1808}, {3'd0}};

assign shl_ln128_5_fu_1243_p2 = zext_ln88_reg_1522 << zext_ln128_4_fu_1239_p1;

assign shl_ln128_6_fu_1284_p2 = 8'd1 << zext_ln128_5_fu_1281_p1;

assign shl_ln128_7_fu_1322_p2 = 8'd1 << zext_ln128_6_fu_1319_p1;

assign shl_ln128_8_fu_1360_p2 = 8'd1 << zext_ln128_7_fu_1357_p1;

assign shl_ln128_fu_1151_p2 = 8'd15 << zext_ln128_1_fu_1148_p1;

assign shl_ln1_fu_818_p3 = {{trunc_ln102_reg_1632}, {3'd0}};

assign shl_ln3_fu_960_p3 = {{trunc_ln18_reg_1711}, {3'd0}};

assign shl_ln4_fu_1049_p3 = {{trunc_ln22_reg_1760}, {3'd0}};

assign shl_ln79_1_fu_1395_p3 = {{trunc_ln79_reg_1482}, {3'd0}};

assign shl_ln79_2_fu_1406_p2 = 57'd1 << zext_ln79_1_fu_1402_p1;

assign shl_ln79_fu_1389_p2 = 8'd15 << zext_ln79_fu_1386_p1;

assign spawn_count_1_fu_1119_p2 = (zext_ln113_fu_1115_p1 + spawn_count_fu_184);

assign sub_ln23_1_fu_1087_p2 = ($signed(zext_ln19_2_reg_1742) - $signed(sext_ln23_fu_1083_p1));

assign sub_ln23_fu_1078_p2 = (j_1_reg_484 - zext_ln19_1_reg_1727);

assign taskIn_TREADY = regslice_both_taskIn_U_ack_in;

assign taskOutGlobal_TDATA_int_regslice = {{{{{{task_ret_addr_reg_1453}, {count_reg_1514}}, {task_cont_reg_1441}}, {27'd0}}, {task_n66_cast_reg_1466}}, {32'd0}};

assign taskOutGlobal_TVALID = regslice_both_taskOutGlobal_U_vld_out;

assign taskOut_TVALID = regslice_both_taskOut_U_vld_out;

assign task_cont_fu_547_p1 = taskIn_TDATA_int_regslice[63:0];

assign task_j_fu_591_p4 = {{taskIn_TDATA_int_regslice[207:200]}};

assign task_n_fu_571_p4 = {{taskIn_TDATA_int_regslice[199:192]}};

assign task_ret_addr_fu_561_p4 = {{taskIn_TDATA_int_regslice[191:128]}};

assign tmp_fu_834_p1 = lshr_ln102_fu_829_p2[7:0];

assign trunc_ln102_fu_768_p1 = add_ln102_1_fu_753_p2[2:0];

assign trunc_ln103_fu_804_p1 = add_ln103_1_fu_800_p2[2:0];

assign trunc_ln109_fu_776_p1 = add_ln109_1_fu_772_p2[2:0];

assign trunc_ln128_1_fu_1189_p1 = add_ln128_1_fu_1184_p2[2:0];

assign trunc_ln128_2_fu_1263_p1 = add_ln128_2_fu_1258_p2[2:0];

assign trunc_ln128_3_fu_1305_p1 = add_ln128_3_fu_1300_p2[2:0];

assign trunc_ln128_4_fu_1343_p1 = add_ln128_4_fu_1338_p2[2:0];

assign trunc_ln128_fu_706_p1 = add_ln128_fu_701_p2[2:0];

assign trunc_ln18_fu_942_p1 = add_ln18_fu_927_p2[2:0];

assign trunc_ln22_fu_1023_p1 = add_ln22_fu_1008_p2[2:0];

assign trunc_ln70_fu_543_p1 = taskIn_TDATA_int_regslice[196:0];

assign trunc_ln79_fu_613_p1 = add_ln79_fu_607_p2[2:0];

assign zext_ln100_fu_744_p1 = k_reg_449;

assign zext_ln102_fu_825_p1 = shl_ln1_fu_818_p3;

assign zext_ln103_1_fu_842_p1 = trunc_ln103_reg_1659;

assign zext_ln103_2_fu_858_p1 = shl_ln103_1_fu_851_p3;

assign zext_ln103_fu_838_p1 = tmp_fu_834_p1;

assign zext_ln109_1_fu_882_p1 = trunc_ln109_reg_1637;

assign zext_ln109_2_fu_898_p1 = shl_ln109_1_fu_891_p3;

assign zext_ln109_fu_878_p1 = i14_08_fu_188;

assign zext_ln113_fu_1115_p1 = ap_phi_mux_is_ok_phi_fu_499_p4;

assign zext_ln128_1_fu_1148_p1 = trunc_ln128_reg_1598;

assign zext_ln128_2_fu_1164_p1 = shl_ln128_1_fu_1157_p3;

assign zext_ln128_3_fu_1223_p1 = trunc_ln128_1_reg_1808;

assign zext_ln128_4_fu_1239_p1 = shl_ln128_4_fu_1232_p3;

assign zext_ln128_5_fu_1281_p1 = trunc_ln128_2_reg_1840;

assign zext_ln128_6_fu_1319_p1 = trunc_ln128_3_reg_1861;

assign zext_ln128_7_fu_1357_p1 = trunc_ln128_4_reg_1882;

assign zext_ln128_8_fu_1277_p1 = shl_ln128_5_reg_1829;

assign zext_ln128_fu_1145_p1 = spawn_count_load_1_reg_1575;

assign zext_ln18_fu_967_p1 = shl_ln3_fu_960_p3;

assign zext_ln19_1_fu_956_p1 = i_3_reg_460;

assign zext_ln19_2_fu_990_p1 = p_fu_976_p1;

assign zext_ln19_3_fu_1004_p1 = j_1_reg_484;

assign zext_ln19_fu_923_p1 = i_3_reg_460;

assign zext_ln22_fu_1056_p1 = shl_ln4_fu_1049_p3;

assign zext_ln23_fu_1074_p1 = q_fu_1065_p1;

assign zext_ln79_1_fu_1402_p1 = shl_ln79_1_fu_1395_p3;

assign zext_ln79_2_fu_1422_p1 = shl_ln79_2_reg_1916;

assign zext_ln79_fu_1386_p1 = trunc_ln79_reg_1482;

assign zext_ln88_fu_642_p1 = task_n_reg_1459;

assign zext_ln96_1_fu_686_p1 = i_1_fu_192;

assign zext_ln96_2_fu_671_p1 = i_1_fu_192;

assign zext_ln96_fu_659_p1 = arg_j_fu_648_p2;

always @ (posedge ap_clk) begin
    zext_ln88_reg_1522[60:8] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln96_reg_1537[8] <= 1'b0;
    zext_ln96_1_reg_1556[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln100_reg_1622[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln19_1_reg_1727[8] <= 1'b0;
    zext_ln19_2_reg_1742[9:8] <= 2'b00;
end

endmodule //nqueens

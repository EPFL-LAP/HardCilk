-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nqueens_nqueens_Pipeline_VITIS_LOOP_18_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv_i : IN STD_LOGIC_VECTOR (6 downto 0);
    zext_ln119 : IN STD_LOGIC_VECTOR (7 downto 0);
    i_8 : IN STD_LOGIC_VECTOR (5 downto 0);
    zext_ln18_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln17 : IN STD_LOGIC_VECTOR (7 downto 0);
    l_bs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    l_bs_ce0 : OUT STD_LOGIC;
    l_bs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of nqueens_nqueens_Pipeline_VITIS_LOOP_18_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal or_ln21_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal merge_reg_103 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln18_1_cast_fu_119_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln18_1_cast_reg_235 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_241 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln18_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln18_fu_168_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_reg_260 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln21_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_merge_phi_fu_108_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln20_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_50 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal indvars_iv_i_cast_fu_127_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal l_bs_ce0_local : STD_LOGIC;
    signal zext_ln119_cast_fu_123_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln20_fu_145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_fu_149_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal trunc_ln18_fu_160_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln21_fu_177_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln21_fu_182_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln21_1_fu_186_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_fu_173_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_fu_197_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln21_1_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_277 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component nqueens_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component nqueens_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_preg <= ap_phi_mux_merge_phi_fu_108_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_50 <= indvars_iv_i_cast_fu_127_p1;
                elsif ((ap_const_boolean_1 = ap_condition_277)) then 
                    j_fu_50 <= add_ln18_reg_260;
                end if;
            end if; 
        end if;
    end process;

    merge_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_247 = ap_const_lv1_1) and (icmp_ln21_fu_163_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                merge_reg_103 <= ap_const_lv2_2;
            elsif (((or_ln21_reg_265 = ap_const_lv1_1) and (icmp_ln21_reg_256 = ap_const_lv1_0) and (icmp_ln18_reg_247 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                merge_reg_103 <= ap_const_lv2_1;
            elsif (((icmp_ln18_fu_139_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                merge_reg_103 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln18_reg_260 <= add_ln18_fu_168_p2;
                icmp_ln21_reg_256 <= icmp_ln21_fu_163_p2;
                or_ln21_reg_265 <= or_ln21_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_247 <= icmp_ln18_fu_139_p2;
                j_1_reg_241 <= ap_sig_allocacmp_j_1;
                    zext_ln18_1_cast_reg_235(7 downto 0) <= zext_ln18_1_cast_fu_119_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln18_1_cast_reg_235(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln18_fu_168_p2 <= std_logic_vector(unsigned(j_1_reg_241) + unsigned(ap_const_lv9_1));
    add_ln20_fu_149_p2 <= std_logic_vector(unsigned(zext_ln17) + unsigned(trunc_ln20_fu_145_p1));
    add_ln21_fu_197_p2 <= std_logic_vector(signed(sext_ln21_fu_182_p1) + signed(zext_ln18_1_cast_reg_235));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_277_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln18_reg_247, icmp_ln21_reg_256, or_ln21_reg_265)
    begin
                ap_condition_277 <= ((or_ln21_reg_265 = ap_const_lv1_0) and (icmp_ln21_reg_256 = ap_const_lv1_0) and (icmp_ln18_reg_247 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, or_ln21_fu_208_p2, icmp_ln21_fu_163_p2, icmp_ln18_reg_247)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((icmp_ln18_reg_247 = ap_const_lv1_0) or ((icmp_ln21_fu_163_p2 = ap_const_lv1_1) or (or_ln21_fu_208_p2 = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_247, icmp_ln21_reg_256, or_ln21_reg_265, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln18_reg_247 = ap_const_lv1_0) or ((or_ln21_reg_265 = ap_const_lv1_1) or (icmp_ln21_reg_256 = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_merge_phi_fu_108_p6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_247, merge_reg_103, icmp_ln21_reg_256, or_ln21_reg_265, ap_block_pp0_stage0)
    begin
        if (((or_ln21_reg_265 = ap_const_lv1_1) and (icmp_ln21_reg_256 = ap_const_lv1_0) and (icmp_ln18_reg_247 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_merge_phi_fu_108_p6 <= ap_const_lv2_1;
        else 
            ap_phi_mux_merge_phi_fu_108_p6 <= merge_reg_103;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_phi_mux_merge_phi_fu_108_p6, ap_return_preg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return <= ap_phi_mux_merge_phi_fu_108_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, add_ln18_reg_260, ap_block_pp0_stage0, j_fu_50, indvars_iv_i_cast_fu_127_p1, ap_loop_init, ap_condition_277)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_j_1 <= indvars_iv_i_cast_fu_127_p1;
            elsif ((ap_const_boolean_1 = ap_condition_277)) then 
                ap_sig_allocacmp_j_1 <= add_ln18_reg_260;
            else 
                ap_sig_allocacmp_j_1 <= j_fu_50;
            end if;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_50;
        end if; 
    end process;

    icmp_ln18_fu_139_p2 <= "1" when (unsigned(ap_sig_allocacmp_j_1) < unsigned(zext_ln119_cast_fu_123_p1)) else "0";
    icmp_ln21_1_fu_191_p2 <= "1" when (sub_ln21_1_fu_186_p2 = zext_ln21_fu_173_p1) else "0";
    icmp_ln21_2_fu_202_p2 <= "1" when (add_ln21_fu_197_p2 = zext_ln21_fu_173_p1) else "0";
    icmp_ln21_fu_163_p2 <= "1" when (l_bs_q0 = p) else "0";
    indvars_iv_i_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_i),9));
    l_bs_address0 <= zext_ln20_fu_155_p1(8 - 1 downto 0);
    l_bs_ce0 <= l_bs_ce0_local;

    l_bs_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_bs_ce0_local <= ap_const_logic_1;
        else 
            l_bs_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_208_p2 <= (icmp_ln21_2_fu_202_p2 or icmp_ln21_1_fu_191_p2);
        sext_ln21_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_fu_177_p2),10));

    sub_ln21_1_fu_186_p2 <= std_logic_vector(unsigned(zext_ln18_1_cast_reg_235) - unsigned(sext_ln21_fu_182_p1));
    sub_ln21_fu_177_p2 <= std_logic_vector(unsigned(trunc_ln18_fu_160_p1) - unsigned(i_8));
    trunc_ln18_fu_160_p1 <= j_1_reg_241(6 - 1 downto 0);
    trunc_ln20_fu_145_p1 <= ap_sig_allocacmp_j_1(8 - 1 downto 0);
    zext_ln119_cast_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln119),9));
    zext_ln18_1_cast_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln18_1),10));
    zext_ln20_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_149_p2),64));
    zext_ln21_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_bs_q0),10));
end behav;

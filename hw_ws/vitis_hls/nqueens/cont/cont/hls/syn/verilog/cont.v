// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cont_cont,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=149,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1093,HLS_SYN_LUT=1414,HLS_VERSION=2024_1}" *)

module cont (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        taskIn_TDATA,
        taskIn_TVALID,
        taskIn_TREADY,
        argOut_TDATA,
        argOut_TVALID,
        argOut_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [255:0] taskIn_TDATA;
input   taskIn_TVALID;
output   taskIn_TREADY;
output  [63:0] argOut_TDATA;
output   argOut_TVALID;
input   argOut_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] mem;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state12;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state13;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state18;
reg    taskIn_TDATA_blk_n;
reg    argOut_TDATA_blk_n;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
reg   [7:0] task_n_reg_275;
reg   [63:0] task_cont_reg_281;
reg   [61:0] trunc_ln_reg_286;
reg   [63:0] gmem_addr_1_reg_292;
wire   [63:0] wide_trip_count_fu_232_p1;
wire   [0:0] icmp_ln49_fu_258_p2;
reg   [0:0] icmp_ln49_reg_308;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_done;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_idle;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_ready;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWVALID;
wire   [63:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWADDR;
wire   [0:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWID;
wire   [31:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWLEN;
wire   [2:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWSIZE;
wire   [1:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWBURST;
wire   [1:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWLOCK;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWCACHE;
wire   [2:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWPROT;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWQOS;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWREGION;
wire   [0:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWUSER;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WVALID;
wire   [31:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WDATA;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WSTRB;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WLAST;
wire   [0:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WID;
wire   [0:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WUSER;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARVALID;
wire   [63:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARADDR;
wire   [0:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARID;
wire   [31:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARLEN;
wire   [2:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARSIZE;
wire   [1:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARBURST;
wire   [1:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARLOCK;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARCACHE;
wire   [2:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARPROT;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARQOS;
wire   [3:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARREGION;
wire   [0:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARUSER;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_RREADY;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_BREADY;
wire   [39:0] grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_solNum_out;
wire    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_solNum_out_ap_vld;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
wire   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg    grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire  signed [63:0] sext_ln48_fu_222_p1;
wire  signed [63:0] sext_ln42_fu_236_p1;
wire   [31:0] trunc_ln48_fu_249_p1;
reg    ap_block_state1;
reg    ap_block_state19;
wire   [63:0] task_count_fu_170_p4;
wire   [63:0] add_ln42_fu_190_p2;
wire   [63:0] task_ret_addr_fu_180_p4;
wire   [63:0] add_ln48_fu_206_p2;
wire   [61:0] trunc_ln48_1_fu_212_p4;
wire   [39:0] zext_ln49_fu_254_p1;
wire    regslice_both_argOut_U_apdone_blk;
reg    ap_block_state20;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    regslice_both_taskIn_U_apdone_blk;
wire   [255:0] taskIn_TDATA_int_regslice;
wire    taskIn_TVALID_int_regslice;
reg    taskIn_TREADY_int_regslice;
wire    regslice_both_taskIn_U_ack_in;
reg    argOut_TVALID_int_regslice;
wire    argOut_TREADY_int_regslice;
wire    regslice_both_argOut_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start_reg = 1'b0;
end

cont_cont_Pipeline_VITIS_LOOP_42_1 grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start),
    .ap_done(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_done),
    .ap_idle(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_idle),
    .ap_ready(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_ready),
    .m_axi_gmem_AWVALID(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .task_n1(task_n_reg_275),
    .sext_ln42(trunc_ln_reg_286),
    .solNum_out(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_solNum_out),
    .solNum_out_ap_vld(grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_solNum_out_ap_vld)
);

cont_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem(mem)
);

cont_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_ARVALID),
    .I_CH0_ARREADY(gmem_ARREADY),
    .I_CH0_ARADDR(gmem_ARADDR),
    .I_CH0_ARLEN(gmem_ARLEN),
    .I_CH0_RVALID(gmem_RVALID),
    .I_CH0_RREADY(gmem_RREADY),
    .I_CH0_RDATA(gmem_RDATA),
    .I_CH0_RFIFONUM(gmem_RFIFONUM),
    .I_CH0_AWVALID(gmem_AWVALID),
    .I_CH0_AWREADY(gmem_AWREADY),
    .I_CH0_AWADDR(gmem_addr_1_reg_292),
    .I_CH0_AWLEN(gmem_AWLEN),
    .I_CH0_WVALID(gmem_WVALID),
    .I_CH0_WREADY(gmem_WREADY),
    .I_CH0_WDATA(trunc_ln48_fu_249_p1),
    .I_CH0_WSTRB(4'd15),
    .I_CH0_BVALID(gmem_BVALID),
    .I_CH0_BREADY(gmem_BREADY)
);

cont_regslice_both #(
    .DataWidth( 256 ))
regslice_both_taskIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskIn_TDATA),
    .vld_in(taskIn_TVALID),
    .ack_in(regslice_both_taskIn_U_ack_in),
    .data_out(taskIn_TDATA_int_regslice),
    .vld_out(taskIn_TVALID_int_regslice),
    .ack_out(taskIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_taskIn_U_apdone_blk)
);

cont_regslice_both #(
    .DataWidth( 64 ))
regslice_both_argOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(task_cont_reg_281),
    .vld_in(argOut_TVALID_int_regslice),
    .ack_in(argOut_TREADY_int_regslice),
    .data_out(argOut_TDATA),
    .vld_out(regslice_both_argOut_U_vld_out),
    .ack_out(argOut_TREADY),
    .apdone_blk(regslice_both_argOut_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start_reg <= 1'b1;
        end else if ((grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_ready == 1'b1)) begin
            grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        gmem_addr_1_reg_292 <= sext_ln48_fu_222_p1;
        task_cont_reg_281 <= {{taskIn_TDATA_int_regslice[127:64]}};
        task_n_reg_275 <= {{taskIn_TDATA_int_regslice[39:32]}};
        trunc_ln_reg_286 <= {{add_ln42_fu_190_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln49_reg_308 <= icmp_ln49_fu_258_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if (((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state19))) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state20))) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        argOut_TDATA_blk_n = argOut_TREADY_int_regslice;
    end else begin
        argOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state19)) & (1'b1 == ap_CS_fsm_state19))) begin
        argOut_TVALID_int_regslice = 1'b1;
    end else begin
        argOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = sext_ln42_fu_236_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        gmem_ARADDR = grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = wide_trip_count_fu_232_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        gmem_ARLEN = grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        gmem_ARVALID = grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        gmem_RREADY = grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TDATA_blk_n = taskIn_TVALID_int_regslice;
    end else begin
        taskIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TREADY_int_regslice = 1'b1;
    end else begin
        taskIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state19)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((argOut_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state20)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_190_p2 = (task_count_fu_170_p4 + mem);

assign add_ln48_fu_206_p2 = (task_ret_addr_fu_180_p4 + mem);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

always @ (*) begin
    ap_block_state1 = ((taskIn_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state19 = ((argOut_TREADY_int_regslice == 1'b0) | (icmp_ln49_reg_308 == 1'd0));
end

always @ (*) begin
    ap_block_state20 = ((argOut_TREADY_int_regslice == 1'b0) | (regslice_both_argOut_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign argOut_TVALID = regslice_both_argOut_U_vld_out;

assign gmem_AWLEN = 64'd1;

assign grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start = grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_ap_start_reg;

assign icmp_ln49_fu_258_p2 = ((grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_solNum_out == zext_ln49_fu_254_p1) ? 1'b1 : 1'b0);

assign sext_ln42_fu_236_p1 = $signed(trunc_ln_reg_286);

assign sext_ln48_fu_222_p1 = $signed(trunc_ln48_1_fu_212_p4);

assign taskIn_TREADY = regslice_both_taskIn_U_ack_in;

assign task_count_fu_170_p4 = {{taskIn_TDATA_int_regslice[191:128]}};

assign task_ret_addr_fu_180_p4 = {{taskIn_TDATA_int_regslice[255:192]}};

assign trunc_ln48_1_fu_212_p4 = {{add_ln48_fu_206_p2[63:2]}};

assign trunc_ln48_fu_249_p1 = grp_cont_Pipeline_VITIS_LOOP_42_1_fu_141_solNum_out[31:0];

assign wide_trip_count_fu_232_p1 = task_n_reg_275;

assign zext_ln49_fu_254_p1 = trunc_ln48_fu_249_p1;

endmodule //cont

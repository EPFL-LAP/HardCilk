-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sum is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    taskIn_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    taskIn_TVALID : IN STD_LOGIC;
    taskIn_TREADY : OUT STD_LOGIC;
    argOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    argOut_TVALID : OUT STD_LOGIC;
    argOut_TREADY : IN STD_LOGIC;
    argDataOut_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    argDataOut_TVALID : OUT STD_LOGIC;
    argDataOut_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sum_sum,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.658000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=254,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    constant C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    constant C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem : STD_LOGIC_VECTOR (63 downto 0);
    signal taskIn_TDATA_blk_n : STD_LOGIC;
    signal argOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal argDataOut_TDATA_blk_n : STD_LOGIC;
    signal a_addr_fu_116_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal tmp_s_fu_106_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_96_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_133_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal zext_ln21_fu_141_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal zext_ln21_1_cast_fu_145_p3 : STD_LOGIC_VECTOR (136 downto 0);
    signal regslice_both_argOut_U_apdone_blk : STD_LOGIC;
    signal regslice_both_argDataOut_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal regslice_both_taskIn_U_apdone_blk : STD_LOGIC;
    signal taskIn_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal taskIn_TVALID_int_regslice : STD_LOGIC;
    signal taskIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_taskIn_U_ack_in : STD_LOGIC;
    signal argOut_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal argOut_TVALID_int_regslice : STD_LOGIC;
    signal argOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_argOut_U_vld_out : STD_LOGIC;
    signal argDataOut_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal argDataOut_TVALID_int_regslice : STD_LOGIC;
    signal argDataOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_argDataOut_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sum_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mem : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sum_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component sum_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mem => mem);

    regslice_both_taskIn_U : component sum_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => taskIn_TDATA,
        vld_in => taskIn_TVALID,
        ack_in => regslice_both_taskIn_U_ack_in,
        data_out => taskIn_TDATA_int_regslice,
        vld_out => taskIn_TVALID_int_regslice,
        ack_out => taskIn_TREADY_int_regslice,
        apdone_blk => regslice_both_taskIn_U_apdone_blk);

    regslice_both_argOut_U : component sum_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => argOut_TDATA_int_regslice,
        vld_in => argOut_TVALID_int_regslice,
        ack_in => argOut_TREADY_int_regslice,
        data_out => argOut_TDATA,
        vld_out => regslice_both_argOut_U_vld_out,
        ack_out => argOut_TREADY,
        apdone_blk => regslice_both_argOut_U_apdone_blk);

    regslice_both_argDataOut_U : component sum_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => argDataOut_TDATA_int_regslice,
        vld_in => argDataOut_TVALID_int_regslice,
        ack_in => argDataOut_TREADY_int_regslice,
        data_out => argDataOut_TDATA,
        vld_out => regslice_both_argDataOut_U_vld_out,
        ack_out => argDataOut_TREADY,
        apdone_blk => regslice_both_argDataOut_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state1, ap_block_state1_io, ap_block_state2, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_addr_fu_116_p4 <= taskIn_TDATA_int_regslice(255 downto 192);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1, ap_block_state1_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, taskIn_TVALID_int_regslice, argOut_TREADY_int_regslice, argDataOut_TREADY_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (argDataOut_TREADY_int_regslice = ap_const_logic_0) or (argOut_TREADY_int_regslice = ap_const_logic_0) or (taskIn_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(argOut_TREADY_int_regslice, argDataOut_TREADY_int_regslice)
    begin
                ap_block_state1_io <= ((argDataOut_TREADY_int_regslice = ap_const_logic_0) or (argOut_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(regslice_both_argOut_U_apdone_blk, regslice_both_argDataOut_U_apdone_blk, argOut_TREADY_int_regslice, argDataOut_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((argDataOut_TREADY_int_regslice = ap_const_logic_0) or (argOut_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_argDataOut_U_apdone_blk = ap_const_logic_1) or (regslice_both_argOut_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state2_io_assign_proc : process(argOut_TREADY_int_regslice, argDataOut_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((argDataOut_TREADY_int_regslice = ap_const_logic_0) or (argOut_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    argDataOut_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, argDataOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            argDataOut_TDATA_blk_n <= argDataOut_TREADY_int_regslice;
        else 
            argDataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    argDataOut_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_1_cast_fu_145_p3),256));
    argDataOut_TVALID <= regslice_both_argDataOut_U_vld_out;

    argDataOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, ap_block_state1_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            argDataOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            argDataOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    argOut_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, argOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            argOut_TDATA_blk_n <= argOut_TREADY_int_regslice;
        else 
            argOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    argOut_TDATA_int_regslice <= taskIn_TDATA_int_regslice(255 downto 192);
    argOut_TVALID <= regslice_both_argOut_U_vld_out;

    argOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, ap_block_state1_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            argOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            argOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    sum_1_fu_127_p2 <= std_logic_vector(unsigned(tmp_s_fu_106_p4) + unsigned(tmp1_fu_96_p4));

    taskIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, taskIn_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskIn_TDATA_blk_n <= taskIn_TVALID_int_regslice;
        else 
            taskIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    taskIn_TREADY <= regslice_both_taskIn_U_ack_in;

    taskIn_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, ap_block_state1_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            taskIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            taskIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_96_p4 <= taskIn_TDATA_int_regslice(63 downto 32);
    tmp_2_fu_133_p3 <= (sum_1_fu_127_p2 & a_addr_fu_116_p4);
    tmp_s_fu_106_p4 <= taskIn_TDATA_int_regslice(95 downto 64);
    zext_ln21_1_cast_fu_145_p3 <= (ap_const_lv8_81 & zext_ln21_fu_141_p1);
    zext_ln21_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_133_p3),129));
end behav;

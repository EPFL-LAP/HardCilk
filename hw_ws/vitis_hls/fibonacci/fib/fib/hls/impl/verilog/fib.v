// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fib_fib,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.911625,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=298,HLS_SYN_LUT=635,HLS_VERSION=2024_1}" *)

module fib (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        taskIn_TDATA,
        taskIn_TVALID,
        taskIn_TREADY,
        taskOut_TDATA,
        taskOut_TVALID,
        taskOut_TREADY,
        argOut_TDATA,
        argOut_TVALID,
        argOut_TREADY,
        argDataOut_TDATA,
        argDataOut_TVALID,
        argDataOut_TREADY,
        closureIn_TDATA,
        closureIn_TVALID,
        closureIn_TREADY,
        spawnNext_TDATA,
        spawnNext_TVALID,
        spawnNext_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [127:0] taskIn_TDATA;
input   taskIn_TVALID;
output   taskIn_TREADY;
output  [127:0] taskOut_TDATA;
output   taskOut_TVALID;
input   taskOut_TREADY;
output  [63:0] argOut_TDATA;
output   argOut_TVALID;
input   argOut_TREADY;
output  [255:0] argDataOut_TDATA;
output   argDataOut_TVALID;
input   argDataOut_TREADY;
input  [63:0] closureIn_TDATA;
input   closureIn_TVALID;
output   closureIn_TREADY;
output  [511:0] spawnNext_TDATA;
output   spawnNext_TVALID;
input   spawnNext_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] mem;
reg    taskIn_TDATA_blk_n;
reg    taskOut_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln20_reg_253;
reg    argOut_TDATA_blk_n;
wire   [0:0] icmp_ln20_fu_163_p2;
wire    ap_CS_fsm_state5;
reg    argDataOut_TDATA_blk_n;
reg    closureIn_TDATA_blk_n;
reg    spawnNext_TDATA_blk_n;
wire   [63:0] args_cont_fu_138_p1;
reg   [63:0] args_cont_reg_241;
reg   [63:0] args_n_reg_247;
reg   [63:0] sum_addr_reg_262;
wire   [127:0] p_s_fu_197_p3;
wire   [127:0] p_1_fu_232_p3;
reg    ap_block_state1;
reg    ap_block_state1_io;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg    ap_block_state3;
reg    ap_block_state3_io;
wire   [62:0] tmp_fu_153_p4;
wire   [128:0] zext_ln27_fu_169_p1;
wire   [136:0] zext_ln27_1_cast_fu_173_p3;
wire   [63:0] fib_args1_n_fu_192_p2;
wire   [63:0] x_addr_fu_186_p2;
wire   [329:0] zext_ln50_cast_fu_206_p5;
wire   [63:0] fib_args2_n_fu_227_p2;
wire   [63:0] y_addr_fu_222_p2;
wire    regslice_both_taskOut_U_apdone_blk;
wire    regslice_both_argOut_U_apdone_blk;
wire    regslice_both_argDataOut_U_apdone_blk;
wire    regslice_both_spawnNext_U_apdone_blk;
reg    ap_block_state4;
reg    ap_block_state4_io;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_block_state5;
reg    ap_block_state5_io;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_taskIn_U_apdone_blk;
wire   [127:0] taskIn_TDATA_int_regslice;
wire    taskIn_TVALID_int_regslice;
reg    taskIn_TREADY_int_regslice;
wire    regslice_both_taskIn_U_ack_in;
reg   [127:0] taskOut_TDATA_int_regslice;
reg    taskOut_TVALID_int_regslice;
wire    taskOut_TREADY_int_regslice;
wire    regslice_both_taskOut_U_vld_out;
wire   [63:0] argOut_TDATA_int_regslice;
reg    argOut_TVALID_int_regslice;
wire    argOut_TREADY_int_regslice;
wire    regslice_both_argOut_U_vld_out;
wire   [255:0] argDataOut_TDATA_int_regslice;
reg    argDataOut_TVALID_int_regslice;
wire    argDataOut_TREADY_int_regslice;
wire    regslice_both_argDataOut_U_vld_out;
wire    regslice_both_closureIn_U_apdone_blk;
wire   [63:0] closureIn_TDATA_int_regslice;
wire    closureIn_TVALID_int_regslice;
reg    closureIn_TREADY_int_regslice;
wire    regslice_both_closureIn_U_ack_in;
wire   [511:0] spawnNext_TDATA_int_regslice;
reg    spawnNext_TVALID_int_regslice;
wire    spawnNext_TREADY_int_regslice;
wire    regslice_both_spawnNext_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

fib_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mem(mem)
);

fib_regslice_both #(
    .DataWidth( 128 ))
regslice_both_taskIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskIn_TDATA),
    .vld_in(taskIn_TVALID),
    .ack_in(regslice_both_taskIn_U_ack_in),
    .data_out(taskIn_TDATA_int_regslice),
    .vld_out(taskIn_TVALID_int_regslice),
    .ack_out(taskIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_taskIn_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 128 ))
regslice_both_taskOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(taskOut_TDATA_int_regslice),
    .vld_in(taskOut_TVALID_int_regslice),
    .ack_in(taskOut_TREADY_int_regslice),
    .data_out(taskOut_TDATA),
    .vld_out(regslice_both_taskOut_U_vld_out),
    .ack_out(taskOut_TREADY),
    .apdone_blk(regslice_both_taskOut_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 64 ))
regslice_both_argOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(argOut_TDATA_int_regslice),
    .vld_in(argOut_TVALID_int_regslice),
    .ack_in(argOut_TREADY_int_regslice),
    .data_out(argOut_TDATA),
    .vld_out(regslice_both_argOut_U_vld_out),
    .ack_out(argOut_TREADY),
    .apdone_blk(regslice_both_argOut_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 256 ))
regslice_both_argDataOut_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(argDataOut_TDATA_int_regslice),
    .vld_in(argDataOut_TVALID_int_regslice),
    .ack_in(argDataOut_TREADY_int_regslice),
    .data_out(argDataOut_TDATA),
    .vld_out(regslice_both_argDataOut_U_vld_out),
    .ack_out(argDataOut_TREADY),
    .apdone_blk(regslice_both_argDataOut_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 64 ))
regslice_both_closureIn_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(closureIn_TDATA),
    .vld_in(closureIn_TVALID),
    .ack_in(regslice_both_closureIn_U_ack_in),
    .data_out(closureIn_TDATA_int_regslice),
    .vld_out(closureIn_TVALID_int_regslice),
    .ack_out(closureIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_closureIn_U_apdone_blk)
);

fib_regslice_both #(
    .DataWidth( 512 ))
regslice_both_spawnNext_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(spawnNext_TDATA_int_regslice),
    .vld_in(spawnNext_TVALID_int_regslice),
    .ack_in(spawnNext_TREADY_int_regslice),
    .data_out(spawnNext_TDATA),
    .vld_out(regslice_both_spawnNext_U_vld_out),
    .ack_out(spawnNext_TREADY),
    .apdone_blk(regslice_both_spawnNext_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        args_cont_reg_241 <= args_cont_fu_138_p1;
        args_n_reg_247 <= {{taskIn_TDATA_int_regslice[127:64]}};
        icmp_ln20_reg_253 <= icmp_ln20_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_addr_reg_262 <= closureIn_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state5_io) | (1'b1 == ap_block_state5))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln20_fu_163_p2 == 1'd1)))) begin
        argDataOut_TDATA_blk_n = argDataOut_TREADY_int_regslice;
    end else begin
        argDataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln20_fu_163_p2 == 1'd1))) begin
        argDataOut_TVALID_int_regslice = 1'b1;
    end else begin
        argDataOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (icmp_ln20_fu_163_p2 == 1'd1)))) begin
        argOut_TDATA_blk_n = argOut_TREADY_int_regslice;
    end else begin
        argOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln20_fu_163_p2 == 1'd1))) begin
        argOut_TVALID_int_regslice = 1'b1;
    end else begin
        argOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        closureIn_TDATA_blk_n = closureIn_TVALID_int_regslice;
    end else begin
        closureIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2))) begin
        closureIn_TREADY_int_regslice = 1'b1;
    end else begin
        closureIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        spawnNext_TDATA_blk_n = spawnNext_TREADY_int_regslice;
    end else begin
        spawnNext_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2))) begin
        spawnNext_TVALID_int_regslice = 1'b1;
    end else begin
        spawnNext_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        taskIn_TDATA_blk_n = taskIn_TVALID_int_regslice;
    end else begin
        taskIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskIn_TREADY_int_regslice = 1'b1;
    end else begin
        taskIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_reg_253 == 1'd0)))) begin
        taskOut_TDATA_blk_n = taskOut_TREADY_int_regslice;
    end else begin
        taskOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        taskOut_TDATA_int_regslice = p_1_fu_232_p3;
    end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        taskOut_TDATA_int_regslice = p_s_fu_197_p3;
    end else begin
        taskOut_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3)) | (~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2)))) begin
        taskOut_TVALID_int_regslice = 1'b1;
    end else begin
        taskOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln20_fu_163_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln20_fu_163_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b1 == ap_block_state5_io) | (1'b1 == ap_block_state5)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((taskIn_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0) | ((argDataOut_TREADY_int_regslice == 1'b0) & (icmp_ln20_fu_163_p2 == 1'd1)) | ((argOut_TREADY_int_regslice == 1'b0) & (icmp_ln20_fu_163_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state1_io = (((argDataOut_TREADY_int_regslice == 1'b0) & (icmp_ln20_fu_163_p2 == 1'd1)) | ((argOut_TREADY_int_regslice == 1'b0) & (icmp_ln20_fu_163_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state2 = ((spawnNext_TREADY_int_regslice == 1'b0) | (closureIn_TVALID_int_regslice == 1'b0) | (taskOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((spawnNext_TREADY_int_regslice == 1'b0) | (taskOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((spawnNext_TREADY_int_regslice == 1'b0) | (taskOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((spawnNext_TREADY_int_regslice == 1'b0) | (taskOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_spawnNext_U_apdone_blk == 1'b1) | (regslice_both_argDataOut_U_apdone_blk == 1'b1) | (regslice_both_argOut_U_apdone_blk == 1'b1) | (regslice_both_taskOut_U_apdone_blk == 1'b1) | ((taskOut_TREADY_int_regslice == 1'b0) & (icmp_ln20_reg_253 == 1'd0)));
end

always @ (*) begin
    ap_block_state4_io = ((taskOut_TREADY_int_regslice == 1'b0) & (icmp_ln20_reg_253 == 1'd0));
end

always @ (*) begin
    ap_block_state5 = ((argDataOut_TREADY_int_regslice == 1'b0) | (argOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((argDataOut_TREADY_int_regslice == 1'b0) | (argOut_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign argDataOut_TDATA_int_regslice = zext_ln27_1_cast_fu_173_p3;

assign argDataOut_TVALID = regslice_both_argDataOut_U_vld_out;

assign argOut_TDATA_int_regslice = taskIn_TDATA_int_regslice[63:0];

assign argOut_TVALID = regslice_both_argOut_U_vld_out;

assign args_cont_fu_138_p1 = taskIn_TDATA_int_regslice[63:0];

assign closureIn_TREADY = regslice_both_closureIn_U_ack_in;

assign fib_args1_n_fu_192_p2 = ($signed(args_n_reg_247) + $signed(64'd18446744073709551615));

assign fib_args2_n_fu_227_p2 = ($signed(args_n_reg_247) + $signed(64'd18446744073709551614));

assign icmp_ln20_fu_163_p2 = ((tmp_fu_153_p4 == 63'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 8'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 8'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign p_1_fu_232_p3 = {{fib_args2_n_fu_227_p2}, {y_addr_fu_222_p2}};

assign p_s_fu_197_p3 = {{fib_args1_n_fu_192_p2}, {x_addr_fu_186_p2}};

assign spawnNext_TDATA_int_regslice = zext_ln50_cast_fu_206_p5;

assign spawnNext_TVALID = regslice_both_spawnNext_U_vld_out;

assign taskIn_TREADY = regslice_both_taskIn_U_ack_in;

assign taskOut_TVALID = regslice_both_taskOut_U_vld_out;

assign tmp_fu_153_p4 = {{taskIn_TDATA_int_regslice[127:65]}};

assign x_addr_fu_186_p2 = (closureIn_TDATA_int_regslice + 64'd4);

assign y_addr_fu_222_p2 = (sum_addr_reg_262 + 64'd8);

assign zext_ln27_1_cast_fu_173_p3 = {{8'd129}, {zext_ln27_fu_169_p1}};

assign zext_ln27_fu_169_p1 = taskIn_TDATA_int_regslice;

assign zext_ln50_cast_fu_206_p5 = {{{{{{10'd517}, {args_cont_reg_241}}}, {192'd2}}}, {closureIn_TDATA_int_regslice}};

endmodule //fib

// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module qsort_qsort_Pipeline_VITIS_LOOP_86_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        spawn_next_to_spawn_dout,
        spawn_next_to_spawn_empty_n,
        spawn_next_to_spawn_read,
        taskOut_TDATA,
        taskOut_TVALID,
        taskOut_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] spawn_next_to_spawn_dout;
input   spawn_next_to_spawn_empty_n;
output   spawn_next_to_spawn_read;
output  [255:0] taskOut_TDATA;
output   taskOut_TVALID;
input   taskOut_TREADY;

reg ap_idle;
reg taskOut_TVALID;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_nbreadreq_fu_46_p3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    spawn_next_to_spawn_blk_n;
reg    taskOut_TDATA_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg    spawn_next_to_spawn_read_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

qsort_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((taskOut_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_46_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        spawn_next_to_spawn_blk_n = spawn_next_to_spawn_empty_n;
    end else begin
        spawn_next_to_spawn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((taskOut_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
        spawn_next_to_spawn_read_local = 1'b1;
    end else begin
        spawn_next_to_spawn_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        taskOut_TDATA_blk_n = taskOut_TREADY;
    end else begin
        taskOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((taskOut_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
        taskOut_TVALID = 1'b1;
    end else begin
        taskOut_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((taskOut_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (taskOut_TREADY == 1'b0) | (spawn_next_to_spawn_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign spawn_next_to_spawn_read = spawn_next_to_spawn_read_local;

assign taskOut_TDATA = spawn_next_to_spawn_dout;

assign tmp_1_nbreadreq_fu_46_p3 = spawn_next_to_spawn_empty_n;

endmodule //qsort_qsort_Pipeline_VITIS_LOOP_86_1

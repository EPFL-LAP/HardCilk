circuit paper_exp1 :
  module stealNetworkDataUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<32>, taskOut : UInt<32>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, occupied : UInt<1>}

    reg taskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkCtrlUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_24 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_25 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_26 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_27 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_28 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetwork :
    input clock : Clock
    input reset : Reset
    output io : { connSS : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}[29], ntwDataUnitOccupancyVSS : UInt<1>[5]}

    inst dataUnits_0 of stealNetworkDataUnit @[stealNetwork.scala 23:42]
    dataUnits_0.clock <= clock
    dataUnits_0.reset <= reset
    inst dataUnits_1 of stealNetworkDataUnit_1 @[stealNetwork.scala 23:42]
    dataUnits_1.clock <= clock
    dataUnits_1.reset <= reset
    inst dataUnits_2 of stealNetworkDataUnit_2 @[stealNetwork.scala 23:42]
    dataUnits_2.clock <= clock
    dataUnits_2.reset <= reset
    inst dataUnits_3 of stealNetworkDataUnit_3 @[stealNetwork.scala 23:42]
    dataUnits_3.clock <= clock
    dataUnits_3.reset <= reset
    inst dataUnits_4 of stealNetworkDataUnit_4 @[stealNetwork.scala 23:42]
    dataUnits_4.clock <= clock
    dataUnits_4.reset <= reset
    inst dataUnits_5 of stealNetworkDataUnit_5 @[stealNetwork.scala 23:42]
    dataUnits_5.clock <= clock
    dataUnits_5.reset <= reset
    inst dataUnits_6 of stealNetworkDataUnit_6 @[stealNetwork.scala 23:42]
    dataUnits_6.clock <= clock
    dataUnits_6.reset <= reset
    inst dataUnits_7 of stealNetworkDataUnit_7 @[stealNetwork.scala 23:42]
    dataUnits_7.clock <= clock
    dataUnits_7.reset <= reset
    inst dataUnits_8 of stealNetworkDataUnit_8 @[stealNetwork.scala 23:42]
    dataUnits_8.clock <= clock
    dataUnits_8.reset <= reset
    inst dataUnits_9 of stealNetworkDataUnit_9 @[stealNetwork.scala 23:42]
    dataUnits_9.clock <= clock
    dataUnits_9.reset <= reset
    inst dataUnits_10 of stealNetworkDataUnit_10 @[stealNetwork.scala 23:42]
    dataUnits_10.clock <= clock
    dataUnits_10.reset <= reset
    inst dataUnits_11 of stealNetworkDataUnit_11 @[stealNetwork.scala 23:42]
    dataUnits_11.clock <= clock
    dataUnits_11.reset <= reset
    inst dataUnits_12 of stealNetworkDataUnit_12 @[stealNetwork.scala 23:42]
    dataUnits_12.clock <= clock
    dataUnits_12.reset <= reset
    inst dataUnits_13 of stealNetworkDataUnit_13 @[stealNetwork.scala 23:42]
    dataUnits_13.clock <= clock
    dataUnits_13.reset <= reset
    inst dataUnits_14 of stealNetworkDataUnit_14 @[stealNetwork.scala 23:42]
    dataUnits_14.clock <= clock
    dataUnits_14.reset <= reset
    inst dataUnits_15 of stealNetworkDataUnit_15 @[stealNetwork.scala 23:42]
    dataUnits_15.clock <= clock
    dataUnits_15.reset <= reset
    inst dataUnits_16 of stealNetworkDataUnit_16 @[stealNetwork.scala 23:42]
    dataUnits_16.clock <= clock
    dataUnits_16.reset <= reset
    inst dataUnits_17 of stealNetworkDataUnit_17 @[stealNetwork.scala 23:42]
    dataUnits_17.clock <= clock
    dataUnits_17.reset <= reset
    inst dataUnits_18 of stealNetworkDataUnit_18 @[stealNetwork.scala 23:42]
    dataUnits_18.clock <= clock
    dataUnits_18.reset <= reset
    inst dataUnits_19 of stealNetworkDataUnit_19 @[stealNetwork.scala 23:42]
    dataUnits_19.clock <= clock
    dataUnits_19.reset <= reset
    inst dataUnits_20 of stealNetworkDataUnit_20 @[stealNetwork.scala 23:42]
    dataUnits_20.clock <= clock
    dataUnits_20.reset <= reset
    inst dataUnits_21 of stealNetworkDataUnit_21 @[stealNetwork.scala 23:42]
    dataUnits_21.clock <= clock
    dataUnits_21.reset <= reset
    inst dataUnits_22 of stealNetworkDataUnit_22 @[stealNetwork.scala 23:42]
    dataUnits_22.clock <= clock
    dataUnits_22.reset <= reset
    inst dataUnits_23 of stealNetworkDataUnit_23 @[stealNetwork.scala 23:42]
    dataUnits_23.clock <= clock
    dataUnits_23.reset <= reset
    inst dataUnits_24 of stealNetworkDataUnit_24 @[stealNetwork.scala 23:42]
    dataUnits_24.clock <= clock
    dataUnits_24.reset <= reset
    inst dataUnits_25 of stealNetworkDataUnit_25 @[stealNetwork.scala 23:42]
    dataUnits_25.clock <= clock
    dataUnits_25.reset <= reset
    inst dataUnits_26 of stealNetworkDataUnit_26 @[stealNetwork.scala 23:42]
    dataUnits_26.clock <= clock
    dataUnits_26.reset <= reset
    inst dataUnits_27 of stealNetworkDataUnit_27 @[stealNetwork.scala 23:42]
    dataUnits_27.clock <= clock
    dataUnits_27.reset <= reset
    inst dataUnits_28 of stealNetworkDataUnit_28 @[stealNetwork.scala 23:42]
    dataUnits_28.clock <= clock
    dataUnits_28.reset <= reset
    inst ctrlunits_0 of stealNetworkCtrlUnit @[stealNetwork.scala 25:42]
    ctrlunits_0.clock <= clock
    ctrlunits_0.reset <= reset
    inst ctrlunits_1 of stealNetworkCtrlUnit_1 @[stealNetwork.scala 25:42]
    ctrlunits_1.clock <= clock
    ctrlunits_1.reset <= reset
    inst ctrlunits_2 of stealNetworkCtrlUnit_2 @[stealNetwork.scala 25:42]
    ctrlunits_2.clock <= clock
    ctrlunits_2.reset <= reset
    inst ctrlunits_3 of stealNetworkCtrlUnit_3 @[stealNetwork.scala 25:42]
    ctrlunits_3.clock <= clock
    ctrlunits_3.reset <= reset
    inst ctrlunits_4 of stealNetworkCtrlUnit_4 @[stealNetwork.scala 25:42]
    ctrlunits_4.clock <= clock
    ctrlunits_4.reset <= reset
    inst ctrlunits_5 of stealNetworkCtrlUnit_5 @[stealNetwork.scala 25:42]
    ctrlunits_5.clock <= clock
    ctrlunits_5.reset <= reset
    inst ctrlunits_6 of stealNetworkCtrlUnit_6 @[stealNetwork.scala 25:42]
    ctrlunits_6.clock <= clock
    ctrlunits_6.reset <= reset
    inst ctrlunits_7 of stealNetworkCtrlUnit_7 @[stealNetwork.scala 25:42]
    ctrlunits_7.clock <= clock
    ctrlunits_7.reset <= reset
    inst ctrlunits_8 of stealNetworkCtrlUnit_8 @[stealNetwork.scala 25:42]
    ctrlunits_8.clock <= clock
    ctrlunits_8.reset <= reset
    inst ctrlunits_9 of stealNetworkCtrlUnit_9 @[stealNetwork.scala 25:42]
    ctrlunits_9.clock <= clock
    ctrlunits_9.reset <= reset
    inst ctrlunits_10 of stealNetworkCtrlUnit_10 @[stealNetwork.scala 25:42]
    ctrlunits_10.clock <= clock
    ctrlunits_10.reset <= reset
    inst ctrlunits_11 of stealNetworkCtrlUnit_11 @[stealNetwork.scala 25:42]
    ctrlunits_11.clock <= clock
    ctrlunits_11.reset <= reset
    inst ctrlunits_12 of stealNetworkCtrlUnit_12 @[stealNetwork.scala 25:42]
    ctrlunits_12.clock <= clock
    ctrlunits_12.reset <= reset
    inst ctrlunits_13 of stealNetworkCtrlUnit_13 @[stealNetwork.scala 25:42]
    ctrlunits_13.clock <= clock
    ctrlunits_13.reset <= reset
    inst ctrlunits_14 of stealNetworkCtrlUnit_14 @[stealNetwork.scala 25:42]
    ctrlunits_14.clock <= clock
    ctrlunits_14.reset <= reset
    inst ctrlunits_15 of stealNetworkCtrlUnit_15 @[stealNetwork.scala 25:42]
    ctrlunits_15.clock <= clock
    ctrlunits_15.reset <= reset
    inst ctrlunits_16 of stealNetworkCtrlUnit_16 @[stealNetwork.scala 25:42]
    ctrlunits_16.clock <= clock
    ctrlunits_16.reset <= reset
    inst ctrlunits_17 of stealNetworkCtrlUnit_17 @[stealNetwork.scala 25:42]
    ctrlunits_17.clock <= clock
    ctrlunits_17.reset <= reset
    inst ctrlunits_18 of stealNetworkCtrlUnit_18 @[stealNetwork.scala 25:42]
    ctrlunits_18.clock <= clock
    ctrlunits_18.reset <= reset
    inst ctrlunits_19 of stealNetworkCtrlUnit_19 @[stealNetwork.scala 25:42]
    ctrlunits_19.clock <= clock
    ctrlunits_19.reset <= reset
    inst ctrlunits_20 of stealNetworkCtrlUnit_20 @[stealNetwork.scala 25:42]
    ctrlunits_20.clock <= clock
    ctrlunits_20.reset <= reset
    inst ctrlunits_21 of stealNetworkCtrlUnit_21 @[stealNetwork.scala 25:42]
    ctrlunits_21.clock <= clock
    ctrlunits_21.reset <= reset
    inst ctrlunits_22 of stealNetworkCtrlUnit_22 @[stealNetwork.scala 25:42]
    ctrlunits_22.clock <= clock
    ctrlunits_22.reset <= reset
    inst ctrlunits_23 of stealNetworkCtrlUnit_23 @[stealNetwork.scala 25:42]
    ctrlunits_23.clock <= clock
    ctrlunits_23.reset <= reset
    inst ctrlunits_24 of stealNetworkCtrlUnit_24 @[stealNetwork.scala 25:42]
    ctrlunits_24.clock <= clock
    ctrlunits_24.reset <= reset
    inst ctrlunits_25 of stealNetworkCtrlUnit_25 @[stealNetwork.scala 25:42]
    ctrlunits_25.clock <= clock
    ctrlunits_25.reset <= reset
    inst ctrlunits_26 of stealNetworkCtrlUnit_26 @[stealNetwork.scala 25:42]
    ctrlunits_26.clock <= clock
    ctrlunits_26.reset <= reset
    inst ctrlunits_27 of stealNetworkCtrlUnit_27 @[stealNetwork.scala 25:42]
    ctrlunits_27.clock <= clock
    ctrlunits_27.reset <= reset
    inst ctrlunits_28 of stealNetworkCtrlUnit_28 @[stealNetwork.scala 25:42]
    ctrlunits_28.clock <= clock
    ctrlunits_28.reset <= reset
    dataUnits_1.io.taskIn <= dataUnits_0.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_1.io.validIn <= dataUnits_0.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_1.io.connSS.qOutTask <= io.connSS[1].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[1].data.availableTask.bits <= dataUnits_1.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[1].data.availableTask.valid <= dataUnits_1.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_1.io.connSS.availableTask.ready <= io.connSS[1].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_2.io.taskIn <= dataUnits_1.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_2.io.validIn <= dataUnits_1.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_2.io.connSS.qOutTask <= io.connSS[2].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[2].data.availableTask.bits <= dataUnits_2.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[2].data.availableTask.valid <= dataUnits_2.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_2.io.connSS.availableTask.ready <= io.connSS[2].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_3.io.taskIn <= dataUnits_2.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_3.io.validIn <= dataUnits_2.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_3.io.connSS.qOutTask <= io.connSS[3].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[3].data.availableTask.bits <= dataUnits_3.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[3].data.availableTask.valid <= dataUnits_3.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_3.io.connSS.availableTask.ready <= io.connSS[3].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_4.io.taskIn <= dataUnits_3.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_4.io.validIn <= dataUnits_3.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_4.io.connSS.qOutTask <= io.connSS[4].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[4].data.availableTask.bits <= dataUnits_4.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[4].data.availableTask.valid <= dataUnits_4.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_4.io.connSS.availableTask.ready <= io.connSS[4].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_5.io.taskIn <= dataUnits_4.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_5.io.validIn <= dataUnits_4.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_5.io.connSS.qOutTask <= io.connSS[5].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[5].data.availableTask.bits <= dataUnits_5.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[5].data.availableTask.valid <= dataUnits_5.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_5.io.connSS.availableTask.ready <= io.connSS[5].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_6.io.taskIn <= dataUnits_5.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_6.io.validIn <= dataUnits_5.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_6.io.connSS.qOutTask <= io.connSS[6].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[6].data.availableTask.bits <= dataUnits_6.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[6].data.availableTask.valid <= dataUnits_6.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_6.io.connSS.availableTask.ready <= io.connSS[6].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_7.io.taskIn <= dataUnits_6.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_7.io.validIn <= dataUnits_6.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_7.io.connSS.qOutTask <= io.connSS[7].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[7].data.availableTask.bits <= dataUnits_7.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[7].data.availableTask.valid <= dataUnits_7.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_7.io.connSS.availableTask.ready <= io.connSS[7].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_8.io.taskIn <= dataUnits_7.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_8.io.validIn <= dataUnits_7.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_8.io.connSS.qOutTask <= io.connSS[8].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[8].data.availableTask.bits <= dataUnits_8.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[8].data.availableTask.valid <= dataUnits_8.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_8.io.connSS.availableTask.ready <= io.connSS[8].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_9.io.taskIn <= dataUnits_8.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_9.io.validIn <= dataUnits_8.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_9.io.connSS.qOutTask <= io.connSS[9].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[9].data.availableTask.bits <= dataUnits_9.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[9].data.availableTask.valid <= dataUnits_9.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_9.io.connSS.availableTask.ready <= io.connSS[9].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_10.io.taskIn <= dataUnits_9.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_10.io.validIn <= dataUnits_9.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_10.io.connSS.qOutTask <= io.connSS[10].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[10].data.availableTask.bits <= dataUnits_10.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[10].data.availableTask.valid <= dataUnits_10.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_10.io.connSS.availableTask.ready <= io.connSS[10].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_11.io.taskIn <= dataUnits_10.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_11.io.validIn <= dataUnits_10.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_11.io.connSS.qOutTask <= io.connSS[11].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[11].data.availableTask.bits <= dataUnits_11.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[11].data.availableTask.valid <= dataUnits_11.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_11.io.connSS.availableTask.ready <= io.connSS[11].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_12.io.taskIn <= dataUnits_11.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_12.io.validIn <= dataUnits_11.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_12.io.connSS.qOutTask <= io.connSS[12].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[12].data.availableTask.bits <= dataUnits_12.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[12].data.availableTask.valid <= dataUnits_12.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_12.io.connSS.availableTask.ready <= io.connSS[12].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_13.io.taskIn <= dataUnits_12.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_13.io.validIn <= dataUnits_12.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_13.io.connSS.qOutTask <= io.connSS[13].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[13].data.availableTask.bits <= dataUnits_13.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[13].data.availableTask.valid <= dataUnits_13.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_13.io.connSS.availableTask.ready <= io.connSS[13].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_14.io.taskIn <= dataUnits_13.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_14.io.validIn <= dataUnits_13.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_14.io.connSS.qOutTask <= io.connSS[14].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[14].data.availableTask.bits <= dataUnits_14.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[14].data.availableTask.valid <= dataUnits_14.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_14.io.connSS.availableTask.ready <= io.connSS[14].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_15.io.taskIn <= dataUnits_14.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_15.io.validIn <= dataUnits_14.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_15.io.connSS.qOutTask <= io.connSS[15].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[15].data.availableTask.bits <= dataUnits_15.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[15].data.availableTask.valid <= dataUnits_15.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_15.io.connSS.availableTask.ready <= io.connSS[15].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_16.io.taskIn <= dataUnits_15.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_16.io.validIn <= dataUnits_15.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_16.io.connSS.qOutTask <= io.connSS[16].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[16].data.availableTask.bits <= dataUnits_16.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[16].data.availableTask.valid <= dataUnits_16.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_16.io.connSS.availableTask.ready <= io.connSS[16].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_17.io.taskIn <= dataUnits_16.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_17.io.validIn <= dataUnits_16.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_17.io.connSS.qOutTask <= io.connSS[17].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[17].data.availableTask.bits <= dataUnits_17.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[17].data.availableTask.valid <= dataUnits_17.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_17.io.connSS.availableTask.ready <= io.connSS[17].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_18.io.taskIn <= dataUnits_17.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_18.io.validIn <= dataUnits_17.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_18.io.connSS.qOutTask <= io.connSS[18].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[18].data.availableTask.bits <= dataUnits_18.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[18].data.availableTask.valid <= dataUnits_18.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_18.io.connSS.availableTask.ready <= io.connSS[18].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_19.io.taskIn <= dataUnits_18.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_19.io.validIn <= dataUnits_18.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_19.io.connSS.qOutTask <= io.connSS[19].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[19].data.availableTask.bits <= dataUnits_19.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[19].data.availableTask.valid <= dataUnits_19.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_19.io.connSS.availableTask.ready <= io.connSS[19].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_20.io.taskIn <= dataUnits_19.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_20.io.validIn <= dataUnits_19.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_20.io.connSS.qOutTask <= io.connSS[20].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[20].data.availableTask.bits <= dataUnits_20.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[20].data.availableTask.valid <= dataUnits_20.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_20.io.connSS.availableTask.ready <= io.connSS[20].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_21.io.taskIn <= dataUnits_20.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_21.io.validIn <= dataUnits_20.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_21.io.connSS.qOutTask <= io.connSS[21].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[21].data.availableTask.bits <= dataUnits_21.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[21].data.availableTask.valid <= dataUnits_21.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_21.io.connSS.availableTask.ready <= io.connSS[21].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_22.io.taskIn <= dataUnits_21.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_22.io.validIn <= dataUnits_21.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_22.io.connSS.qOutTask <= io.connSS[22].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[22].data.availableTask.bits <= dataUnits_22.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[22].data.availableTask.valid <= dataUnits_22.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_22.io.connSS.availableTask.ready <= io.connSS[22].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_23.io.taskIn <= dataUnits_22.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_23.io.validIn <= dataUnits_22.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_23.io.connSS.qOutTask <= io.connSS[23].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[23].data.availableTask.bits <= dataUnits_23.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[23].data.availableTask.valid <= dataUnits_23.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_23.io.connSS.availableTask.ready <= io.connSS[23].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_24.io.taskIn <= dataUnits_23.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_24.io.validIn <= dataUnits_23.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_24.io.connSS.qOutTask <= io.connSS[24].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[24].data.availableTask.bits <= dataUnits_24.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[24].data.availableTask.valid <= dataUnits_24.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_24.io.connSS.availableTask.ready <= io.connSS[24].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_25.io.taskIn <= dataUnits_24.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_25.io.validIn <= dataUnits_24.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_25.io.connSS.qOutTask <= io.connSS[25].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[25].data.availableTask.bits <= dataUnits_25.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[25].data.availableTask.valid <= dataUnits_25.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_25.io.connSS.availableTask.ready <= io.connSS[25].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_26.io.taskIn <= dataUnits_25.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_26.io.validIn <= dataUnits_25.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_26.io.connSS.qOutTask <= io.connSS[26].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[26].data.availableTask.bits <= dataUnits_26.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[26].data.availableTask.valid <= dataUnits_26.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_26.io.connSS.availableTask.ready <= io.connSS[26].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_27.io.taskIn <= dataUnits_26.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_27.io.validIn <= dataUnits_26.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_27.io.connSS.qOutTask <= io.connSS[27].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[27].data.availableTask.bits <= dataUnits_27.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[27].data.availableTask.valid <= dataUnits_27.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_27.io.connSS.availableTask.ready <= io.connSS[27].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_28.io.taskIn <= dataUnits_27.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_28.io.validIn <= dataUnits_27.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_28.io.connSS.qOutTask <= io.connSS[28].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[28].data.availableTask.bits <= dataUnits_28.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[28].data.availableTask.valid <= dataUnits_28.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_28.io.connSS.availableTask.ready <= io.connSS[28].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_0.io.taskIn <= dataUnits_28.io.taskOut @[stealNetwork.scala 34:27]
    dataUnits_0.io.validIn <= dataUnits_28.io.validOut @[stealNetwork.scala 35:27]
    dataUnits_0.io.connSS.qOutTask <= io.connSS[0].data.qOutTask @[stealNetwork.scala 36:27]
    io.connSS[0].data.availableTask.bits <= dataUnits_0.io.connSS.availableTask.bits @[stealNetwork.scala 36:27]
    io.connSS[0].data.availableTask.valid <= dataUnits_0.io.connSS.availableTask.valid @[stealNetwork.scala 36:27]
    dataUnits_0.io.connSS.availableTask.ready <= io.connSS[0].data.availableTask.ready @[stealNetwork.scala 36:27]
    ctrlunits_0.io.reqTaskIn <= ctrlunits_1.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_0.io.connSS.stealReq.valid <= io.connSS[0].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[0].ctrl.stealReq.ready <= ctrlunits_0.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_0.io.connSS.serveStealReq.valid <= io.connSS[0].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[0].ctrl.serveStealReq.ready <= ctrlunits_0.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_1.io.reqTaskIn <= ctrlunits_2.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_1.io.connSS.stealReq.valid <= io.connSS[1].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[1].ctrl.stealReq.ready <= ctrlunits_1.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_1.io.connSS.serveStealReq.valid <= io.connSS[1].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[1].ctrl.serveStealReq.ready <= ctrlunits_1.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_2.io.reqTaskIn <= ctrlunits_3.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_2.io.connSS.stealReq.valid <= io.connSS[2].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[2].ctrl.stealReq.ready <= ctrlunits_2.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_2.io.connSS.serveStealReq.valid <= io.connSS[2].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[2].ctrl.serveStealReq.ready <= ctrlunits_2.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_3.io.reqTaskIn <= ctrlunits_4.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_3.io.connSS.stealReq.valid <= io.connSS[3].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[3].ctrl.stealReq.ready <= ctrlunits_3.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_3.io.connSS.serveStealReq.valid <= io.connSS[3].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[3].ctrl.serveStealReq.ready <= ctrlunits_3.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_4.io.reqTaskIn <= ctrlunits_5.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_4.io.connSS.stealReq.valid <= io.connSS[4].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[4].ctrl.stealReq.ready <= ctrlunits_4.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_4.io.connSS.serveStealReq.valid <= io.connSS[4].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[4].ctrl.serveStealReq.ready <= ctrlunits_4.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_5.io.reqTaskIn <= ctrlunits_6.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_5.io.connSS.stealReq.valid <= io.connSS[5].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[5].ctrl.stealReq.ready <= ctrlunits_5.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_5.io.connSS.serveStealReq.valid <= io.connSS[5].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[5].ctrl.serveStealReq.ready <= ctrlunits_5.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_6.io.reqTaskIn <= ctrlunits_7.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_6.io.connSS.stealReq.valid <= io.connSS[6].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[6].ctrl.stealReq.ready <= ctrlunits_6.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_6.io.connSS.serveStealReq.valid <= io.connSS[6].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[6].ctrl.serveStealReq.ready <= ctrlunits_6.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_7.io.reqTaskIn <= ctrlunits_8.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_7.io.connSS.stealReq.valid <= io.connSS[7].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[7].ctrl.stealReq.ready <= ctrlunits_7.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_7.io.connSS.serveStealReq.valid <= io.connSS[7].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[7].ctrl.serveStealReq.ready <= ctrlunits_7.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_8.io.reqTaskIn <= ctrlunits_9.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_8.io.connSS.stealReq.valid <= io.connSS[8].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[8].ctrl.stealReq.ready <= ctrlunits_8.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_8.io.connSS.serveStealReq.valid <= io.connSS[8].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[8].ctrl.serveStealReq.ready <= ctrlunits_8.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_9.io.reqTaskIn <= ctrlunits_10.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_9.io.connSS.stealReq.valid <= io.connSS[9].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[9].ctrl.stealReq.ready <= ctrlunits_9.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_9.io.connSS.serveStealReq.valid <= io.connSS[9].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[9].ctrl.serveStealReq.ready <= ctrlunits_9.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_10.io.reqTaskIn <= ctrlunits_11.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_10.io.connSS.stealReq.valid <= io.connSS[10].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[10].ctrl.stealReq.ready <= ctrlunits_10.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_10.io.connSS.serveStealReq.valid <= io.connSS[10].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[10].ctrl.serveStealReq.ready <= ctrlunits_10.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_11.io.reqTaskIn <= ctrlunits_12.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_11.io.connSS.stealReq.valid <= io.connSS[11].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[11].ctrl.stealReq.ready <= ctrlunits_11.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_11.io.connSS.serveStealReq.valid <= io.connSS[11].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[11].ctrl.serveStealReq.ready <= ctrlunits_11.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_12.io.reqTaskIn <= ctrlunits_13.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_12.io.connSS.stealReq.valid <= io.connSS[12].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[12].ctrl.stealReq.ready <= ctrlunits_12.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_12.io.connSS.serveStealReq.valid <= io.connSS[12].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[12].ctrl.serveStealReq.ready <= ctrlunits_12.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_13.io.reqTaskIn <= ctrlunits_14.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_13.io.connSS.stealReq.valid <= io.connSS[13].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[13].ctrl.stealReq.ready <= ctrlunits_13.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_13.io.connSS.serveStealReq.valid <= io.connSS[13].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[13].ctrl.serveStealReq.ready <= ctrlunits_13.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_14.io.reqTaskIn <= ctrlunits_15.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_14.io.connSS.stealReq.valid <= io.connSS[14].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[14].ctrl.stealReq.ready <= ctrlunits_14.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_14.io.connSS.serveStealReq.valid <= io.connSS[14].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[14].ctrl.serveStealReq.ready <= ctrlunits_14.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_15.io.reqTaskIn <= ctrlunits_16.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_15.io.connSS.stealReq.valid <= io.connSS[15].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[15].ctrl.stealReq.ready <= ctrlunits_15.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_15.io.connSS.serveStealReq.valid <= io.connSS[15].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[15].ctrl.serveStealReq.ready <= ctrlunits_15.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_16.io.reqTaskIn <= ctrlunits_17.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_16.io.connSS.stealReq.valid <= io.connSS[16].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[16].ctrl.stealReq.ready <= ctrlunits_16.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_16.io.connSS.serveStealReq.valid <= io.connSS[16].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[16].ctrl.serveStealReq.ready <= ctrlunits_16.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_17.io.reqTaskIn <= ctrlunits_18.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_17.io.connSS.stealReq.valid <= io.connSS[17].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[17].ctrl.stealReq.ready <= ctrlunits_17.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_17.io.connSS.serveStealReq.valid <= io.connSS[17].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[17].ctrl.serveStealReq.ready <= ctrlunits_17.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_18.io.reqTaskIn <= ctrlunits_19.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_18.io.connSS.stealReq.valid <= io.connSS[18].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[18].ctrl.stealReq.ready <= ctrlunits_18.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_18.io.connSS.serveStealReq.valid <= io.connSS[18].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[18].ctrl.serveStealReq.ready <= ctrlunits_18.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_19.io.reqTaskIn <= ctrlunits_20.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_19.io.connSS.stealReq.valid <= io.connSS[19].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[19].ctrl.stealReq.ready <= ctrlunits_19.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_19.io.connSS.serveStealReq.valid <= io.connSS[19].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[19].ctrl.serveStealReq.ready <= ctrlunits_19.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_20.io.reqTaskIn <= ctrlunits_21.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_20.io.connSS.stealReq.valid <= io.connSS[20].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[20].ctrl.stealReq.ready <= ctrlunits_20.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_20.io.connSS.serveStealReq.valid <= io.connSS[20].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[20].ctrl.serveStealReq.ready <= ctrlunits_20.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_21.io.reqTaskIn <= ctrlunits_22.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_21.io.connSS.stealReq.valid <= io.connSS[21].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[21].ctrl.stealReq.ready <= ctrlunits_21.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_21.io.connSS.serveStealReq.valid <= io.connSS[21].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[21].ctrl.serveStealReq.ready <= ctrlunits_21.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_22.io.reqTaskIn <= ctrlunits_23.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_22.io.connSS.stealReq.valid <= io.connSS[22].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[22].ctrl.stealReq.ready <= ctrlunits_22.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_22.io.connSS.serveStealReq.valid <= io.connSS[22].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[22].ctrl.serveStealReq.ready <= ctrlunits_22.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_23.io.reqTaskIn <= ctrlunits_24.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_23.io.connSS.stealReq.valid <= io.connSS[23].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[23].ctrl.stealReq.ready <= ctrlunits_23.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_23.io.connSS.serveStealReq.valid <= io.connSS[23].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[23].ctrl.serveStealReq.ready <= ctrlunits_23.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_24.io.reqTaskIn <= ctrlunits_25.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_24.io.connSS.stealReq.valid <= io.connSS[24].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[24].ctrl.stealReq.ready <= ctrlunits_24.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_24.io.connSS.serveStealReq.valid <= io.connSS[24].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[24].ctrl.serveStealReq.ready <= ctrlunits_24.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_25.io.reqTaskIn <= ctrlunits_26.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_25.io.connSS.stealReq.valid <= io.connSS[25].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[25].ctrl.stealReq.ready <= ctrlunits_25.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_25.io.connSS.serveStealReq.valid <= io.connSS[25].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[25].ctrl.serveStealReq.ready <= ctrlunits_25.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_26.io.reqTaskIn <= ctrlunits_27.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_26.io.connSS.stealReq.valid <= io.connSS[26].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[26].ctrl.stealReq.ready <= ctrlunits_26.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_26.io.connSS.serveStealReq.valid <= io.connSS[26].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[26].ctrl.serveStealReq.ready <= ctrlunits_26.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_27.io.reqTaskIn <= ctrlunits_28.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_27.io.connSS.stealReq.valid <= io.connSS[27].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[27].ctrl.stealReq.ready <= ctrlunits_27.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_27.io.connSS.serveStealReq.valid <= io.connSS[27].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[27].ctrl.serveStealReq.ready <= ctrlunits_27.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_28.io.reqTaskIn <= ctrlunits_0.io.reqTaskOut @[stealNetwork.scala 44:36]
    ctrlunits_28.io.connSS.stealReq.valid <= io.connSS[28].ctrl.stealReq.valid @[stealNetwork.scala 45:36]
    io.connSS[28].ctrl.stealReq.ready <= ctrlunits_28.io.connSS.stealReq.ready @[stealNetwork.scala 45:36]
    ctrlunits_28.io.connSS.serveStealReq.valid <= io.connSS[28].ctrl.serveStealReq.valid @[stealNetwork.scala 45:36]
    io.connSS[28].ctrl.serveStealReq.ready <= ctrlunits_28.io.connSS.serveStealReq.ready @[stealNetwork.scala 45:36]
    io.ntwDataUnitOccupancyVSS[0] <= dataUnits_0.io.occupied @[stealNetwork.scala 49:54]
    io.ntwDataUnitOccupancyVSS[1] <= dataUnits_5.io.occupied @[stealNetwork.scala 49:54]
    io.ntwDataUnitOccupancyVSS[2] <= dataUnits_10.io.occupied @[stealNetwork.scala 49:54]
    io.ntwDataUnitOccupancyVSS[3] <= dataUnits_15.io.occupied @[stealNetwork.scala 49:54]
    io.ntwDataUnitOccupancyVSS[4] <= dataUnits_20.io.occupied @[stealNetwork.scala 49:54]

  module stealServer :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_16 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_17 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_18 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_19 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_20 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_21 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_22 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  module stealServer_23 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1d")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 53:19]
    when _T : @[stealServer.scala 53:34]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 54:34]
      when _T_1 : @[stealServer.scala 54:54]
        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 55:50]
        stateReg <= UInt<1>("h1") @[stealServer.scala 56:50]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 57:40]
        when _T_2 : @[stealServer.scala 57:60]
          stateReg <= UInt<3>("h4") @[stealServer.scala 58:50]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 59:40]
          when _T_3 : @[stealServer.scala 59:60]
            stateReg <= UInt<3>("h6") @[stealServer.scala 60:50]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 62:50]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 64:25]
      when _T_4 : @[stealServer.scala 64:47]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 65:50]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 66:69]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 66:49]
        when _T_6 : @[stealServer.scala 66:77]
          stateReg <= UInt<2>("h2") @[stealServer.scala 67:50]
          requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 68:50]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 69:75]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 69:55]
          when _T_8 : @[stealServer.scala 69:83]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 70:50]
            requestFullCount <= UInt<32>("h1d") @[stealServer.scala 71:50]
            stateReg <= UInt<1>("h1") @[stealServer.scala 72:50]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 73:40]
            when _T_9 : @[stealServer.scala 73:61]
              stateReg <= UInt<3>("h6") @[stealServer.scala 74:50]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 75:40]
              when _T_10 : @[stealServer.scala 75:46]
                stateReg <= UInt<2>("h2") @[stealServer.scala 76:50]
                requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 77:50]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 78:56]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 78:56]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 78:33]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 79:53]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 80:37]
                when _T_11 : @[stealServer.scala 80:45]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 81:50]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 83:50]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 86:54]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 87:70]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 87:70]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 87:50]
        else :
          requestFullCount <= UInt<32>("h1d") @[stealServer.scala 89:50]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 91:25]
        when _T_12 : @[stealServer.scala 91:46]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 93:54]
            stateReg <= UInt<2>("h3") @[stealServer.scala 94:50]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 95:50]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 96:40]
            when _T_13 : @[stealServer.scala 96:61]
              stateReg <= UInt<1>("h0") @[stealServer.scala 97:50]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 98:39]
              when _T_14 : @[stealServer.scala 98:47]
                requestFullCount <= UInt<32>("h1d") @[stealServer.scala 99:50]
                stateReg <= UInt<1>("h1") @[stealServer.scala 100:50]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 102:50]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 105:14]
          when _T_15 : @[stealServer.scala 105:55]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 106:72]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 106:72]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 106:50]
          else :
            requestKilledCount <= UInt<32>("h1d") @[stealServer.scala 108:50]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 111:51]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 113:25]
          when _T_16 : @[stealServer.scala 113:44]
            when io.connQ.push.ready : @[stealServer.scala 114:34]
              stateReg <= UInt<1>("h0") @[stealServer.scala 115:50]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 116:40]
              when _T_17 : @[stealServer.scala 116:61]
                stateReg <= UInt<3>("h5") @[stealServer.scala 117:50]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 118:50]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 120:50]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 123:51]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 124:51]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 126:25]
            when _T_18 : @[stealServer.scala 126:43]
              when io.connQ.pop.valid : @[stealServer.scala 127:33]
                stateReg <= UInt<3>("h5") @[stealServer.scala 128:50]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 129:50]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 130:40]
                when _T_19 : @[stealServer.scala 130:48]
                  requestFullCount <= UInt<32>("h1d") @[stealServer.scala 131:50]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 132:50]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 134:50]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 137:51]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 139:25]
              when _T_20 : @[stealServer.scala 139:48]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 140:49]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 141:73]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 141:73]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 141:50]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 142:50]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 144:50]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 147:51]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 148:51]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 150:25]
                when _T_21 : @[stealServer.scala 150:54]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 151:34]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 152:73]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 152:50]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 151:53]
                  when _T_25 : @[stealServer.scala 152:95]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 153:50]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 154:40]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 154:60]
                    when _T_27 : @[stealServer.scala 154:103]
                      requestFullCount <= UInt<32>("h1d") @[stealServer.scala 155:50]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 156:50]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 157:50]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 158:40]
                      when _T_28 : @[stealServer.scala 158:60]
                        requestFullCount <= UInt<32>("h1d") @[stealServer.scala 159:50]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 160:50]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 161:50]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 163:50]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 166:51]

  extmodule DualPortBRAM :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_1 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_1 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_1 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_2 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_2 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_2 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_3 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_3 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_3 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_4 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_4 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_4 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_5 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_5 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_5 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_6 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_6 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_6 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_7 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_7 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_7 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_8 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_8 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_8 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_9 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_9 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_9 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_10 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_10 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_10 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_11 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_11 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_11 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_12 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_12 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_12 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_13 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_13 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_13 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_14 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_14 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_14 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_15 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_15 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_15 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_16 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_16 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_16 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_17 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_17 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_17 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_18 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_18 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_18 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_19 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_19 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_19 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_20 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_20 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_20 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_21 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_21 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_21 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_22 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_22 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_22 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  extmodule DualPortBRAM_23 :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    output b : { flip addr : UInt<6>, flip din : UInt<32>, flip wr : UInt<1>, dout : UInt<32>}
    defname = DualPortBRAM
    parameter DATA = 32
    parameter ADDR = 6

  module hw_deque_23 :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM_23 @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = lt(currLen, qMaxLenReg) @[deque.scala 73:58]
      node _T_2 = and(io.connVec[0].push.valid, _T_1) @[deque.scala 73:47]
      when _T_2 : @[deque.scala 73:71]
        stateRegs_0 <= UInt<1>("h1") @[deque.scala 74:34]
      else :
        node _T_3 = gt(currLen, UInt<1>("h1")) @[deque.scala 75:64]
        node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 75:53]
        node _T_5 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 75:115]
        node _T_6 = and(io.connVec[0].pop.ready, _T_5) @[deque.scala 75:99]
        node _T_7 = gt(currLen, UInt<1>("h0")) @[deque.scala 75:141]
        node _T_8 = and(_T_6, _T_7) @[deque.scala 75:130]
        node _T_9 = or(_T_4, _T_8) @[deque.scala 75:71]
        when _T_9 : @[deque.scala 75:148]
          stateRegs_0 <= UInt<2>("h2") @[deque.scala 76:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 78:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_10 : @[deque.scala 92:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_11 : @[deque.scala 94:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 98:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 98:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 102:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_12 : @[deque.scala 105:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_13 : @[deque.scala 107:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 111:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 111:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 117:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 117:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 117:33]
          when _T_16 : @[deque.scala 117:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 118:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 120:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 120:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 120:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_17 : @[deque.scala 129:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 135:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 135:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 135:33]
            when _T_20 : @[deque.scala 135:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 136:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 137:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 139:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 139:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 139:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 140:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 140:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 152:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_21 : @[deque.scala 153:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 159:33]
              when _T_22 : @[deque.scala 159:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 160:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 160:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 160:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 162:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 162:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 162:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 81:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 81:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 81:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 81:47]
      when _T_27 : @[deque.scala 81:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 82:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 83:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 83:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 83:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 83:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 83:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 83:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 83:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 83:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 83:71]
        when _T_36 : @[deque.scala 83:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 87:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 89:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 92:33]
      when _T_37 : @[deque.scala 92:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 94:34]
        when _T_38 : @[deque.scala 94:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 95:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 96:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 98:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 98:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 98:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 99:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 102:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 103:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 105:33]
        when _T_39 : @[deque.scala 105:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 107:33]
          when _T_40 : @[deque.scala 107:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 108:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 109:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 111:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 111:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 111:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 112:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 123:33]
          when _T_41 : @[deque.scala 123:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 124:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 124:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 124:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 126:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 126:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 126:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 129:33]
          when _T_42 : @[deque.scala 129:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 131:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 143:33]
            when _T_43 : @[deque.scala 143:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 144:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 144:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 144:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 145:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 145:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 147:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 147:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 147:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 148:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 148:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 151:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 152:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 153:33]
            when _T_44 : @[deque.scala 153:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 155:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 165:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 165:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 165:33]
              when _T_47 : @[deque.scala 165:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 166:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 168:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 168:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 168:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 171:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 175:21]
    when _T_48 : @[deque.scala 175:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 176:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 176:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 176:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 176:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 176:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 176:58]
      currLen <= _currLen_T_5 @[deque.scala 176:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 178:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 178:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 178:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 178:44]
      currLen <= _currLen_T_9 @[deque.scala 178:17]

  module stealNW_TQ :
    input clock : Clock
    input reset : Reset
    output io : { connPE : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}[24], connVSS : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}[5], connVAS : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}[0], ntwDataUnitOccupancyVSS : UInt<1>[5]}

    inst stealNet of stealNetwork @[stealNW_TQ.scala 31:30]
    stealNet.clock <= clock
    stealNet.reset <= reset
    inst stealServers_0 of stealServer @[stealNW_TQ.scala 48:49]
    stealServers_0.clock <= clock
    stealServers_0.reset <= reset
    inst stealServers_1 of stealServer_1 @[stealNW_TQ.scala 48:49]
    stealServers_1.clock <= clock
    stealServers_1.reset <= reset
    inst stealServers_2 of stealServer_2 @[stealNW_TQ.scala 48:49]
    stealServers_2.clock <= clock
    stealServers_2.reset <= reset
    inst stealServers_3 of stealServer_3 @[stealNW_TQ.scala 48:49]
    stealServers_3.clock <= clock
    stealServers_3.reset <= reset
    inst stealServers_4 of stealServer_4 @[stealNW_TQ.scala 48:49]
    stealServers_4.clock <= clock
    stealServers_4.reset <= reset
    inst stealServers_5 of stealServer_5 @[stealNW_TQ.scala 48:49]
    stealServers_5.clock <= clock
    stealServers_5.reset <= reset
    inst stealServers_6 of stealServer_6 @[stealNW_TQ.scala 48:49]
    stealServers_6.clock <= clock
    stealServers_6.reset <= reset
    inst stealServers_7 of stealServer_7 @[stealNW_TQ.scala 48:49]
    stealServers_7.clock <= clock
    stealServers_7.reset <= reset
    inst stealServers_8 of stealServer_8 @[stealNW_TQ.scala 48:49]
    stealServers_8.clock <= clock
    stealServers_8.reset <= reset
    inst stealServers_9 of stealServer_9 @[stealNW_TQ.scala 48:49]
    stealServers_9.clock <= clock
    stealServers_9.reset <= reset
    inst stealServers_10 of stealServer_10 @[stealNW_TQ.scala 48:49]
    stealServers_10.clock <= clock
    stealServers_10.reset <= reset
    inst stealServers_11 of stealServer_11 @[stealNW_TQ.scala 48:49]
    stealServers_11.clock <= clock
    stealServers_11.reset <= reset
    inst stealServers_12 of stealServer_12 @[stealNW_TQ.scala 48:49]
    stealServers_12.clock <= clock
    stealServers_12.reset <= reset
    inst stealServers_13 of stealServer_13 @[stealNW_TQ.scala 48:49]
    stealServers_13.clock <= clock
    stealServers_13.reset <= reset
    inst stealServers_14 of stealServer_14 @[stealNW_TQ.scala 48:49]
    stealServers_14.clock <= clock
    stealServers_14.reset <= reset
    inst stealServers_15 of stealServer_15 @[stealNW_TQ.scala 48:49]
    stealServers_15.clock <= clock
    stealServers_15.reset <= reset
    inst stealServers_16 of stealServer_16 @[stealNW_TQ.scala 48:49]
    stealServers_16.clock <= clock
    stealServers_16.reset <= reset
    inst stealServers_17 of stealServer_17 @[stealNW_TQ.scala 48:49]
    stealServers_17.clock <= clock
    stealServers_17.reset <= reset
    inst stealServers_18 of stealServer_18 @[stealNW_TQ.scala 48:49]
    stealServers_18.clock <= clock
    stealServers_18.reset <= reset
    inst stealServers_19 of stealServer_19 @[stealNW_TQ.scala 48:49]
    stealServers_19.clock <= clock
    stealServers_19.reset <= reset
    inst stealServers_20 of stealServer_20 @[stealNW_TQ.scala 48:49]
    stealServers_20.clock <= clock
    stealServers_20.reset <= reset
    inst stealServers_21 of stealServer_21 @[stealNW_TQ.scala 48:49]
    stealServers_21.clock <= clock
    stealServers_21.reset <= reset
    inst stealServers_22 of stealServer_22 @[stealNW_TQ.scala 48:49]
    stealServers_22.clock <= clock
    stealServers_22.reset <= reset
    inst stealServers_23 of stealServer_23 @[stealNW_TQ.scala 48:49]
    stealServers_23.clock <= clock
    stealServers_23.reset <= reset
    inst taskQueues_0 of hw_deque @[stealNW_TQ.scala 52:49]
    taskQueues_0.clock <= clock
    taskQueues_0.reset <= reset
    inst taskQueues_1 of hw_deque_1 @[stealNW_TQ.scala 52:49]
    taskQueues_1.clock <= clock
    taskQueues_1.reset <= reset
    inst taskQueues_2 of hw_deque_2 @[stealNW_TQ.scala 52:49]
    taskQueues_2.clock <= clock
    taskQueues_2.reset <= reset
    inst taskQueues_3 of hw_deque_3 @[stealNW_TQ.scala 52:49]
    taskQueues_3.clock <= clock
    taskQueues_3.reset <= reset
    inst taskQueues_4 of hw_deque_4 @[stealNW_TQ.scala 52:49]
    taskQueues_4.clock <= clock
    taskQueues_4.reset <= reset
    inst taskQueues_5 of hw_deque_5 @[stealNW_TQ.scala 52:49]
    taskQueues_5.clock <= clock
    taskQueues_5.reset <= reset
    inst taskQueues_6 of hw_deque_6 @[stealNW_TQ.scala 52:49]
    taskQueues_6.clock <= clock
    taskQueues_6.reset <= reset
    inst taskQueues_7 of hw_deque_7 @[stealNW_TQ.scala 52:49]
    taskQueues_7.clock <= clock
    taskQueues_7.reset <= reset
    inst taskQueues_8 of hw_deque_8 @[stealNW_TQ.scala 52:49]
    taskQueues_8.clock <= clock
    taskQueues_8.reset <= reset
    inst taskQueues_9 of hw_deque_9 @[stealNW_TQ.scala 52:49]
    taskQueues_9.clock <= clock
    taskQueues_9.reset <= reset
    inst taskQueues_10 of hw_deque_10 @[stealNW_TQ.scala 52:49]
    taskQueues_10.clock <= clock
    taskQueues_10.reset <= reset
    inst taskQueues_11 of hw_deque_11 @[stealNW_TQ.scala 52:49]
    taskQueues_11.clock <= clock
    taskQueues_11.reset <= reset
    inst taskQueues_12 of hw_deque_12 @[stealNW_TQ.scala 52:49]
    taskQueues_12.clock <= clock
    taskQueues_12.reset <= reset
    inst taskQueues_13 of hw_deque_13 @[stealNW_TQ.scala 52:49]
    taskQueues_13.clock <= clock
    taskQueues_13.reset <= reset
    inst taskQueues_14 of hw_deque_14 @[stealNW_TQ.scala 52:49]
    taskQueues_14.clock <= clock
    taskQueues_14.reset <= reset
    inst taskQueues_15 of hw_deque_15 @[stealNW_TQ.scala 52:49]
    taskQueues_15.clock <= clock
    taskQueues_15.reset <= reset
    inst taskQueues_16 of hw_deque_16 @[stealNW_TQ.scala 52:49]
    taskQueues_16.clock <= clock
    taskQueues_16.reset <= reset
    inst taskQueues_17 of hw_deque_17 @[stealNW_TQ.scala 52:49]
    taskQueues_17.clock <= clock
    taskQueues_17.reset <= reset
    inst taskQueues_18 of hw_deque_18 @[stealNW_TQ.scala 52:49]
    taskQueues_18.clock <= clock
    taskQueues_18.reset <= reset
    inst taskQueues_19 of hw_deque_19 @[stealNW_TQ.scala 52:49]
    taskQueues_19.clock <= clock
    taskQueues_19.reset <= reset
    inst taskQueues_20 of hw_deque_20 @[stealNW_TQ.scala 52:49]
    taskQueues_20.clock <= clock
    taskQueues_20.reset <= reset
    inst taskQueues_21 of hw_deque_21 @[stealNW_TQ.scala 52:49]
    taskQueues_21.clock <= clock
    taskQueues_21.reset <= reset
    inst taskQueues_22 of hw_deque_22 @[stealNW_TQ.scala 52:49]
    taskQueues_22.clock <= clock
    taskQueues_22.reset <= reset
    inst taskQueues_23 of hw_deque_23 @[stealNW_TQ.scala 52:49]
    taskQueues_23.clock <= clock
    taskQueues_23.reset <= reset
    io.connPE[0].pop.bits <= taskQueues_0.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[0].pop.valid <= taskQueues_0.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_0.io.connVec[0].pop.ready <= io.connPE[0].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_0.io.connVec[0].push <= io.connPE[0].push @[stealNW_TQ.scala 56:37]
    io.connPE[0].currLength <= taskQueues_0.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[1].pop.bits <= taskQueues_1.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[1].pop.valid <= taskQueues_1.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_1.io.connVec[0].pop.ready <= io.connPE[1].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_1.io.connVec[0].push <= io.connPE[1].push @[stealNW_TQ.scala 56:37]
    io.connPE[1].currLength <= taskQueues_1.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[2].pop.bits <= taskQueues_2.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[2].pop.valid <= taskQueues_2.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_2.io.connVec[0].pop.ready <= io.connPE[2].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_2.io.connVec[0].push <= io.connPE[2].push @[stealNW_TQ.scala 56:37]
    io.connPE[2].currLength <= taskQueues_2.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[3].pop.bits <= taskQueues_3.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[3].pop.valid <= taskQueues_3.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_3.io.connVec[0].pop.ready <= io.connPE[3].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_3.io.connVec[0].push <= io.connPE[3].push @[stealNW_TQ.scala 56:37]
    io.connPE[3].currLength <= taskQueues_3.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[4].pop.bits <= taskQueues_4.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[4].pop.valid <= taskQueues_4.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_4.io.connVec[0].pop.ready <= io.connPE[4].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_4.io.connVec[0].push <= io.connPE[4].push @[stealNW_TQ.scala 56:37]
    io.connPE[4].currLength <= taskQueues_4.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[5].pop.bits <= taskQueues_5.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[5].pop.valid <= taskQueues_5.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_5.io.connVec[0].pop.ready <= io.connPE[5].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_5.io.connVec[0].push <= io.connPE[5].push @[stealNW_TQ.scala 56:37]
    io.connPE[5].currLength <= taskQueues_5.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[6].pop.bits <= taskQueues_6.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[6].pop.valid <= taskQueues_6.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_6.io.connVec[0].pop.ready <= io.connPE[6].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_6.io.connVec[0].push <= io.connPE[6].push @[stealNW_TQ.scala 56:37]
    io.connPE[6].currLength <= taskQueues_6.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[7].pop.bits <= taskQueues_7.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[7].pop.valid <= taskQueues_7.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_7.io.connVec[0].pop.ready <= io.connPE[7].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_7.io.connVec[0].push <= io.connPE[7].push @[stealNW_TQ.scala 56:37]
    io.connPE[7].currLength <= taskQueues_7.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[8].pop.bits <= taskQueues_8.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[8].pop.valid <= taskQueues_8.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_8.io.connVec[0].pop.ready <= io.connPE[8].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_8.io.connVec[0].push <= io.connPE[8].push @[stealNW_TQ.scala 56:37]
    io.connPE[8].currLength <= taskQueues_8.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[9].pop.bits <= taskQueues_9.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[9].pop.valid <= taskQueues_9.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_9.io.connVec[0].pop.ready <= io.connPE[9].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_9.io.connVec[0].push <= io.connPE[9].push @[stealNW_TQ.scala 56:37]
    io.connPE[9].currLength <= taskQueues_9.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[10].pop.bits <= taskQueues_10.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[10].pop.valid <= taskQueues_10.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_10.io.connVec[0].pop.ready <= io.connPE[10].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_10.io.connVec[0].push <= io.connPE[10].push @[stealNW_TQ.scala 56:37]
    io.connPE[10].currLength <= taskQueues_10.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[11].pop.bits <= taskQueues_11.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[11].pop.valid <= taskQueues_11.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_11.io.connVec[0].pop.ready <= io.connPE[11].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_11.io.connVec[0].push <= io.connPE[11].push @[stealNW_TQ.scala 56:37]
    io.connPE[11].currLength <= taskQueues_11.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[12].pop.bits <= taskQueues_12.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[12].pop.valid <= taskQueues_12.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_12.io.connVec[0].pop.ready <= io.connPE[12].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_12.io.connVec[0].push <= io.connPE[12].push @[stealNW_TQ.scala 56:37]
    io.connPE[12].currLength <= taskQueues_12.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[13].pop.bits <= taskQueues_13.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[13].pop.valid <= taskQueues_13.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_13.io.connVec[0].pop.ready <= io.connPE[13].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_13.io.connVec[0].push <= io.connPE[13].push @[stealNW_TQ.scala 56:37]
    io.connPE[13].currLength <= taskQueues_13.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[14].pop.bits <= taskQueues_14.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[14].pop.valid <= taskQueues_14.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_14.io.connVec[0].pop.ready <= io.connPE[14].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_14.io.connVec[0].push <= io.connPE[14].push @[stealNW_TQ.scala 56:37]
    io.connPE[14].currLength <= taskQueues_14.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[15].pop.bits <= taskQueues_15.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[15].pop.valid <= taskQueues_15.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_15.io.connVec[0].pop.ready <= io.connPE[15].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_15.io.connVec[0].push <= io.connPE[15].push @[stealNW_TQ.scala 56:37]
    io.connPE[15].currLength <= taskQueues_15.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[16].pop.bits <= taskQueues_16.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[16].pop.valid <= taskQueues_16.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_16.io.connVec[0].pop.ready <= io.connPE[16].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_16.io.connVec[0].push <= io.connPE[16].push @[stealNW_TQ.scala 56:37]
    io.connPE[16].currLength <= taskQueues_16.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[17].pop.bits <= taskQueues_17.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[17].pop.valid <= taskQueues_17.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_17.io.connVec[0].pop.ready <= io.connPE[17].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_17.io.connVec[0].push <= io.connPE[17].push @[stealNW_TQ.scala 56:37]
    io.connPE[17].currLength <= taskQueues_17.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[18].pop.bits <= taskQueues_18.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[18].pop.valid <= taskQueues_18.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_18.io.connVec[0].pop.ready <= io.connPE[18].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_18.io.connVec[0].push <= io.connPE[18].push @[stealNW_TQ.scala 56:37]
    io.connPE[18].currLength <= taskQueues_18.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[19].pop.bits <= taskQueues_19.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[19].pop.valid <= taskQueues_19.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_19.io.connVec[0].pop.ready <= io.connPE[19].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_19.io.connVec[0].push <= io.connPE[19].push @[stealNW_TQ.scala 56:37]
    io.connPE[19].currLength <= taskQueues_19.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[20].pop.bits <= taskQueues_20.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[20].pop.valid <= taskQueues_20.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_20.io.connVec[0].pop.ready <= io.connPE[20].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_20.io.connVec[0].push <= io.connPE[20].push @[stealNW_TQ.scala 56:37]
    io.connPE[20].currLength <= taskQueues_20.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[21].pop.bits <= taskQueues_21.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[21].pop.valid <= taskQueues_21.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_21.io.connVec[0].pop.ready <= io.connPE[21].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_21.io.connVec[0].push <= io.connPE[21].push @[stealNW_TQ.scala 56:37]
    io.connPE[21].currLength <= taskQueues_21.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[22].pop.bits <= taskQueues_22.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[22].pop.valid <= taskQueues_22.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_22.io.connVec[0].pop.ready <= io.connPE[22].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_22.io.connVec[0].push <= io.connPE[22].push @[stealNW_TQ.scala 56:37]
    io.connPE[22].currLength <= taskQueues_22.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    io.connPE[23].pop.bits <= taskQueues_23.io.connVec[0].pop.bits @[stealNW_TQ.scala 56:37]
    io.connPE[23].pop.valid <= taskQueues_23.io.connVec[0].pop.valid @[stealNW_TQ.scala 56:37]
    taskQueues_23.io.connVec[0].pop.ready <= io.connPE[23].pop.ready @[stealNW_TQ.scala 56:37]
    taskQueues_23.io.connVec[0].push <= io.connPE[23].push @[stealNW_TQ.scala 56:37]
    io.connPE[23].currLength <= taskQueues_23.io.connVec[0].currLength @[stealNW_TQ.scala 56:37]
    stealServers_0.io.connQ <= taskQueues_0.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_1.io.connQ <= taskQueues_1.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_2.io.connQ <= taskQueues_2.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_3.io.connQ <= taskQueues_3.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_4.io.connQ <= taskQueues_4.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_5.io.connQ <= taskQueues_5.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_6.io.connQ <= taskQueues_6.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_7.io.connQ <= taskQueues_7.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_8.io.connQ <= taskQueues_8.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_9.io.connQ <= taskQueues_9.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_10.io.connQ <= taskQueues_10.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_11.io.connQ <= taskQueues_11.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_12.io.connQ <= taskQueues_12.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_13.io.connQ <= taskQueues_13.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_14.io.connQ <= taskQueues_14.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_15.io.connQ <= taskQueues_15.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_16.io.connQ <= taskQueues_16.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_17.io.connQ <= taskQueues_17.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_18.io.connQ <= taskQueues_18.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_19.io.connQ <= taskQueues_19.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_20.io.connQ <= taskQueues_20.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_21.io.connQ <= taskQueues_21.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_22.io.connQ <= taskQueues_22.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_23.io.connQ <= taskQueues_23.io.connVec[1] @[stealNW_TQ.scala 63:37]
    stealServers_0.io.connNetwork <= stealNet.io.connSS[1] @[stealNW_TQ.scala 69:33]
    stealServers_1.io.connNetwork <= stealNet.io.connSS[2] @[stealNW_TQ.scala 69:33]
    stealServers_2.io.connNetwork <= stealNet.io.connSS[3] @[stealNW_TQ.scala 69:33]
    stealServers_3.io.connNetwork <= stealNet.io.connSS[4] @[stealNW_TQ.scala 69:33]
    stealServers_4.io.connNetwork <= stealNet.io.connSS[5] @[stealNW_TQ.scala 69:33]
    stealServers_5.io.connNetwork <= stealNet.io.connSS[6] @[stealNW_TQ.scala 69:33]
    stealServers_6.io.connNetwork <= stealNet.io.connSS[7] @[stealNW_TQ.scala 69:33]
    stealServers_7.io.connNetwork <= stealNet.io.connSS[8] @[stealNW_TQ.scala 69:33]
    stealServers_8.io.connNetwork <= stealNet.io.connSS[9] @[stealNW_TQ.scala 69:33]
    stealServers_9.io.connNetwork <= stealNet.io.connSS[10] @[stealNW_TQ.scala 69:33]
    stealServers_10.io.connNetwork <= stealNet.io.connSS[11] @[stealNW_TQ.scala 69:33]
    stealServers_11.io.connNetwork <= stealNet.io.connSS[12] @[stealNW_TQ.scala 69:33]
    stealServers_12.io.connNetwork <= stealNet.io.connSS[13] @[stealNW_TQ.scala 69:33]
    stealServers_13.io.connNetwork <= stealNet.io.connSS[14] @[stealNW_TQ.scala 69:33]
    stealServers_14.io.connNetwork <= stealNet.io.connSS[15] @[stealNW_TQ.scala 69:33]
    stealServers_15.io.connNetwork <= stealNet.io.connSS[16] @[stealNW_TQ.scala 69:33]
    stealServers_16.io.connNetwork <= stealNet.io.connSS[17] @[stealNW_TQ.scala 69:33]
    stealServers_17.io.connNetwork <= stealNet.io.connSS[18] @[stealNW_TQ.scala 69:33]
    stealServers_18.io.connNetwork <= stealNet.io.connSS[19] @[stealNW_TQ.scala 69:33]
    stealServers_19.io.connNetwork <= stealNet.io.connSS[20] @[stealNW_TQ.scala 69:33]
    stealServers_20.io.connNetwork <= stealNet.io.connSS[21] @[stealNW_TQ.scala 69:33]
    stealServers_21.io.connNetwork <= stealNet.io.connSS[22] @[stealNW_TQ.scala 69:33]
    stealServers_22.io.connNetwork <= stealNet.io.connSS[23] @[stealNW_TQ.scala 69:33]
    stealServers_23.io.connNetwork <= stealNet.io.connSS[24] @[stealNW_TQ.scala 69:33]
    stealNet.io.connSS[0].data.qOutTask <= io.connVSS[0].data.qOutTask @[stealNW_TQ.scala 78:35]
    io.connVSS[0].data.availableTask.bits <= stealNet.io.connSS[0].data.availableTask.bits @[stealNW_TQ.scala 78:35]
    io.connVSS[0].data.availableTask.valid <= stealNet.io.connSS[0].data.availableTask.valid @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[0].data.availableTask.ready <= io.connVSS[0].data.availableTask.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[0].ctrl.stealReq.valid <= io.connVSS[0].ctrl.stealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[0].ctrl.stealReq.ready <= stealNet.io.connSS[0].ctrl.stealReq.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[0].ctrl.serveStealReq.valid <= io.connVSS[0].ctrl.serveStealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[0].ctrl.serveStealReq.ready <= stealNet.io.connSS[0].ctrl.serveStealReq.ready @[stealNW_TQ.scala 78:35]
    stealServers_0.io.connNetwork <= stealNet.io.connSS[1] @[stealNW_TQ.scala 81:35]
    stealServers_1.io.connNetwork <= stealNet.io.connSS[2] @[stealNW_TQ.scala 81:35]
    stealServers_2.io.connNetwork <= stealNet.io.connSS[3] @[stealNW_TQ.scala 81:35]
    stealServers_3.io.connNetwork <= stealNet.io.connSS[4] @[stealNW_TQ.scala 81:35]
    stealNet.io.connSS[5].data.qOutTask <= io.connVSS[1].data.qOutTask @[stealNW_TQ.scala 78:35]
    io.connVSS[1].data.availableTask.bits <= stealNet.io.connSS[5].data.availableTask.bits @[stealNW_TQ.scala 78:35]
    io.connVSS[1].data.availableTask.valid <= stealNet.io.connSS[5].data.availableTask.valid @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[5].data.availableTask.ready <= io.connVSS[1].data.availableTask.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[5].ctrl.stealReq.valid <= io.connVSS[1].ctrl.stealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[1].ctrl.stealReq.ready <= stealNet.io.connSS[5].ctrl.stealReq.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[5].ctrl.serveStealReq.valid <= io.connVSS[1].ctrl.serveStealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[1].ctrl.serveStealReq.ready <= stealNet.io.connSS[5].ctrl.serveStealReq.ready @[stealNW_TQ.scala 78:35]
    stealServers_4.io.connNetwork <= stealNet.io.connSS[6] @[stealNW_TQ.scala 81:35]
    stealServers_5.io.connNetwork <= stealNet.io.connSS[7] @[stealNW_TQ.scala 81:35]
    stealServers_6.io.connNetwork <= stealNet.io.connSS[8] @[stealNW_TQ.scala 81:35]
    stealServers_7.io.connNetwork <= stealNet.io.connSS[9] @[stealNW_TQ.scala 81:35]
    stealNet.io.connSS[10].data.qOutTask <= io.connVSS[2].data.qOutTask @[stealNW_TQ.scala 78:35]
    io.connVSS[2].data.availableTask.bits <= stealNet.io.connSS[10].data.availableTask.bits @[stealNW_TQ.scala 78:35]
    io.connVSS[2].data.availableTask.valid <= stealNet.io.connSS[10].data.availableTask.valid @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[10].data.availableTask.ready <= io.connVSS[2].data.availableTask.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[10].ctrl.stealReq.valid <= io.connVSS[2].ctrl.stealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[2].ctrl.stealReq.ready <= stealNet.io.connSS[10].ctrl.stealReq.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[10].ctrl.serveStealReq.valid <= io.connVSS[2].ctrl.serveStealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[2].ctrl.serveStealReq.ready <= stealNet.io.connSS[10].ctrl.serveStealReq.ready @[stealNW_TQ.scala 78:35]
    stealServers_8.io.connNetwork <= stealNet.io.connSS[11] @[stealNW_TQ.scala 81:35]
    stealServers_9.io.connNetwork <= stealNet.io.connSS[12] @[stealNW_TQ.scala 81:35]
    stealServers_10.io.connNetwork <= stealNet.io.connSS[13] @[stealNW_TQ.scala 81:35]
    stealServers_11.io.connNetwork <= stealNet.io.connSS[14] @[stealNW_TQ.scala 81:35]
    stealNet.io.connSS[15].data.qOutTask <= io.connVSS[3].data.qOutTask @[stealNW_TQ.scala 78:35]
    io.connVSS[3].data.availableTask.bits <= stealNet.io.connSS[15].data.availableTask.bits @[stealNW_TQ.scala 78:35]
    io.connVSS[3].data.availableTask.valid <= stealNet.io.connSS[15].data.availableTask.valid @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[15].data.availableTask.ready <= io.connVSS[3].data.availableTask.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[15].ctrl.stealReq.valid <= io.connVSS[3].ctrl.stealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[3].ctrl.stealReq.ready <= stealNet.io.connSS[15].ctrl.stealReq.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[15].ctrl.serveStealReq.valid <= io.connVSS[3].ctrl.serveStealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[3].ctrl.serveStealReq.ready <= stealNet.io.connSS[15].ctrl.serveStealReq.ready @[stealNW_TQ.scala 78:35]
    stealServers_12.io.connNetwork <= stealNet.io.connSS[16] @[stealNW_TQ.scala 81:35]
    stealServers_13.io.connNetwork <= stealNet.io.connSS[17] @[stealNW_TQ.scala 81:35]
    stealServers_14.io.connNetwork <= stealNet.io.connSS[18] @[stealNW_TQ.scala 81:35]
    stealServers_15.io.connNetwork <= stealNet.io.connSS[19] @[stealNW_TQ.scala 81:35]
    stealNet.io.connSS[20].data.qOutTask <= io.connVSS[4].data.qOutTask @[stealNW_TQ.scala 78:35]
    io.connVSS[4].data.availableTask.bits <= stealNet.io.connSS[20].data.availableTask.bits @[stealNW_TQ.scala 78:35]
    io.connVSS[4].data.availableTask.valid <= stealNet.io.connSS[20].data.availableTask.valid @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[20].data.availableTask.ready <= io.connVSS[4].data.availableTask.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[20].ctrl.stealReq.valid <= io.connVSS[4].ctrl.stealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[4].ctrl.stealReq.ready <= stealNet.io.connSS[20].ctrl.stealReq.ready @[stealNW_TQ.scala 78:35]
    stealNet.io.connSS[20].ctrl.serveStealReq.valid <= io.connVSS[4].ctrl.serveStealReq.valid @[stealNW_TQ.scala 78:35]
    io.connVSS[4].ctrl.serveStealReq.ready <= stealNet.io.connSS[20].ctrl.serveStealReq.ready @[stealNW_TQ.scala 78:35]
    stealServers_16.io.connNetwork <= stealNet.io.connSS[21] @[stealNW_TQ.scala 81:35]
    stealServers_17.io.connNetwork <= stealNet.io.connSS[22] @[stealNW_TQ.scala 81:35]
    stealServers_18.io.connNetwork <= stealNet.io.connSS[23] @[stealNW_TQ.scala 81:35]
    stealServers_19.io.connNetwork <= stealNet.io.connSS[24] @[stealNW_TQ.scala 81:35]
    stealServers_20.io.connNetwork <= stealNet.io.connSS[25] @[stealNW_TQ.scala 81:35]
    stealServers_21.io.connNetwork <= stealNet.io.connSS[26] @[stealNW_TQ.scala 81:35]
    stealServers_22.io.connNetwork <= stealNet.io.connSS[27] @[stealNW_TQ.scala 81:35]
    stealServers_23.io.connNetwork <= stealNet.io.connSS[28] @[stealNW_TQ.scala 81:35]
    io.ntwDataUnitOccupancyVSS[0] <= stealNet.io.ntwDataUnitOccupancyVSS[0] @[stealNW_TQ.scala 92:48]
    io.ntwDataUnitOccupancyVSS[1] <= stealNet.io.ntwDataUnitOccupancyVSS[1] @[stealNW_TQ.scala 92:48]
    io.ntwDataUnitOccupancyVSS[2] <= stealNet.io.ntwDataUnitOccupancyVSS[2] @[stealNW_TQ.scala 92:48]
    io.ntwDataUnitOccupancyVSS[3] <= stealNet.io.ntwDataUnitOccupancyVSS[3] @[stealNW_TQ.scala 92:48]
    io.ntwDataUnitOccupancyVSS[4] <= stealNet.io.ntwDataUnitOccupancyVSS[4] @[stealNW_TQ.scala 92:48]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, count : UInt<3>}

    cmem ram : { data : UInt<64>, strb : UInt<8>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module virtualStealServer :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip axi_mgmt : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}, read_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip read_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, write_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip ntwDataUnitOccupancy : UInt<1>}

    wire saxil : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[RegisterBlock.scala 60:19]
    node _mask_T = asUInt(asSInt(UInt<6>("h3f"))) @[RegisterBlock.scala 159:36]
    node mask = xor(_mask_T, UInt<3>("h7")) @[RegisterBlock.scala 159:39]
    inst rdReq__deq of Queue @[Decoupled.scala 377:21]
    rdReq__deq.clock <= clock
    rdReq__deq.reset <= reset
    rdReq__deq.io.enq.valid <= saxil.ar.valid @[Decoupled.scala 379:22]
    rdReq__deq.io.enq.bits.prot <= saxil.ar.bits.prot @[Decoupled.scala 380:21]
    rdReq__deq.io.enq.bits.addr <= saxil.ar.bits.addr @[Decoupled.scala 380:21]
    saxil.ar.ready <= rdReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire rdReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    rdReq_.bits <= rdReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    rdReq_.valid <= rdReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    rdReq__deq.io.deq.ready <= rdReq_.ready @[Decoupled.scala 420:15]
    inst wrReq__deq of Queue_1 @[Decoupled.scala 377:21]
    wrReq__deq.clock <= clock
    wrReq__deq.reset <= reset
    wrReq__deq.io.enq.valid <= saxil.aw.valid @[Decoupled.scala 379:22]
    wrReq__deq.io.enq.bits.prot <= saxil.aw.bits.prot @[Decoupled.scala 380:21]
    wrReq__deq.io.enq.bits.addr <= saxil.aw.bits.addr @[Decoupled.scala 380:21]
    saxil.aw.ready <= wrReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    wrReq_.bits <= wrReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReq_.valid <= wrReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReq__deq.io.deq.ready <= wrReq_.ready @[Decoupled.scala 420:15]
    inst wrReqData__deq of Queue_2 @[Decoupled.scala 377:21]
    wrReqData__deq.clock <= clock
    wrReqData__deq.reset <= reset
    wrReqData__deq.io.enq.valid <= saxil.w.valid @[Decoupled.scala 379:22]
    wrReqData__deq.io.enq.bits.strb <= saxil.w.bits.strb @[Decoupled.scala 380:21]
    wrReqData__deq.io.enq.bits.data <= saxil.w.bits.data @[Decoupled.scala 380:21]
    saxil.w.ready <= wrReqData__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReqData_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}} @[Decoupled.scala 417:19]
    wrReqData_.bits <= wrReqData__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReqData_.valid <= wrReqData__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReqData__deq.io.deq.ready <= wrReqData_.ready @[Decoupled.scala 420:15]
    rdReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.r.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.r.bits.resp is invalid @[Decoupled.scala 75:19]
    saxil.r.bits.data is invalid @[Decoupled.scala 75:19]
    wrReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    wrReqData_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.b.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.b.bits.resp is invalid @[Decoupled.scala 75:19]
    node rdReq = and(rdReq_.valid, saxil.r.ready) @[RegisterBlock.scala 210:44]
    node rdAddr = and(rdReq_.bits.addr, mask) @[RegisterBlock.scala 214:48]
    node _wrReq_T = and(wrReq_.valid, wrReqData_.valid) @[RegisterBlock.scala 241:43]
    node wrReq = and(_wrReq_T, saxil.b.ready) @[RegisterBlock.scala 241:63]
    node wrAddr = and(wrReq_.bits.addr, mask) @[RegisterBlock.scala 243:48]
    io.axi_mgmt.BRESP <= saxil.b.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.BVALID <= saxil.b.valid @[virtualStealServer.scala 58:20]
    saxil.b.ready <= io.axi_mgmt.BREADY @[virtualStealServer.scala 58:20]
    saxil.w.bits.strb <= io.axi_mgmt.WSTRB @[virtualStealServer.scala 58:20]
    saxil.w.bits.data <= io.axi_mgmt.WDATA @[virtualStealServer.scala 58:20]
    saxil.w.valid <= io.axi_mgmt.WVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.WREADY <= saxil.w.ready @[virtualStealServer.scala 58:20]
    saxil.aw.bits.prot <= io.axi_mgmt.AWPROT @[virtualStealServer.scala 58:20]
    saxil.aw.bits.addr <= io.axi_mgmt.AWADDR @[virtualStealServer.scala 58:20]
    saxil.aw.valid <= io.axi_mgmt.AWVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.AWREADY <= saxil.aw.ready @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RRESP <= saxil.r.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RDATA <= saxil.r.bits.data @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RVALID <= saxil.r.valid @[virtualStealServer.scala 58:20]
    saxil.r.ready <= io.axi_mgmt.RREADY @[virtualStealServer.scala 58:20]
    saxil.ar.bits.prot <= io.axi_mgmt.ARPROT @[virtualStealServer.scala 58:20]
    saxil.ar.bits.addr <= io.axi_mgmt.ARADDR @[virtualStealServer.scala 58:20]
    saxil.ar.valid <= io.axi_mgmt.ARVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.ARREADY <= saxil.ar.ready @[virtualStealServer.scala 58:20]
    reg rAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 61:44]
    reg rPause : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 62:44]
    reg procInterrupt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 63:44]
    reg maxLength : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 64:44]
    reg stateReg : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 65:44]
    wire currLen : UInt<64> @[virtualStealServer.scala 66:41]
    reg contentionCounter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 67:44]
    reg contentionThresh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h14")) @[virtualStealServer.scala 68:44]
    reg networkCongested : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 69:44]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 70:44]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 71:44]
    reg delta : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 72:44]
    reg fifoTailReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 73:44]
    reg fifoHeadReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 74:44]
    reg popOrPush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[virtualStealServer.scala 75:44]
    reg addrShift : UInt, clock with :
      reset => (reset, UInt<2>("h2")) @[virtualStealServer.scala 76:44]
    node _T = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[virtualStealServer.scala 89:10]
    node _T_1 = and(_T, io.ntwDataUnitOccupancy) @[virtualStealServer.scala 89:52]
    node _T_2 = neq(contentionCounter, UInt<5>("h18")) @[virtualStealServer.scala 91:31]
    node _T_3 = and(_T_1, _T_2) @[virtualStealServer.scala 91:10]
    when _T_3 : @[virtualStealServer.scala 91:57]
      node _contentionCounter_T = add(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 92:48]
      node _contentionCounter_T_1 = tail(_contentionCounter_T, 1) @[virtualStealServer.scala 92:48]
      contentionCounter <= _contentionCounter_T_1 @[virtualStealServer.scala 92:27]
    else :
      node _T_4 = neq(contentionCounter, UInt<1>("h0")) @[virtualStealServer.scala 94:36]
      node _T_5 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_4) @[virtualStealServer.scala 93:56]
      node _T_6 = eq(io.ntwDataUnitOccupancy, UInt<1>("h0")) @[virtualStealServer.scala 95:20]
      node _T_7 = and(_T_5, _T_6) @[virtualStealServer.scala 95:17]
      when _T_7 : @[virtualStealServer.scala 95:46]
        node _contentionCounter_T_2 = sub(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 96:48]
        node _contentionCounter_T_3 = tail(_contentionCounter_T_2, 1) @[virtualStealServer.scala 96:48]
        contentionCounter <= _contentionCounter_T_3 @[virtualStealServer.scala 96:27]
      else :
        contentionCounter <= contentionCounter @[virtualStealServer.scala 98:27]
    node _T_8 = add(contentionThresh, delta) @[virtualStealServer.scala 102:49]
    node _T_9 = tail(_T_8, 1) @[virtualStealServer.scala 102:49]
    node _T_10 = geq(contentionCounter, _T_9) @[virtualStealServer.scala 102:28]
    when _T_10 : @[virtualStealServer.scala 102:58]
      networkCongested <= UInt<1>("h1") @[virtualStealServer.scala 103:26]
    else :
      node _T_11 = sub(contentionThresh, delta) @[virtualStealServer.scala 104:54]
      node _T_12 = tail(_T_11, 1) @[virtualStealServer.scala 104:54]
      node _T_13 = lt(contentionCounter, _T_12) @[virtualStealServer.scala 104:34]
      when _T_13 : @[virtualStealServer.scala 104:63]
        networkCongested <= UInt<1>("h0") @[virtualStealServer.scala 105:26]
      else :
        networkCongested <= networkCongested @[virtualStealServer.scala 107:26]
    node _T_14 = eq(stateReg, UInt<1>("h0")) @[virtualStealServer.scala 112:19]
    when _T_14 : @[virtualStealServer.scala 112:34]
      node _T_15 = eq(currLen, maxLength) @[virtualStealServer.scala 113:23]
      node _T_16 = and(_T_15, networkCongested) @[virtualStealServer.scala 113:37]
      node _T_17 = eq(maxLength, UInt<1>("h0")) @[virtualStealServer.scala 113:71]
      node _T_18 = or(_T_16, _T_17) @[virtualStealServer.scala 113:58]
      when _T_18 : @[virtualStealServer.scala 113:79]
        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 114:22]
        rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 115:22]
      else :
        when networkCongested : @[virtualStealServer.scala 116:37]
          stateReg <= UInt<2>("h2") @[virtualStealServer.scala 117:22]
        else :
          node _T_19 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 118:20]
          node _T_20 = neq(currLen, UInt<1>("h0")) @[virtualStealServer.scala 118:49]
          node _T_21 = and(_T_19, _T_20) @[virtualStealServer.scala 118:38]
          when _T_21 : @[virtualStealServer.scala 118:57]
            stateReg <= UInt<3>("h6") @[virtualStealServer.scala 119:22]
          else :
            node _T_22 = neq(procInterrupt, UInt<1>("h0")) @[virtualStealServer.scala 120:34]
            when _T_22 : @[virtualStealServer.scala 120:42]
              stateReg <= UInt<4>("ha") @[virtualStealServer.scala 121:22]
              rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 122:22]
            else :
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 124:22]
    else :
      node _T_23 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 126:25]
      when _T_23 : @[virtualStealServer.scala 126:46]
        when io.connNetwork.data.availableTask.valid : @[virtualStealServer.scala 127:54]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 128:22]
        else :
          node _T_24 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 129:20]
          when _T_24 : @[virtualStealServer.scala 129:38]
            stateReg <= UInt<1>("h0") @[virtualStealServer.scala 130:22]
          else :
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 132:22]
      else :
        node _T_25 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 134:25]
        when _T_25 : @[virtualStealServer.scala 134:51]
          when io.write_address.ready : @[virtualStealServer.scala 135:37]
            stateReg <= UInt<2>("h3") @[virtualStealServer.scala 136:22]
          else :
            node _T_26 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 137:20]
            when _T_26 : @[virtualStealServer.scala 137:38]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 138:22]
            else :
              stateReg <= UInt<3>("h4") @[virtualStealServer.scala 140:22]
        else :
          node _T_27 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 142:25]
          when _T_27 : @[virtualStealServer.scala 142:44]
            when io.write_data.ready : @[virtualStealServer.scala 143:34]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 144:22]
              popOrPush <= UInt<1>("h0") @[virtualStealServer.scala 145:23]
              node _T_28 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 146:42]
              node _T_29 = tail(_T_28, 1) @[virtualStealServer.scala 146:42]
              node _T_30 = lt(fifoTailReg, _T_29) @[virtualStealServer.scala 146:30]
              when _T_30 : @[virtualStealServer.scala 146:48]
                node _fifoTailReg_T = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 147:44]
                node _fifoTailReg_T_1 = tail(_fifoTailReg_T, 1) @[virtualStealServer.scala 147:44]
                fifoTailReg <= _fifoTailReg_T_1 @[virtualStealServer.scala 147:29]
              else :
                fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 149:29]
            else :
              stateReg <= UInt<2>("h3") @[virtualStealServer.scala 152:22]
          else :
            node _T_31 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 154:25]
            when _T_31 : @[virtualStealServer.scala 154:50]
              when io.read_address.ready : @[virtualStealServer.scala 155:36]
                stateReg <= UInt<3>("h5") @[virtualStealServer.scala 156:22]
              else :
                when networkCongested : @[virtualStealServer.scala 157:37]
                  stateReg <= UInt<1>("h0") @[virtualStealServer.scala 158:22]
                else :
                  stateReg <= UInt<3>("h6") @[virtualStealServer.scala 160:22]
            else :
              node _T_32 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 162:25]
              when _T_32 : @[virtualStealServer.scala 162:43]
                when io.read_data.valid : @[virtualStealServer.scala 163:33]
                  stateReg <= UInt<4>("h8") @[virtualStealServer.scala 164:22]
                  popOrPush <= UInt<1>("h1") @[virtualStealServer.scala 165:23]
                  node _T_33 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 166:42]
                  node _T_34 = tail(_T_33, 1) @[virtualStealServer.scala 166:42]
                  node _T_35 = lt(fifoHeadReg, _T_34) @[virtualStealServer.scala 166:30]
                  when _T_35 : @[virtualStealServer.scala 166:48]
                    node _fifoHeadReg_T = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 167:44]
                    node _fifoHeadReg_T_1 = tail(_fifoHeadReg_T, 1) @[virtualStealServer.scala 167:44]
                    fifoHeadReg <= _fifoHeadReg_T_1 @[virtualStealServer.scala 167:29]
                  else :
                    fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 169:29]
                else :
                  stateReg <= UInt<3>("h5") @[virtualStealServer.scala 172:22]
              else :
                node _T_36 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 174:25]
                when _T_36 : @[virtualStealServer.scala 174:48]
                  when io.connNetwork.data.qOutTask.ready : @[virtualStealServer.scala 175:49]
                    stateReg <= UInt<1>("h0") @[virtualStealServer.scala 176:22]
                  else :
                    stateReg <= UInt<3>("h7") @[virtualStealServer.scala 178:22]
                else :
                  node _T_37 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 180:25]
                  when _T_37 : @[virtualStealServer.scala 180:54]
                    when io.connNetwork.ctrl.serveStealReq.ready : @[virtualStealServer.scala 181:54]
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 182:22]
                    else :
                      when networkCongested : @[virtualStealServer.scala 186:39]
                        stolenTaskReg <= giveTaskReg @[virtualStealServer.scala 187:27]
                        stateReg <= UInt<3>("h4") @[virtualStealServer.scala 188:22]
                      else :
                        stateReg <= UInt<4>("h8") @[virtualStealServer.scala 192:22]
                  else :
                    node _T_38 = eq(stateReg, UInt<4>("h9")) @[virtualStealServer.scala 194:25]
                    when _T_38 : @[virtualStealServer.scala 194:46]
                      node _T_39 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 195:21]
                      when _T_39 : @[virtualStealServer.scala 195:33]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 196:22]
                      else :
                        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 198:22]
                    else :
                      node _T_40 = eq(stateReg, UInt<4>("ha")) @[virtualStealServer.scala 200:25]
                      when _T_40 : @[virtualStealServer.scala 200:53]
                        node _T_41 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 201:21]
                        when _T_41 : @[virtualStealServer.scala 201:33]
                          stateReg <= UInt<1>("h0") @[virtualStealServer.scala 202:22]
                        else :
                          stateReg <= UInt<4>("ha") @[virtualStealServer.scala 204:22]
                      else :
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 207:18]
    io.connNetwork.data.qOutTask.bits <= giveTaskReg @[virtualStealServer.scala 210:45]
    io.write_data.bits <= stolenTaskReg @[virtualStealServer.scala 211:45]
    io.read_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 215:45]
    io.read_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 216:45]
    io.read_data.ready <= UInt<1>("h0") @[virtualStealServer.scala 217:45]
    io.write_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 218:45]
    io.write_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 219:45]
    io.write_data.valid <= UInt<1>("h0") @[virtualStealServer.scala 220:45]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[virtualStealServer.scala 222:45]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[virtualStealServer.scala 223:45]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 225:45]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 226:45]
    node _T_42 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 230:19]
    when _T_42 : @[virtualStealServer.scala 230:40]
      stolenTaskReg <= io.connNetwork.data.availableTask.bits @[virtualStealServer.scala 231:49]
      io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[virtualStealServer.scala 232:49]
    else :
      node _T_43 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 233:25]
      when _T_43 : @[virtualStealServer.scala 233:51]
        io.write_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 234:49]
        node _io_write_address_bits_T = dshl(fifoTailReg, addrShift) @[virtualStealServer.scala 235:65]
        node _io_write_address_bits_T_1 = add(_io_write_address_bits_T, rAddr) @[virtualStealServer.scala 235:79]
        node _io_write_address_bits_T_2 = tail(_io_write_address_bits_T_1, 1) @[virtualStealServer.scala 235:79]
        io.write_address.bits <= _io_write_address_bits_T_2 @[virtualStealServer.scala 235:49]
      else :
        node _T_44 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 236:25]
        when _T_44 : @[virtualStealServer.scala 236:44]
          io.write_data.valid <= UInt<1>("h1") @[virtualStealServer.scala 237:49]
        else :
          node _T_45 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 238:25]
          when _T_45 : @[virtualStealServer.scala 238:50]
            io.read_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 239:49]
            node _io_read_address_bits_T = dshl(fifoHeadReg, addrShift) @[virtualStealServer.scala 240:65]
            node _io_read_address_bits_T_1 = add(_io_read_address_bits_T, rAddr) @[virtualStealServer.scala 240:79]
            node _io_read_address_bits_T_2 = tail(_io_read_address_bits_T_1, 1) @[virtualStealServer.scala 240:79]
            io.read_address.bits <= _io_read_address_bits_T_2 @[virtualStealServer.scala 240:49]
          else :
            node _T_46 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 241:25]
            when _T_46 : @[virtualStealServer.scala 241:43]
              io.read_data.ready <= UInt<1>("h1") @[virtualStealServer.scala 242:49]
              giveTaskReg <= io.read_data.bits @[virtualStealServer.scala 243:49]
            else :
              node _T_47 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 244:25]
              when _T_47 : @[virtualStealServer.scala 244:48]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[virtualStealServer.scala 245:49]
              else :
                node _T_48 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 246:25]
                when _T_48 : @[virtualStealServer.scala 246:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[virtualStealServer.scala 247:49]
    reg lengthHistroy : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 251:32]
    node _T_49 = gt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 253:22]
    when _T_49 : @[virtualStealServer.scala 253:36]
      node _currLen_T = sub(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 254:32]
      node _currLen_T_1 = tail(_currLen_T, 1) @[virtualStealServer.scala 254:32]
      currLen <= _currLen_T_1 @[virtualStealServer.scala 254:17]
      lengthHistroy <= currLen @[virtualStealServer.scala 255:23]
    else :
      node _T_50 = lt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 256:28]
      when _T_50 : @[virtualStealServer.scala 256:42]
        node _currLen_T_2 = sub(maxLength, fifoHeadReg) @[virtualStealServer.scala 257:30]
        node _currLen_T_3 = tail(_currLen_T_2, 1) @[virtualStealServer.scala 257:30]
        node _currLen_T_4 = add(_currLen_T_3, fifoTailReg) @[virtualStealServer.scala 257:44]
        node _currLen_T_5 = tail(_currLen_T_4, 1) @[virtualStealServer.scala 257:44]
        currLen <= _currLen_T_5 @[virtualStealServer.scala 257:17]
        lengthHistroy <= currLen @[virtualStealServer.scala 258:23]
      else :
        lengthHistroy <= lengthHistroy @[virtualStealServer.scala 260:23]
        when popOrPush : @[virtualStealServer.scala 261:24]
          currLen <= UInt<1>("h0") @[virtualStealServer.scala 262:21]
        else :
          node _currLen_T_6 = add(lengthHistroy, UInt<1>("h1")) @[virtualStealServer.scala 264:38]
          node _currLen_T_7 = tail(_currLen_T_6, 1) @[virtualStealServer.scala 264:38]
          currLen <= _currLen_T_7 @[virtualStealServer.scala 264:21]
    when rdReq : @[virtualStealServer.scala 269:27]
      wire data : UInt<64> @[RegisterBlock.scala 217:20]
      node _data_T = asUInt(asSInt(UInt<64>("hffffffffffffffff"))) @[RegisterBlock.scala 220:29]
      data <= _data_T @[RegisterBlock.scala 220:10]
      node _T_51 = eq(UInt<1>("h0"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_51 : @[RegisterBlock.scala 224:38]
        data <= rPause @[RegisterBlock.scala 225:16]
      node _T_52 = eq(UInt<4>("h8"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_52 : @[RegisterBlock.scala 224:38]
        data <= rAddr @[RegisterBlock.scala 225:16]
      node _T_53 = eq(UInt<5>("h10"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_53 : @[RegisterBlock.scala 224:38]
        data <= maxLength @[RegisterBlock.scala 225:16]
      node _T_54 = eq(UInt<5>("h18"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_54 : @[RegisterBlock.scala 224:38]
        data <= fifoTailReg @[RegisterBlock.scala 225:16]
      node _T_55 = eq(UInt<6>("h20"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_55 : @[RegisterBlock.scala 224:38]
        data <= fifoHeadReg @[RegisterBlock.scala 225:16]
      node _T_56 = eq(UInt<6>("h28"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_56 : @[RegisterBlock.scala 224:38]
        data <= procInterrupt @[RegisterBlock.scala 225:16]
      node _T_57 = asUInt(reset) @[RegisterBlock.scala 182:11]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
      when _T_58 : @[RegisterBlock.scala 182:11]
        node _T_59 = eq(rdReq, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
        when _T_59 : @[RegisterBlock.scala 182:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:182 assert(rdReq)\n") : printf @[RegisterBlock.scala 182:11]
        assert(clock, rdReq, UInt<1>("h1"), "") : assert @[RegisterBlock.scala 182:11]
      rdReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp : { data : UInt<64>, resp : UInt<2>} @[RegisterBlock.scala 186:20]
      resp.data <= data @[RegisterBlock.scala 187:15]
      resp.resp <= UInt<2>("h0") @[RegisterBlock.scala 188:15]
      saxil.r.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.r.bits <= resp @[Decoupled.scala 66:19]
    when wrReq : @[virtualStealServer.scala 273:27]
      node _T_60 = eq(UInt<1>("h0"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_60 : @[RegisterBlock.scala 252:38]
        wire _rPause_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rPause_WIRE <= rPause @[RegisterBlock.scala 118:51]
        node _rPause_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rPause_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rPause_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rPause_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rPause_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rPause_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rPause_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rPause_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rPause_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rPause_byte_original = bits(_rPause_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rPause_T_8 = mux(_rPause_T, rPause_byte_wdata, rPause_byte_original) @[Interface.scala 259:14]
        node rPause_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rPause_byte_original_1 = bits(_rPause_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rPause_T_9 = mux(_rPause_T_1, rPause_byte_wdata_1, rPause_byte_original_1) @[Interface.scala 259:14]
        node rPause_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rPause_byte_original_2 = bits(_rPause_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rPause_T_10 = mux(_rPause_T_2, rPause_byte_wdata_2, rPause_byte_original_2) @[Interface.scala 259:14]
        node rPause_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rPause_byte_original_3 = bits(_rPause_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rPause_T_11 = mux(_rPause_T_3, rPause_byte_wdata_3, rPause_byte_original_3) @[Interface.scala 259:14]
        node rPause_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rPause_byte_original_4 = bits(_rPause_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rPause_T_12 = mux(_rPause_T_4, rPause_byte_wdata_4, rPause_byte_original_4) @[Interface.scala 259:14]
        node rPause_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rPause_byte_original_5 = bits(_rPause_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rPause_T_13 = mux(_rPause_T_5, rPause_byte_wdata_5, rPause_byte_original_5) @[Interface.scala 259:14]
        node rPause_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rPause_byte_original_6 = bits(_rPause_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rPause_T_14 = mux(_rPause_T_6, rPause_byte_wdata_6, rPause_byte_original_6) @[Interface.scala 259:14]
        node rPause_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rPause_byte_original_7 = bits(_rPause_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rPause_T_15 = mux(_rPause_T_7, rPause_byte_wdata_7, rPause_byte_original_7) @[Interface.scala 259:14]
        wire _rPause_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rPause_WIRE_1[0] <= _rPause_T_8 @[Interface.scala 254:12]
        _rPause_WIRE_1[1] <= _rPause_T_9 @[Interface.scala 254:12]
        _rPause_WIRE_1[2] <= _rPause_T_10 @[Interface.scala 254:12]
        _rPause_WIRE_1[3] <= _rPause_T_11 @[Interface.scala 254:12]
        _rPause_WIRE_1[4] <= _rPause_T_12 @[Interface.scala 254:12]
        _rPause_WIRE_1[5] <= _rPause_T_13 @[Interface.scala 254:12]
        _rPause_WIRE_1[6] <= _rPause_T_14 @[Interface.scala 254:12]
        _rPause_WIRE_1[7] <= _rPause_T_15 @[Interface.scala 254:12]
        node rPause_lo_lo = cat(_rPause_WIRE_1[1], _rPause_WIRE_1[0]) @[Interface.scala 262:7]
        node rPause_lo_hi = cat(_rPause_WIRE_1[3], _rPause_WIRE_1[2]) @[Interface.scala 262:7]
        node rPause_lo = cat(rPause_lo_hi, rPause_lo_lo) @[Interface.scala 262:7]
        node rPause_hi_lo = cat(_rPause_WIRE_1[5], _rPause_WIRE_1[4]) @[Interface.scala 262:7]
        node rPause_hi_hi = cat(_rPause_WIRE_1[7], _rPause_WIRE_1[6]) @[Interface.scala 262:7]
        node rPause_hi = cat(rPause_hi_hi, rPause_hi_lo) @[Interface.scala 262:7]
        node _rPause_T_16 = cat(rPause_hi, rPause_lo) @[Interface.scala 262:7]
        wire _rPause_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rPause_WIRE_2 <= _rPause_T_16 @[RegisterBlock.scala 118:82]
        rPause <= _rPause_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_61 = eq(UInt<4>("h8"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_61 : @[RegisterBlock.scala 252:38]
        wire _rAddr_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rAddr_WIRE <= rAddr @[RegisterBlock.scala 118:51]
        node _rAddr_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rAddr_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rAddr_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rAddr_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rAddr_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rAddr_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rAddr_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rAddr_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rAddr_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rAddr_byte_original = bits(_rAddr_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rAddr_T_8 = mux(_rAddr_T, rAddr_byte_wdata, rAddr_byte_original) @[Interface.scala 259:14]
        node rAddr_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rAddr_byte_original_1 = bits(_rAddr_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rAddr_T_9 = mux(_rAddr_T_1, rAddr_byte_wdata_1, rAddr_byte_original_1) @[Interface.scala 259:14]
        node rAddr_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rAddr_byte_original_2 = bits(_rAddr_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rAddr_T_10 = mux(_rAddr_T_2, rAddr_byte_wdata_2, rAddr_byte_original_2) @[Interface.scala 259:14]
        node rAddr_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rAddr_byte_original_3 = bits(_rAddr_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rAddr_T_11 = mux(_rAddr_T_3, rAddr_byte_wdata_3, rAddr_byte_original_3) @[Interface.scala 259:14]
        node rAddr_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rAddr_byte_original_4 = bits(_rAddr_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rAddr_T_12 = mux(_rAddr_T_4, rAddr_byte_wdata_4, rAddr_byte_original_4) @[Interface.scala 259:14]
        node rAddr_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rAddr_byte_original_5 = bits(_rAddr_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rAddr_T_13 = mux(_rAddr_T_5, rAddr_byte_wdata_5, rAddr_byte_original_5) @[Interface.scala 259:14]
        node rAddr_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rAddr_byte_original_6 = bits(_rAddr_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rAddr_T_14 = mux(_rAddr_T_6, rAddr_byte_wdata_6, rAddr_byte_original_6) @[Interface.scala 259:14]
        node rAddr_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rAddr_byte_original_7 = bits(_rAddr_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rAddr_T_15 = mux(_rAddr_T_7, rAddr_byte_wdata_7, rAddr_byte_original_7) @[Interface.scala 259:14]
        wire _rAddr_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rAddr_WIRE_1[0] <= _rAddr_T_8 @[Interface.scala 254:12]
        _rAddr_WIRE_1[1] <= _rAddr_T_9 @[Interface.scala 254:12]
        _rAddr_WIRE_1[2] <= _rAddr_T_10 @[Interface.scala 254:12]
        _rAddr_WIRE_1[3] <= _rAddr_T_11 @[Interface.scala 254:12]
        _rAddr_WIRE_1[4] <= _rAddr_T_12 @[Interface.scala 254:12]
        _rAddr_WIRE_1[5] <= _rAddr_T_13 @[Interface.scala 254:12]
        _rAddr_WIRE_1[6] <= _rAddr_T_14 @[Interface.scala 254:12]
        _rAddr_WIRE_1[7] <= _rAddr_T_15 @[Interface.scala 254:12]
        node rAddr_lo_lo = cat(_rAddr_WIRE_1[1], _rAddr_WIRE_1[0]) @[Interface.scala 262:7]
        node rAddr_lo_hi = cat(_rAddr_WIRE_1[3], _rAddr_WIRE_1[2]) @[Interface.scala 262:7]
        node rAddr_lo = cat(rAddr_lo_hi, rAddr_lo_lo) @[Interface.scala 262:7]
        node rAddr_hi_lo = cat(_rAddr_WIRE_1[5], _rAddr_WIRE_1[4]) @[Interface.scala 262:7]
        node rAddr_hi_hi = cat(_rAddr_WIRE_1[7], _rAddr_WIRE_1[6]) @[Interface.scala 262:7]
        node rAddr_hi = cat(rAddr_hi_hi, rAddr_hi_lo) @[Interface.scala 262:7]
        node _rAddr_T_16 = cat(rAddr_hi, rAddr_lo) @[Interface.scala 262:7]
        wire _rAddr_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rAddr_WIRE_2 <= _rAddr_T_16 @[RegisterBlock.scala 118:82]
        rAddr <= _rAddr_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_62 = eq(UInt<5>("h10"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_62 : @[RegisterBlock.scala 252:38]
        wire _maxLength_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _maxLength_WIRE <= maxLength @[RegisterBlock.scala 118:51]
        node _maxLength_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _maxLength_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _maxLength_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _maxLength_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _maxLength_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _maxLength_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _maxLength_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _maxLength_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node maxLength_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node maxLength_byte_original = bits(_maxLength_WIRE, 7, 0) @[Interface.scala 258:39]
        node _maxLength_T_8 = mux(_maxLength_T, maxLength_byte_wdata, maxLength_byte_original) @[Interface.scala 259:14]
        node maxLength_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node maxLength_byte_original_1 = bits(_maxLength_WIRE, 15, 8) @[Interface.scala 258:39]
        node _maxLength_T_9 = mux(_maxLength_T_1, maxLength_byte_wdata_1, maxLength_byte_original_1) @[Interface.scala 259:14]
        node maxLength_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node maxLength_byte_original_2 = bits(_maxLength_WIRE, 23, 16) @[Interface.scala 258:39]
        node _maxLength_T_10 = mux(_maxLength_T_2, maxLength_byte_wdata_2, maxLength_byte_original_2) @[Interface.scala 259:14]
        node maxLength_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node maxLength_byte_original_3 = bits(_maxLength_WIRE, 31, 24) @[Interface.scala 258:39]
        node _maxLength_T_11 = mux(_maxLength_T_3, maxLength_byte_wdata_3, maxLength_byte_original_3) @[Interface.scala 259:14]
        node maxLength_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node maxLength_byte_original_4 = bits(_maxLength_WIRE, 39, 32) @[Interface.scala 258:39]
        node _maxLength_T_12 = mux(_maxLength_T_4, maxLength_byte_wdata_4, maxLength_byte_original_4) @[Interface.scala 259:14]
        node maxLength_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node maxLength_byte_original_5 = bits(_maxLength_WIRE, 47, 40) @[Interface.scala 258:39]
        node _maxLength_T_13 = mux(_maxLength_T_5, maxLength_byte_wdata_5, maxLength_byte_original_5) @[Interface.scala 259:14]
        node maxLength_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node maxLength_byte_original_6 = bits(_maxLength_WIRE, 55, 48) @[Interface.scala 258:39]
        node _maxLength_T_14 = mux(_maxLength_T_6, maxLength_byte_wdata_6, maxLength_byte_original_6) @[Interface.scala 259:14]
        node maxLength_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node maxLength_byte_original_7 = bits(_maxLength_WIRE, 63, 56) @[Interface.scala 258:39]
        node _maxLength_T_15 = mux(_maxLength_T_7, maxLength_byte_wdata_7, maxLength_byte_original_7) @[Interface.scala 259:14]
        wire _maxLength_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _maxLength_WIRE_1[0] <= _maxLength_T_8 @[Interface.scala 254:12]
        _maxLength_WIRE_1[1] <= _maxLength_T_9 @[Interface.scala 254:12]
        _maxLength_WIRE_1[2] <= _maxLength_T_10 @[Interface.scala 254:12]
        _maxLength_WIRE_1[3] <= _maxLength_T_11 @[Interface.scala 254:12]
        _maxLength_WIRE_1[4] <= _maxLength_T_12 @[Interface.scala 254:12]
        _maxLength_WIRE_1[5] <= _maxLength_T_13 @[Interface.scala 254:12]
        _maxLength_WIRE_1[6] <= _maxLength_T_14 @[Interface.scala 254:12]
        _maxLength_WIRE_1[7] <= _maxLength_T_15 @[Interface.scala 254:12]
        node maxLength_lo_lo = cat(_maxLength_WIRE_1[1], _maxLength_WIRE_1[0]) @[Interface.scala 262:7]
        node maxLength_lo_hi = cat(_maxLength_WIRE_1[3], _maxLength_WIRE_1[2]) @[Interface.scala 262:7]
        node maxLength_lo = cat(maxLength_lo_hi, maxLength_lo_lo) @[Interface.scala 262:7]
        node maxLength_hi_lo = cat(_maxLength_WIRE_1[5], _maxLength_WIRE_1[4]) @[Interface.scala 262:7]
        node maxLength_hi_hi = cat(_maxLength_WIRE_1[7], _maxLength_WIRE_1[6]) @[Interface.scala 262:7]
        node maxLength_hi = cat(maxLength_hi_hi, maxLength_hi_lo) @[Interface.scala 262:7]
        node _maxLength_T_16 = cat(maxLength_hi, maxLength_lo) @[Interface.scala 262:7]
        wire _maxLength_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _maxLength_WIRE_2 <= _maxLength_T_16 @[RegisterBlock.scala 118:82]
        maxLength <= _maxLength_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_63 = eq(UInt<5>("h18"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_63 : @[RegisterBlock.scala 252:38]
        wire _fifoTailReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoTailReg_WIRE <= fifoTailReg @[RegisterBlock.scala 118:51]
        node _fifoTailReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoTailReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoTailReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoTailReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoTailReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoTailReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoTailReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoTailReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoTailReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoTailReg_byte_original = bits(_fifoTailReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoTailReg_T_10 = mux(_fifoTailReg_T_2, fifoTailReg_byte_wdata, fifoTailReg_byte_original) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_1 = bits(_fifoTailReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoTailReg_T_11 = mux(_fifoTailReg_T_3, fifoTailReg_byte_wdata_1, fifoTailReg_byte_original_1) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_2 = bits(_fifoTailReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoTailReg_T_12 = mux(_fifoTailReg_T_4, fifoTailReg_byte_wdata_2, fifoTailReg_byte_original_2) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_3 = bits(_fifoTailReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoTailReg_T_13 = mux(_fifoTailReg_T_5, fifoTailReg_byte_wdata_3, fifoTailReg_byte_original_3) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_4 = bits(_fifoTailReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoTailReg_T_14 = mux(_fifoTailReg_T_6, fifoTailReg_byte_wdata_4, fifoTailReg_byte_original_4) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_5 = bits(_fifoTailReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoTailReg_T_15 = mux(_fifoTailReg_T_7, fifoTailReg_byte_wdata_5, fifoTailReg_byte_original_5) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_6 = bits(_fifoTailReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoTailReg_T_16 = mux(_fifoTailReg_T_8, fifoTailReg_byte_wdata_6, fifoTailReg_byte_original_6) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_7 = bits(_fifoTailReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoTailReg_T_17 = mux(_fifoTailReg_T_9, fifoTailReg_byte_wdata_7, fifoTailReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoTailReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[0] <= _fifoTailReg_T_10 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[1] <= _fifoTailReg_T_11 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[2] <= _fifoTailReg_T_12 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[3] <= _fifoTailReg_T_13 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[4] <= _fifoTailReg_T_14 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[5] <= _fifoTailReg_T_15 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[6] <= _fifoTailReg_T_16 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[7] <= _fifoTailReg_T_17 @[Interface.scala 254:12]
        node fifoTailReg_lo_lo = cat(_fifoTailReg_WIRE_1[1], _fifoTailReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoTailReg_lo_hi = cat(_fifoTailReg_WIRE_1[3], _fifoTailReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoTailReg_lo = cat(fifoTailReg_lo_hi, fifoTailReg_lo_lo) @[Interface.scala 262:7]
        node fifoTailReg_hi_lo = cat(_fifoTailReg_WIRE_1[5], _fifoTailReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoTailReg_hi_hi = cat(_fifoTailReg_WIRE_1[7], _fifoTailReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoTailReg_hi = cat(fifoTailReg_hi_hi, fifoTailReg_hi_lo) @[Interface.scala 262:7]
        node _fifoTailReg_T_18 = cat(fifoTailReg_hi, fifoTailReg_lo) @[Interface.scala 262:7]
        wire _fifoTailReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoTailReg_WIRE_2 <= _fifoTailReg_T_18 @[RegisterBlock.scala 118:82]
        fifoTailReg <= _fifoTailReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_64 = eq(UInt<6>("h20"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_64 : @[RegisterBlock.scala 252:38]
        wire _fifoHeadReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoHeadReg_WIRE <= fifoHeadReg @[RegisterBlock.scala 118:51]
        node _fifoHeadReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoHeadReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoHeadReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoHeadReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoHeadReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoHeadReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoHeadReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoHeadReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoHeadReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original = bits(_fifoHeadReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoHeadReg_T_10 = mux(_fifoHeadReg_T_2, fifoHeadReg_byte_wdata, fifoHeadReg_byte_original) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_1 = bits(_fifoHeadReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoHeadReg_T_11 = mux(_fifoHeadReg_T_3, fifoHeadReg_byte_wdata_1, fifoHeadReg_byte_original_1) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_2 = bits(_fifoHeadReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoHeadReg_T_12 = mux(_fifoHeadReg_T_4, fifoHeadReg_byte_wdata_2, fifoHeadReg_byte_original_2) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_3 = bits(_fifoHeadReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoHeadReg_T_13 = mux(_fifoHeadReg_T_5, fifoHeadReg_byte_wdata_3, fifoHeadReg_byte_original_3) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_4 = bits(_fifoHeadReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoHeadReg_T_14 = mux(_fifoHeadReg_T_6, fifoHeadReg_byte_wdata_4, fifoHeadReg_byte_original_4) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_5 = bits(_fifoHeadReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoHeadReg_T_15 = mux(_fifoHeadReg_T_7, fifoHeadReg_byte_wdata_5, fifoHeadReg_byte_original_5) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_6 = bits(_fifoHeadReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoHeadReg_T_16 = mux(_fifoHeadReg_T_8, fifoHeadReg_byte_wdata_6, fifoHeadReg_byte_original_6) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_7 = bits(_fifoHeadReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoHeadReg_T_17 = mux(_fifoHeadReg_T_9, fifoHeadReg_byte_wdata_7, fifoHeadReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoHeadReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[0] <= _fifoHeadReg_T_10 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[1] <= _fifoHeadReg_T_11 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[2] <= _fifoHeadReg_T_12 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[3] <= _fifoHeadReg_T_13 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[4] <= _fifoHeadReg_T_14 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[5] <= _fifoHeadReg_T_15 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[6] <= _fifoHeadReg_T_16 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[7] <= _fifoHeadReg_T_17 @[Interface.scala 254:12]
        node fifoHeadReg_lo_lo = cat(_fifoHeadReg_WIRE_1[1], _fifoHeadReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoHeadReg_lo_hi = cat(_fifoHeadReg_WIRE_1[3], _fifoHeadReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoHeadReg_lo = cat(fifoHeadReg_lo_hi, fifoHeadReg_lo_lo) @[Interface.scala 262:7]
        node fifoHeadReg_hi_lo = cat(_fifoHeadReg_WIRE_1[5], _fifoHeadReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoHeadReg_hi_hi = cat(_fifoHeadReg_WIRE_1[7], _fifoHeadReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoHeadReg_hi = cat(fifoHeadReg_hi_hi, fifoHeadReg_hi_lo) @[Interface.scala 262:7]
        node _fifoHeadReg_T_18 = cat(fifoHeadReg_hi, fifoHeadReg_lo) @[Interface.scala 262:7]
        wire _fifoHeadReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoHeadReg_WIRE_2 <= _fifoHeadReg_T_18 @[RegisterBlock.scala 118:82]
        fifoHeadReg <= _fifoHeadReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_65 = eq(UInt<6>("h28"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_65 : @[RegisterBlock.scala 252:38]
        wire _procInterrupt_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _procInterrupt_WIRE <= procInterrupt @[RegisterBlock.scala 118:51]
        node _procInterrupt_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _procInterrupt_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _procInterrupt_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _procInterrupt_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _procInterrupt_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _procInterrupt_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _procInterrupt_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _procInterrupt_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node procInterrupt_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node procInterrupt_byte_original = bits(_procInterrupt_WIRE, 7, 0) @[Interface.scala 258:39]
        node _procInterrupt_T_8 = mux(_procInterrupt_T, procInterrupt_byte_wdata, procInterrupt_byte_original) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node procInterrupt_byte_original_1 = bits(_procInterrupt_WIRE, 15, 8) @[Interface.scala 258:39]
        node _procInterrupt_T_9 = mux(_procInterrupt_T_1, procInterrupt_byte_wdata_1, procInterrupt_byte_original_1) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node procInterrupt_byte_original_2 = bits(_procInterrupt_WIRE, 23, 16) @[Interface.scala 258:39]
        node _procInterrupt_T_10 = mux(_procInterrupt_T_2, procInterrupt_byte_wdata_2, procInterrupt_byte_original_2) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node procInterrupt_byte_original_3 = bits(_procInterrupt_WIRE, 31, 24) @[Interface.scala 258:39]
        node _procInterrupt_T_11 = mux(_procInterrupt_T_3, procInterrupt_byte_wdata_3, procInterrupt_byte_original_3) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node procInterrupt_byte_original_4 = bits(_procInterrupt_WIRE, 39, 32) @[Interface.scala 258:39]
        node _procInterrupt_T_12 = mux(_procInterrupt_T_4, procInterrupt_byte_wdata_4, procInterrupt_byte_original_4) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node procInterrupt_byte_original_5 = bits(_procInterrupt_WIRE, 47, 40) @[Interface.scala 258:39]
        node _procInterrupt_T_13 = mux(_procInterrupt_T_5, procInterrupt_byte_wdata_5, procInterrupt_byte_original_5) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node procInterrupt_byte_original_6 = bits(_procInterrupt_WIRE, 55, 48) @[Interface.scala 258:39]
        node _procInterrupt_T_14 = mux(_procInterrupt_T_6, procInterrupt_byte_wdata_6, procInterrupt_byte_original_6) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node procInterrupt_byte_original_7 = bits(_procInterrupt_WIRE, 63, 56) @[Interface.scala 258:39]
        node _procInterrupt_T_15 = mux(_procInterrupt_T_7, procInterrupt_byte_wdata_7, procInterrupt_byte_original_7) @[Interface.scala 259:14]
        wire _procInterrupt_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[0] <= _procInterrupt_T_8 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[1] <= _procInterrupt_T_9 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[2] <= _procInterrupt_T_10 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[3] <= _procInterrupt_T_11 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[4] <= _procInterrupt_T_12 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[5] <= _procInterrupt_T_13 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[6] <= _procInterrupt_T_14 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[7] <= _procInterrupt_T_15 @[Interface.scala 254:12]
        node procInterrupt_lo_lo = cat(_procInterrupt_WIRE_1[1], _procInterrupt_WIRE_1[0]) @[Interface.scala 262:7]
        node procInterrupt_lo_hi = cat(_procInterrupt_WIRE_1[3], _procInterrupt_WIRE_1[2]) @[Interface.scala 262:7]
        node procInterrupt_lo = cat(procInterrupt_lo_hi, procInterrupt_lo_lo) @[Interface.scala 262:7]
        node procInterrupt_hi_lo = cat(_procInterrupt_WIRE_1[5], _procInterrupt_WIRE_1[4]) @[Interface.scala 262:7]
        node procInterrupt_hi_hi = cat(_procInterrupt_WIRE_1[7], _procInterrupt_WIRE_1[6]) @[Interface.scala 262:7]
        node procInterrupt_hi = cat(procInterrupt_hi_hi, procInterrupt_hi_lo) @[Interface.scala 262:7]
        node _procInterrupt_T_16 = cat(procInterrupt_hi, procInterrupt_lo) @[Interface.scala 262:7]
        wire _procInterrupt_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _procInterrupt_WIRE_2 <= _procInterrupt_T_16 @[RegisterBlock.scala 118:82]
        procInterrupt <= _procInterrupt_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_66 = asUInt(reset) @[RegisterBlock.scala 198:11]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
      when _T_67 : @[RegisterBlock.scala 198:11]
        node _T_68 = eq(wrReq, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
        when _T_68 : @[RegisterBlock.scala 198:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:198 assert(wrReq)\n") : printf_1 @[RegisterBlock.scala 198:11]
        assert(clock, wrReq, UInt<1>("h1"), "") : assert_1 @[RegisterBlock.scala 198:11]
      wrReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wrReqData_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp_1 : { resp : UInt<2>} @[RegisterBlock.scala 203:20]
      resp_1.resp <= UInt<2>("h0") @[RegisterBlock.scala 204:15]
      saxil.b.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.b.bits <= resp_1 @[Decoupled.scala 66:19]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, count : UInt<3>}

    cmem ram : { data : UInt<64>, strb : UInt<8>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module virtualStealServer_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip axi_mgmt : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}, read_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip read_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, write_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip ntwDataUnitOccupancy : UInt<1>}

    wire saxil : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[RegisterBlock.scala 60:19]
    node _mask_T = asUInt(asSInt(UInt<6>("h3f"))) @[RegisterBlock.scala 159:36]
    node mask = xor(_mask_T, UInt<3>("h7")) @[RegisterBlock.scala 159:39]
    inst rdReq__deq of Queue_3 @[Decoupled.scala 377:21]
    rdReq__deq.clock <= clock
    rdReq__deq.reset <= reset
    rdReq__deq.io.enq.valid <= saxil.ar.valid @[Decoupled.scala 379:22]
    rdReq__deq.io.enq.bits.prot <= saxil.ar.bits.prot @[Decoupled.scala 380:21]
    rdReq__deq.io.enq.bits.addr <= saxil.ar.bits.addr @[Decoupled.scala 380:21]
    saxil.ar.ready <= rdReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire rdReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    rdReq_.bits <= rdReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    rdReq_.valid <= rdReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    rdReq__deq.io.deq.ready <= rdReq_.ready @[Decoupled.scala 420:15]
    inst wrReq__deq of Queue_4 @[Decoupled.scala 377:21]
    wrReq__deq.clock <= clock
    wrReq__deq.reset <= reset
    wrReq__deq.io.enq.valid <= saxil.aw.valid @[Decoupled.scala 379:22]
    wrReq__deq.io.enq.bits.prot <= saxil.aw.bits.prot @[Decoupled.scala 380:21]
    wrReq__deq.io.enq.bits.addr <= saxil.aw.bits.addr @[Decoupled.scala 380:21]
    saxil.aw.ready <= wrReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    wrReq_.bits <= wrReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReq_.valid <= wrReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReq__deq.io.deq.ready <= wrReq_.ready @[Decoupled.scala 420:15]
    inst wrReqData__deq of Queue_5 @[Decoupled.scala 377:21]
    wrReqData__deq.clock <= clock
    wrReqData__deq.reset <= reset
    wrReqData__deq.io.enq.valid <= saxil.w.valid @[Decoupled.scala 379:22]
    wrReqData__deq.io.enq.bits.strb <= saxil.w.bits.strb @[Decoupled.scala 380:21]
    wrReqData__deq.io.enq.bits.data <= saxil.w.bits.data @[Decoupled.scala 380:21]
    saxil.w.ready <= wrReqData__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReqData_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}} @[Decoupled.scala 417:19]
    wrReqData_.bits <= wrReqData__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReqData_.valid <= wrReqData__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReqData__deq.io.deq.ready <= wrReqData_.ready @[Decoupled.scala 420:15]
    rdReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.r.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.r.bits.resp is invalid @[Decoupled.scala 75:19]
    saxil.r.bits.data is invalid @[Decoupled.scala 75:19]
    wrReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    wrReqData_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.b.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.b.bits.resp is invalid @[Decoupled.scala 75:19]
    node rdReq = and(rdReq_.valid, saxil.r.ready) @[RegisterBlock.scala 210:44]
    node rdAddr = and(rdReq_.bits.addr, mask) @[RegisterBlock.scala 214:48]
    node _wrReq_T = and(wrReq_.valid, wrReqData_.valid) @[RegisterBlock.scala 241:43]
    node wrReq = and(_wrReq_T, saxil.b.ready) @[RegisterBlock.scala 241:63]
    node wrAddr = and(wrReq_.bits.addr, mask) @[RegisterBlock.scala 243:48]
    io.axi_mgmt.BRESP <= saxil.b.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.BVALID <= saxil.b.valid @[virtualStealServer.scala 58:20]
    saxil.b.ready <= io.axi_mgmt.BREADY @[virtualStealServer.scala 58:20]
    saxil.w.bits.strb <= io.axi_mgmt.WSTRB @[virtualStealServer.scala 58:20]
    saxil.w.bits.data <= io.axi_mgmt.WDATA @[virtualStealServer.scala 58:20]
    saxil.w.valid <= io.axi_mgmt.WVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.WREADY <= saxil.w.ready @[virtualStealServer.scala 58:20]
    saxil.aw.bits.prot <= io.axi_mgmt.AWPROT @[virtualStealServer.scala 58:20]
    saxil.aw.bits.addr <= io.axi_mgmt.AWADDR @[virtualStealServer.scala 58:20]
    saxil.aw.valid <= io.axi_mgmt.AWVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.AWREADY <= saxil.aw.ready @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RRESP <= saxil.r.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RDATA <= saxil.r.bits.data @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RVALID <= saxil.r.valid @[virtualStealServer.scala 58:20]
    saxil.r.ready <= io.axi_mgmt.RREADY @[virtualStealServer.scala 58:20]
    saxil.ar.bits.prot <= io.axi_mgmt.ARPROT @[virtualStealServer.scala 58:20]
    saxil.ar.bits.addr <= io.axi_mgmt.ARADDR @[virtualStealServer.scala 58:20]
    saxil.ar.valid <= io.axi_mgmt.ARVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.ARREADY <= saxil.ar.ready @[virtualStealServer.scala 58:20]
    reg rAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 61:44]
    reg rPause : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 62:44]
    reg procInterrupt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 63:44]
    reg maxLength : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 64:44]
    reg stateReg : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 65:44]
    wire currLen : UInt<64> @[virtualStealServer.scala 66:41]
    reg contentionCounter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 67:44]
    reg contentionThresh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h14")) @[virtualStealServer.scala 68:44]
    reg networkCongested : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 69:44]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 70:44]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 71:44]
    reg delta : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 72:44]
    reg fifoTailReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 73:44]
    reg fifoHeadReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 74:44]
    reg popOrPush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[virtualStealServer.scala 75:44]
    reg addrShift : UInt, clock with :
      reset => (reset, UInt<2>("h2")) @[virtualStealServer.scala 76:44]
    node _T = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[virtualStealServer.scala 89:10]
    node _T_1 = and(_T, io.ntwDataUnitOccupancy) @[virtualStealServer.scala 89:52]
    node _T_2 = neq(contentionCounter, UInt<5>("h18")) @[virtualStealServer.scala 91:31]
    node _T_3 = and(_T_1, _T_2) @[virtualStealServer.scala 91:10]
    when _T_3 : @[virtualStealServer.scala 91:57]
      node _contentionCounter_T = add(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 92:48]
      node _contentionCounter_T_1 = tail(_contentionCounter_T, 1) @[virtualStealServer.scala 92:48]
      contentionCounter <= _contentionCounter_T_1 @[virtualStealServer.scala 92:27]
    else :
      node _T_4 = neq(contentionCounter, UInt<1>("h0")) @[virtualStealServer.scala 94:36]
      node _T_5 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_4) @[virtualStealServer.scala 93:56]
      node _T_6 = eq(io.ntwDataUnitOccupancy, UInt<1>("h0")) @[virtualStealServer.scala 95:20]
      node _T_7 = and(_T_5, _T_6) @[virtualStealServer.scala 95:17]
      when _T_7 : @[virtualStealServer.scala 95:46]
        node _contentionCounter_T_2 = sub(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 96:48]
        node _contentionCounter_T_3 = tail(_contentionCounter_T_2, 1) @[virtualStealServer.scala 96:48]
        contentionCounter <= _contentionCounter_T_3 @[virtualStealServer.scala 96:27]
      else :
        contentionCounter <= contentionCounter @[virtualStealServer.scala 98:27]
    node _T_8 = add(contentionThresh, delta) @[virtualStealServer.scala 102:49]
    node _T_9 = tail(_T_8, 1) @[virtualStealServer.scala 102:49]
    node _T_10 = geq(contentionCounter, _T_9) @[virtualStealServer.scala 102:28]
    when _T_10 : @[virtualStealServer.scala 102:58]
      networkCongested <= UInt<1>("h1") @[virtualStealServer.scala 103:26]
    else :
      node _T_11 = sub(contentionThresh, delta) @[virtualStealServer.scala 104:54]
      node _T_12 = tail(_T_11, 1) @[virtualStealServer.scala 104:54]
      node _T_13 = lt(contentionCounter, _T_12) @[virtualStealServer.scala 104:34]
      when _T_13 : @[virtualStealServer.scala 104:63]
        networkCongested <= UInt<1>("h0") @[virtualStealServer.scala 105:26]
      else :
        networkCongested <= networkCongested @[virtualStealServer.scala 107:26]
    node _T_14 = eq(stateReg, UInt<1>("h0")) @[virtualStealServer.scala 112:19]
    when _T_14 : @[virtualStealServer.scala 112:34]
      node _T_15 = eq(currLen, maxLength) @[virtualStealServer.scala 113:23]
      node _T_16 = and(_T_15, networkCongested) @[virtualStealServer.scala 113:37]
      node _T_17 = eq(maxLength, UInt<1>("h0")) @[virtualStealServer.scala 113:71]
      node _T_18 = or(_T_16, _T_17) @[virtualStealServer.scala 113:58]
      when _T_18 : @[virtualStealServer.scala 113:79]
        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 114:22]
        rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 115:22]
      else :
        when networkCongested : @[virtualStealServer.scala 116:37]
          stateReg <= UInt<2>("h2") @[virtualStealServer.scala 117:22]
        else :
          node _T_19 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 118:20]
          node _T_20 = neq(currLen, UInt<1>("h0")) @[virtualStealServer.scala 118:49]
          node _T_21 = and(_T_19, _T_20) @[virtualStealServer.scala 118:38]
          when _T_21 : @[virtualStealServer.scala 118:57]
            stateReg <= UInt<3>("h6") @[virtualStealServer.scala 119:22]
          else :
            node _T_22 = neq(procInterrupt, UInt<1>("h0")) @[virtualStealServer.scala 120:34]
            when _T_22 : @[virtualStealServer.scala 120:42]
              stateReg <= UInt<4>("ha") @[virtualStealServer.scala 121:22]
              rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 122:22]
            else :
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 124:22]
    else :
      node _T_23 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 126:25]
      when _T_23 : @[virtualStealServer.scala 126:46]
        when io.connNetwork.data.availableTask.valid : @[virtualStealServer.scala 127:54]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 128:22]
        else :
          node _T_24 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 129:20]
          when _T_24 : @[virtualStealServer.scala 129:38]
            stateReg <= UInt<1>("h0") @[virtualStealServer.scala 130:22]
          else :
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 132:22]
      else :
        node _T_25 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 134:25]
        when _T_25 : @[virtualStealServer.scala 134:51]
          when io.write_address.ready : @[virtualStealServer.scala 135:37]
            stateReg <= UInt<2>("h3") @[virtualStealServer.scala 136:22]
          else :
            node _T_26 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 137:20]
            when _T_26 : @[virtualStealServer.scala 137:38]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 138:22]
            else :
              stateReg <= UInt<3>("h4") @[virtualStealServer.scala 140:22]
        else :
          node _T_27 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 142:25]
          when _T_27 : @[virtualStealServer.scala 142:44]
            when io.write_data.ready : @[virtualStealServer.scala 143:34]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 144:22]
              popOrPush <= UInt<1>("h0") @[virtualStealServer.scala 145:23]
              node _T_28 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 146:42]
              node _T_29 = tail(_T_28, 1) @[virtualStealServer.scala 146:42]
              node _T_30 = lt(fifoTailReg, _T_29) @[virtualStealServer.scala 146:30]
              when _T_30 : @[virtualStealServer.scala 146:48]
                node _fifoTailReg_T = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 147:44]
                node _fifoTailReg_T_1 = tail(_fifoTailReg_T, 1) @[virtualStealServer.scala 147:44]
                fifoTailReg <= _fifoTailReg_T_1 @[virtualStealServer.scala 147:29]
              else :
                fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 149:29]
            else :
              stateReg <= UInt<2>("h3") @[virtualStealServer.scala 152:22]
          else :
            node _T_31 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 154:25]
            when _T_31 : @[virtualStealServer.scala 154:50]
              when io.read_address.ready : @[virtualStealServer.scala 155:36]
                stateReg <= UInt<3>("h5") @[virtualStealServer.scala 156:22]
              else :
                when networkCongested : @[virtualStealServer.scala 157:37]
                  stateReg <= UInt<1>("h0") @[virtualStealServer.scala 158:22]
                else :
                  stateReg <= UInt<3>("h6") @[virtualStealServer.scala 160:22]
            else :
              node _T_32 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 162:25]
              when _T_32 : @[virtualStealServer.scala 162:43]
                when io.read_data.valid : @[virtualStealServer.scala 163:33]
                  stateReg <= UInt<4>("h8") @[virtualStealServer.scala 164:22]
                  popOrPush <= UInt<1>("h1") @[virtualStealServer.scala 165:23]
                  node _T_33 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 166:42]
                  node _T_34 = tail(_T_33, 1) @[virtualStealServer.scala 166:42]
                  node _T_35 = lt(fifoHeadReg, _T_34) @[virtualStealServer.scala 166:30]
                  when _T_35 : @[virtualStealServer.scala 166:48]
                    node _fifoHeadReg_T = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 167:44]
                    node _fifoHeadReg_T_1 = tail(_fifoHeadReg_T, 1) @[virtualStealServer.scala 167:44]
                    fifoHeadReg <= _fifoHeadReg_T_1 @[virtualStealServer.scala 167:29]
                  else :
                    fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 169:29]
                else :
                  stateReg <= UInt<3>("h5") @[virtualStealServer.scala 172:22]
              else :
                node _T_36 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 174:25]
                when _T_36 : @[virtualStealServer.scala 174:48]
                  when io.connNetwork.data.qOutTask.ready : @[virtualStealServer.scala 175:49]
                    stateReg <= UInt<1>("h0") @[virtualStealServer.scala 176:22]
                  else :
                    stateReg <= UInt<3>("h7") @[virtualStealServer.scala 178:22]
                else :
                  node _T_37 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 180:25]
                  when _T_37 : @[virtualStealServer.scala 180:54]
                    when io.connNetwork.ctrl.serveStealReq.ready : @[virtualStealServer.scala 181:54]
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 182:22]
                    else :
                      when networkCongested : @[virtualStealServer.scala 186:39]
                        stolenTaskReg <= giveTaskReg @[virtualStealServer.scala 187:27]
                        stateReg <= UInt<3>("h4") @[virtualStealServer.scala 188:22]
                      else :
                        stateReg <= UInt<4>("h8") @[virtualStealServer.scala 192:22]
                  else :
                    node _T_38 = eq(stateReg, UInt<4>("h9")) @[virtualStealServer.scala 194:25]
                    when _T_38 : @[virtualStealServer.scala 194:46]
                      node _T_39 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 195:21]
                      when _T_39 : @[virtualStealServer.scala 195:33]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 196:22]
                      else :
                        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 198:22]
                    else :
                      node _T_40 = eq(stateReg, UInt<4>("ha")) @[virtualStealServer.scala 200:25]
                      when _T_40 : @[virtualStealServer.scala 200:53]
                        node _T_41 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 201:21]
                        when _T_41 : @[virtualStealServer.scala 201:33]
                          stateReg <= UInt<1>("h0") @[virtualStealServer.scala 202:22]
                        else :
                          stateReg <= UInt<4>("ha") @[virtualStealServer.scala 204:22]
                      else :
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 207:18]
    io.connNetwork.data.qOutTask.bits <= giveTaskReg @[virtualStealServer.scala 210:45]
    io.write_data.bits <= stolenTaskReg @[virtualStealServer.scala 211:45]
    io.read_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 215:45]
    io.read_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 216:45]
    io.read_data.ready <= UInt<1>("h0") @[virtualStealServer.scala 217:45]
    io.write_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 218:45]
    io.write_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 219:45]
    io.write_data.valid <= UInt<1>("h0") @[virtualStealServer.scala 220:45]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[virtualStealServer.scala 222:45]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[virtualStealServer.scala 223:45]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 225:45]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 226:45]
    node _T_42 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 230:19]
    when _T_42 : @[virtualStealServer.scala 230:40]
      stolenTaskReg <= io.connNetwork.data.availableTask.bits @[virtualStealServer.scala 231:49]
      io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[virtualStealServer.scala 232:49]
    else :
      node _T_43 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 233:25]
      when _T_43 : @[virtualStealServer.scala 233:51]
        io.write_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 234:49]
        node _io_write_address_bits_T = dshl(fifoTailReg, addrShift) @[virtualStealServer.scala 235:65]
        node _io_write_address_bits_T_1 = add(_io_write_address_bits_T, rAddr) @[virtualStealServer.scala 235:79]
        node _io_write_address_bits_T_2 = tail(_io_write_address_bits_T_1, 1) @[virtualStealServer.scala 235:79]
        io.write_address.bits <= _io_write_address_bits_T_2 @[virtualStealServer.scala 235:49]
      else :
        node _T_44 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 236:25]
        when _T_44 : @[virtualStealServer.scala 236:44]
          io.write_data.valid <= UInt<1>("h1") @[virtualStealServer.scala 237:49]
        else :
          node _T_45 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 238:25]
          when _T_45 : @[virtualStealServer.scala 238:50]
            io.read_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 239:49]
            node _io_read_address_bits_T = dshl(fifoHeadReg, addrShift) @[virtualStealServer.scala 240:65]
            node _io_read_address_bits_T_1 = add(_io_read_address_bits_T, rAddr) @[virtualStealServer.scala 240:79]
            node _io_read_address_bits_T_2 = tail(_io_read_address_bits_T_1, 1) @[virtualStealServer.scala 240:79]
            io.read_address.bits <= _io_read_address_bits_T_2 @[virtualStealServer.scala 240:49]
          else :
            node _T_46 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 241:25]
            when _T_46 : @[virtualStealServer.scala 241:43]
              io.read_data.ready <= UInt<1>("h1") @[virtualStealServer.scala 242:49]
              giveTaskReg <= io.read_data.bits @[virtualStealServer.scala 243:49]
            else :
              node _T_47 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 244:25]
              when _T_47 : @[virtualStealServer.scala 244:48]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[virtualStealServer.scala 245:49]
              else :
                node _T_48 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 246:25]
                when _T_48 : @[virtualStealServer.scala 246:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[virtualStealServer.scala 247:49]
    reg lengthHistroy : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 251:32]
    node _T_49 = gt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 253:22]
    when _T_49 : @[virtualStealServer.scala 253:36]
      node _currLen_T = sub(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 254:32]
      node _currLen_T_1 = tail(_currLen_T, 1) @[virtualStealServer.scala 254:32]
      currLen <= _currLen_T_1 @[virtualStealServer.scala 254:17]
      lengthHistroy <= currLen @[virtualStealServer.scala 255:23]
    else :
      node _T_50 = lt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 256:28]
      when _T_50 : @[virtualStealServer.scala 256:42]
        node _currLen_T_2 = sub(maxLength, fifoHeadReg) @[virtualStealServer.scala 257:30]
        node _currLen_T_3 = tail(_currLen_T_2, 1) @[virtualStealServer.scala 257:30]
        node _currLen_T_4 = add(_currLen_T_3, fifoTailReg) @[virtualStealServer.scala 257:44]
        node _currLen_T_5 = tail(_currLen_T_4, 1) @[virtualStealServer.scala 257:44]
        currLen <= _currLen_T_5 @[virtualStealServer.scala 257:17]
        lengthHistroy <= currLen @[virtualStealServer.scala 258:23]
      else :
        lengthHistroy <= lengthHistroy @[virtualStealServer.scala 260:23]
        when popOrPush : @[virtualStealServer.scala 261:24]
          currLen <= UInt<1>("h0") @[virtualStealServer.scala 262:21]
        else :
          node _currLen_T_6 = add(lengthHistroy, UInt<1>("h1")) @[virtualStealServer.scala 264:38]
          node _currLen_T_7 = tail(_currLen_T_6, 1) @[virtualStealServer.scala 264:38]
          currLen <= _currLen_T_7 @[virtualStealServer.scala 264:21]
    when rdReq : @[virtualStealServer.scala 269:27]
      wire data : UInt<64> @[RegisterBlock.scala 217:20]
      node _data_T = asUInt(asSInt(UInt<64>("hffffffffffffffff"))) @[RegisterBlock.scala 220:29]
      data <= _data_T @[RegisterBlock.scala 220:10]
      node _T_51 = eq(UInt<1>("h0"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_51 : @[RegisterBlock.scala 224:38]
        data <= rPause @[RegisterBlock.scala 225:16]
      node _T_52 = eq(UInt<4>("h8"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_52 : @[RegisterBlock.scala 224:38]
        data <= rAddr @[RegisterBlock.scala 225:16]
      node _T_53 = eq(UInt<5>("h10"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_53 : @[RegisterBlock.scala 224:38]
        data <= maxLength @[RegisterBlock.scala 225:16]
      node _T_54 = eq(UInt<5>("h18"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_54 : @[RegisterBlock.scala 224:38]
        data <= fifoTailReg @[RegisterBlock.scala 225:16]
      node _T_55 = eq(UInt<6>("h20"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_55 : @[RegisterBlock.scala 224:38]
        data <= fifoHeadReg @[RegisterBlock.scala 225:16]
      node _T_56 = eq(UInt<6>("h28"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_56 : @[RegisterBlock.scala 224:38]
        data <= procInterrupt @[RegisterBlock.scala 225:16]
      node _T_57 = asUInt(reset) @[RegisterBlock.scala 182:11]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
      when _T_58 : @[RegisterBlock.scala 182:11]
        node _T_59 = eq(rdReq, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
        when _T_59 : @[RegisterBlock.scala 182:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:182 assert(rdReq)\n") : printf @[RegisterBlock.scala 182:11]
        assert(clock, rdReq, UInt<1>("h1"), "") : assert @[RegisterBlock.scala 182:11]
      rdReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp : { data : UInt<64>, resp : UInt<2>} @[RegisterBlock.scala 186:20]
      resp.data <= data @[RegisterBlock.scala 187:15]
      resp.resp <= UInt<2>("h0") @[RegisterBlock.scala 188:15]
      saxil.r.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.r.bits <= resp @[Decoupled.scala 66:19]
    when wrReq : @[virtualStealServer.scala 273:27]
      node _T_60 = eq(UInt<1>("h0"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_60 : @[RegisterBlock.scala 252:38]
        wire _rPause_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rPause_WIRE <= rPause @[RegisterBlock.scala 118:51]
        node _rPause_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rPause_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rPause_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rPause_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rPause_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rPause_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rPause_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rPause_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rPause_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rPause_byte_original = bits(_rPause_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rPause_T_8 = mux(_rPause_T, rPause_byte_wdata, rPause_byte_original) @[Interface.scala 259:14]
        node rPause_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rPause_byte_original_1 = bits(_rPause_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rPause_T_9 = mux(_rPause_T_1, rPause_byte_wdata_1, rPause_byte_original_1) @[Interface.scala 259:14]
        node rPause_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rPause_byte_original_2 = bits(_rPause_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rPause_T_10 = mux(_rPause_T_2, rPause_byte_wdata_2, rPause_byte_original_2) @[Interface.scala 259:14]
        node rPause_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rPause_byte_original_3 = bits(_rPause_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rPause_T_11 = mux(_rPause_T_3, rPause_byte_wdata_3, rPause_byte_original_3) @[Interface.scala 259:14]
        node rPause_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rPause_byte_original_4 = bits(_rPause_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rPause_T_12 = mux(_rPause_T_4, rPause_byte_wdata_4, rPause_byte_original_4) @[Interface.scala 259:14]
        node rPause_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rPause_byte_original_5 = bits(_rPause_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rPause_T_13 = mux(_rPause_T_5, rPause_byte_wdata_5, rPause_byte_original_5) @[Interface.scala 259:14]
        node rPause_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rPause_byte_original_6 = bits(_rPause_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rPause_T_14 = mux(_rPause_T_6, rPause_byte_wdata_6, rPause_byte_original_6) @[Interface.scala 259:14]
        node rPause_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rPause_byte_original_7 = bits(_rPause_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rPause_T_15 = mux(_rPause_T_7, rPause_byte_wdata_7, rPause_byte_original_7) @[Interface.scala 259:14]
        wire _rPause_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rPause_WIRE_1[0] <= _rPause_T_8 @[Interface.scala 254:12]
        _rPause_WIRE_1[1] <= _rPause_T_9 @[Interface.scala 254:12]
        _rPause_WIRE_1[2] <= _rPause_T_10 @[Interface.scala 254:12]
        _rPause_WIRE_1[3] <= _rPause_T_11 @[Interface.scala 254:12]
        _rPause_WIRE_1[4] <= _rPause_T_12 @[Interface.scala 254:12]
        _rPause_WIRE_1[5] <= _rPause_T_13 @[Interface.scala 254:12]
        _rPause_WIRE_1[6] <= _rPause_T_14 @[Interface.scala 254:12]
        _rPause_WIRE_1[7] <= _rPause_T_15 @[Interface.scala 254:12]
        node rPause_lo_lo = cat(_rPause_WIRE_1[1], _rPause_WIRE_1[0]) @[Interface.scala 262:7]
        node rPause_lo_hi = cat(_rPause_WIRE_1[3], _rPause_WIRE_1[2]) @[Interface.scala 262:7]
        node rPause_lo = cat(rPause_lo_hi, rPause_lo_lo) @[Interface.scala 262:7]
        node rPause_hi_lo = cat(_rPause_WIRE_1[5], _rPause_WIRE_1[4]) @[Interface.scala 262:7]
        node rPause_hi_hi = cat(_rPause_WIRE_1[7], _rPause_WIRE_1[6]) @[Interface.scala 262:7]
        node rPause_hi = cat(rPause_hi_hi, rPause_hi_lo) @[Interface.scala 262:7]
        node _rPause_T_16 = cat(rPause_hi, rPause_lo) @[Interface.scala 262:7]
        wire _rPause_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rPause_WIRE_2 <= _rPause_T_16 @[RegisterBlock.scala 118:82]
        rPause <= _rPause_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_61 = eq(UInt<4>("h8"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_61 : @[RegisterBlock.scala 252:38]
        wire _rAddr_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rAddr_WIRE <= rAddr @[RegisterBlock.scala 118:51]
        node _rAddr_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rAddr_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rAddr_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rAddr_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rAddr_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rAddr_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rAddr_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rAddr_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rAddr_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rAddr_byte_original = bits(_rAddr_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rAddr_T_8 = mux(_rAddr_T, rAddr_byte_wdata, rAddr_byte_original) @[Interface.scala 259:14]
        node rAddr_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rAddr_byte_original_1 = bits(_rAddr_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rAddr_T_9 = mux(_rAddr_T_1, rAddr_byte_wdata_1, rAddr_byte_original_1) @[Interface.scala 259:14]
        node rAddr_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rAddr_byte_original_2 = bits(_rAddr_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rAddr_T_10 = mux(_rAddr_T_2, rAddr_byte_wdata_2, rAddr_byte_original_2) @[Interface.scala 259:14]
        node rAddr_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rAddr_byte_original_3 = bits(_rAddr_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rAddr_T_11 = mux(_rAddr_T_3, rAddr_byte_wdata_3, rAddr_byte_original_3) @[Interface.scala 259:14]
        node rAddr_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rAddr_byte_original_4 = bits(_rAddr_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rAddr_T_12 = mux(_rAddr_T_4, rAddr_byte_wdata_4, rAddr_byte_original_4) @[Interface.scala 259:14]
        node rAddr_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rAddr_byte_original_5 = bits(_rAddr_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rAddr_T_13 = mux(_rAddr_T_5, rAddr_byte_wdata_5, rAddr_byte_original_5) @[Interface.scala 259:14]
        node rAddr_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rAddr_byte_original_6 = bits(_rAddr_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rAddr_T_14 = mux(_rAddr_T_6, rAddr_byte_wdata_6, rAddr_byte_original_6) @[Interface.scala 259:14]
        node rAddr_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rAddr_byte_original_7 = bits(_rAddr_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rAddr_T_15 = mux(_rAddr_T_7, rAddr_byte_wdata_7, rAddr_byte_original_7) @[Interface.scala 259:14]
        wire _rAddr_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rAddr_WIRE_1[0] <= _rAddr_T_8 @[Interface.scala 254:12]
        _rAddr_WIRE_1[1] <= _rAddr_T_9 @[Interface.scala 254:12]
        _rAddr_WIRE_1[2] <= _rAddr_T_10 @[Interface.scala 254:12]
        _rAddr_WIRE_1[3] <= _rAddr_T_11 @[Interface.scala 254:12]
        _rAddr_WIRE_1[4] <= _rAddr_T_12 @[Interface.scala 254:12]
        _rAddr_WIRE_1[5] <= _rAddr_T_13 @[Interface.scala 254:12]
        _rAddr_WIRE_1[6] <= _rAddr_T_14 @[Interface.scala 254:12]
        _rAddr_WIRE_1[7] <= _rAddr_T_15 @[Interface.scala 254:12]
        node rAddr_lo_lo = cat(_rAddr_WIRE_1[1], _rAddr_WIRE_1[0]) @[Interface.scala 262:7]
        node rAddr_lo_hi = cat(_rAddr_WIRE_1[3], _rAddr_WIRE_1[2]) @[Interface.scala 262:7]
        node rAddr_lo = cat(rAddr_lo_hi, rAddr_lo_lo) @[Interface.scala 262:7]
        node rAddr_hi_lo = cat(_rAddr_WIRE_1[5], _rAddr_WIRE_1[4]) @[Interface.scala 262:7]
        node rAddr_hi_hi = cat(_rAddr_WIRE_1[7], _rAddr_WIRE_1[6]) @[Interface.scala 262:7]
        node rAddr_hi = cat(rAddr_hi_hi, rAddr_hi_lo) @[Interface.scala 262:7]
        node _rAddr_T_16 = cat(rAddr_hi, rAddr_lo) @[Interface.scala 262:7]
        wire _rAddr_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rAddr_WIRE_2 <= _rAddr_T_16 @[RegisterBlock.scala 118:82]
        rAddr <= _rAddr_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_62 = eq(UInt<5>("h10"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_62 : @[RegisterBlock.scala 252:38]
        wire _maxLength_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _maxLength_WIRE <= maxLength @[RegisterBlock.scala 118:51]
        node _maxLength_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _maxLength_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _maxLength_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _maxLength_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _maxLength_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _maxLength_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _maxLength_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _maxLength_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node maxLength_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node maxLength_byte_original = bits(_maxLength_WIRE, 7, 0) @[Interface.scala 258:39]
        node _maxLength_T_8 = mux(_maxLength_T, maxLength_byte_wdata, maxLength_byte_original) @[Interface.scala 259:14]
        node maxLength_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node maxLength_byte_original_1 = bits(_maxLength_WIRE, 15, 8) @[Interface.scala 258:39]
        node _maxLength_T_9 = mux(_maxLength_T_1, maxLength_byte_wdata_1, maxLength_byte_original_1) @[Interface.scala 259:14]
        node maxLength_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node maxLength_byte_original_2 = bits(_maxLength_WIRE, 23, 16) @[Interface.scala 258:39]
        node _maxLength_T_10 = mux(_maxLength_T_2, maxLength_byte_wdata_2, maxLength_byte_original_2) @[Interface.scala 259:14]
        node maxLength_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node maxLength_byte_original_3 = bits(_maxLength_WIRE, 31, 24) @[Interface.scala 258:39]
        node _maxLength_T_11 = mux(_maxLength_T_3, maxLength_byte_wdata_3, maxLength_byte_original_3) @[Interface.scala 259:14]
        node maxLength_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node maxLength_byte_original_4 = bits(_maxLength_WIRE, 39, 32) @[Interface.scala 258:39]
        node _maxLength_T_12 = mux(_maxLength_T_4, maxLength_byte_wdata_4, maxLength_byte_original_4) @[Interface.scala 259:14]
        node maxLength_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node maxLength_byte_original_5 = bits(_maxLength_WIRE, 47, 40) @[Interface.scala 258:39]
        node _maxLength_T_13 = mux(_maxLength_T_5, maxLength_byte_wdata_5, maxLength_byte_original_5) @[Interface.scala 259:14]
        node maxLength_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node maxLength_byte_original_6 = bits(_maxLength_WIRE, 55, 48) @[Interface.scala 258:39]
        node _maxLength_T_14 = mux(_maxLength_T_6, maxLength_byte_wdata_6, maxLength_byte_original_6) @[Interface.scala 259:14]
        node maxLength_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node maxLength_byte_original_7 = bits(_maxLength_WIRE, 63, 56) @[Interface.scala 258:39]
        node _maxLength_T_15 = mux(_maxLength_T_7, maxLength_byte_wdata_7, maxLength_byte_original_7) @[Interface.scala 259:14]
        wire _maxLength_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _maxLength_WIRE_1[0] <= _maxLength_T_8 @[Interface.scala 254:12]
        _maxLength_WIRE_1[1] <= _maxLength_T_9 @[Interface.scala 254:12]
        _maxLength_WIRE_1[2] <= _maxLength_T_10 @[Interface.scala 254:12]
        _maxLength_WIRE_1[3] <= _maxLength_T_11 @[Interface.scala 254:12]
        _maxLength_WIRE_1[4] <= _maxLength_T_12 @[Interface.scala 254:12]
        _maxLength_WIRE_1[5] <= _maxLength_T_13 @[Interface.scala 254:12]
        _maxLength_WIRE_1[6] <= _maxLength_T_14 @[Interface.scala 254:12]
        _maxLength_WIRE_1[7] <= _maxLength_T_15 @[Interface.scala 254:12]
        node maxLength_lo_lo = cat(_maxLength_WIRE_1[1], _maxLength_WIRE_1[0]) @[Interface.scala 262:7]
        node maxLength_lo_hi = cat(_maxLength_WIRE_1[3], _maxLength_WIRE_1[2]) @[Interface.scala 262:7]
        node maxLength_lo = cat(maxLength_lo_hi, maxLength_lo_lo) @[Interface.scala 262:7]
        node maxLength_hi_lo = cat(_maxLength_WIRE_1[5], _maxLength_WIRE_1[4]) @[Interface.scala 262:7]
        node maxLength_hi_hi = cat(_maxLength_WIRE_1[7], _maxLength_WIRE_1[6]) @[Interface.scala 262:7]
        node maxLength_hi = cat(maxLength_hi_hi, maxLength_hi_lo) @[Interface.scala 262:7]
        node _maxLength_T_16 = cat(maxLength_hi, maxLength_lo) @[Interface.scala 262:7]
        wire _maxLength_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _maxLength_WIRE_2 <= _maxLength_T_16 @[RegisterBlock.scala 118:82]
        maxLength <= _maxLength_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_63 = eq(UInt<5>("h18"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_63 : @[RegisterBlock.scala 252:38]
        wire _fifoTailReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoTailReg_WIRE <= fifoTailReg @[RegisterBlock.scala 118:51]
        node _fifoTailReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoTailReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoTailReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoTailReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoTailReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoTailReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoTailReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoTailReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoTailReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoTailReg_byte_original = bits(_fifoTailReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoTailReg_T_10 = mux(_fifoTailReg_T_2, fifoTailReg_byte_wdata, fifoTailReg_byte_original) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_1 = bits(_fifoTailReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoTailReg_T_11 = mux(_fifoTailReg_T_3, fifoTailReg_byte_wdata_1, fifoTailReg_byte_original_1) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_2 = bits(_fifoTailReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoTailReg_T_12 = mux(_fifoTailReg_T_4, fifoTailReg_byte_wdata_2, fifoTailReg_byte_original_2) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_3 = bits(_fifoTailReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoTailReg_T_13 = mux(_fifoTailReg_T_5, fifoTailReg_byte_wdata_3, fifoTailReg_byte_original_3) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_4 = bits(_fifoTailReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoTailReg_T_14 = mux(_fifoTailReg_T_6, fifoTailReg_byte_wdata_4, fifoTailReg_byte_original_4) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_5 = bits(_fifoTailReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoTailReg_T_15 = mux(_fifoTailReg_T_7, fifoTailReg_byte_wdata_5, fifoTailReg_byte_original_5) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_6 = bits(_fifoTailReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoTailReg_T_16 = mux(_fifoTailReg_T_8, fifoTailReg_byte_wdata_6, fifoTailReg_byte_original_6) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_7 = bits(_fifoTailReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoTailReg_T_17 = mux(_fifoTailReg_T_9, fifoTailReg_byte_wdata_7, fifoTailReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoTailReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[0] <= _fifoTailReg_T_10 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[1] <= _fifoTailReg_T_11 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[2] <= _fifoTailReg_T_12 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[3] <= _fifoTailReg_T_13 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[4] <= _fifoTailReg_T_14 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[5] <= _fifoTailReg_T_15 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[6] <= _fifoTailReg_T_16 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[7] <= _fifoTailReg_T_17 @[Interface.scala 254:12]
        node fifoTailReg_lo_lo = cat(_fifoTailReg_WIRE_1[1], _fifoTailReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoTailReg_lo_hi = cat(_fifoTailReg_WIRE_1[3], _fifoTailReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoTailReg_lo = cat(fifoTailReg_lo_hi, fifoTailReg_lo_lo) @[Interface.scala 262:7]
        node fifoTailReg_hi_lo = cat(_fifoTailReg_WIRE_1[5], _fifoTailReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoTailReg_hi_hi = cat(_fifoTailReg_WIRE_1[7], _fifoTailReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoTailReg_hi = cat(fifoTailReg_hi_hi, fifoTailReg_hi_lo) @[Interface.scala 262:7]
        node _fifoTailReg_T_18 = cat(fifoTailReg_hi, fifoTailReg_lo) @[Interface.scala 262:7]
        wire _fifoTailReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoTailReg_WIRE_2 <= _fifoTailReg_T_18 @[RegisterBlock.scala 118:82]
        fifoTailReg <= _fifoTailReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_64 = eq(UInt<6>("h20"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_64 : @[RegisterBlock.scala 252:38]
        wire _fifoHeadReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoHeadReg_WIRE <= fifoHeadReg @[RegisterBlock.scala 118:51]
        node _fifoHeadReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoHeadReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoHeadReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoHeadReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoHeadReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoHeadReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoHeadReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoHeadReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoHeadReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original = bits(_fifoHeadReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoHeadReg_T_10 = mux(_fifoHeadReg_T_2, fifoHeadReg_byte_wdata, fifoHeadReg_byte_original) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_1 = bits(_fifoHeadReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoHeadReg_T_11 = mux(_fifoHeadReg_T_3, fifoHeadReg_byte_wdata_1, fifoHeadReg_byte_original_1) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_2 = bits(_fifoHeadReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoHeadReg_T_12 = mux(_fifoHeadReg_T_4, fifoHeadReg_byte_wdata_2, fifoHeadReg_byte_original_2) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_3 = bits(_fifoHeadReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoHeadReg_T_13 = mux(_fifoHeadReg_T_5, fifoHeadReg_byte_wdata_3, fifoHeadReg_byte_original_3) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_4 = bits(_fifoHeadReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoHeadReg_T_14 = mux(_fifoHeadReg_T_6, fifoHeadReg_byte_wdata_4, fifoHeadReg_byte_original_4) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_5 = bits(_fifoHeadReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoHeadReg_T_15 = mux(_fifoHeadReg_T_7, fifoHeadReg_byte_wdata_5, fifoHeadReg_byte_original_5) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_6 = bits(_fifoHeadReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoHeadReg_T_16 = mux(_fifoHeadReg_T_8, fifoHeadReg_byte_wdata_6, fifoHeadReg_byte_original_6) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_7 = bits(_fifoHeadReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoHeadReg_T_17 = mux(_fifoHeadReg_T_9, fifoHeadReg_byte_wdata_7, fifoHeadReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoHeadReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[0] <= _fifoHeadReg_T_10 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[1] <= _fifoHeadReg_T_11 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[2] <= _fifoHeadReg_T_12 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[3] <= _fifoHeadReg_T_13 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[4] <= _fifoHeadReg_T_14 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[5] <= _fifoHeadReg_T_15 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[6] <= _fifoHeadReg_T_16 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[7] <= _fifoHeadReg_T_17 @[Interface.scala 254:12]
        node fifoHeadReg_lo_lo = cat(_fifoHeadReg_WIRE_1[1], _fifoHeadReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoHeadReg_lo_hi = cat(_fifoHeadReg_WIRE_1[3], _fifoHeadReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoHeadReg_lo = cat(fifoHeadReg_lo_hi, fifoHeadReg_lo_lo) @[Interface.scala 262:7]
        node fifoHeadReg_hi_lo = cat(_fifoHeadReg_WIRE_1[5], _fifoHeadReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoHeadReg_hi_hi = cat(_fifoHeadReg_WIRE_1[7], _fifoHeadReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoHeadReg_hi = cat(fifoHeadReg_hi_hi, fifoHeadReg_hi_lo) @[Interface.scala 262:7]
        node _fifoHeadReg_T_18 = cat(fifoHeadReg_hi, fifoHeadReg_lo) @[Interface.scala 262:7]
        wire _fifoHeadReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoHeadReg_WIRE_2 <= _fifoHeadReg_T_18 @[RegisterBlock.scala 118:82]
        fifoHeadReg <= _fifoHeadReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_65 = eq(UInt<6>("h28"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_65 : @[RegisterBlock.scala 252:38]
        wire _procInterrupt_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _procInterrupt_WIRE <= procInterrupt @[RegisterBlock.scala 118:51]
        node _procInterrupt_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _procInterrupt_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _procInterrupt_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _procInterrupt_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _procInterrupt_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _procInterrupt_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _procInterrupt_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _procInterrupt_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node procInterrupt_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node procInterrupt_byte_original = bits(_procInterrupt_WIRE, 7, 0) @[Interface.scala 258:39]
        node _procInterrupt_T_8 = mux(_procInterrupt_T, procInterrupt_byte_wdata, procInterrupt_byte_original) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node procInterrupt_byte_original_1 = bits(_procInterrupt_WIRE, 15, 8) @[Interface.scala 258:39]
        node _procInterrupt_T_9 = mux(_procInterrupt_T_1, procInterrupt_byte_wdata_1, procInterrupt_byte_original_1) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node procInterrupt_byte_original_2 = bits(_procInterrupt_WIRE, 23, 16) @[Interface.scala 258:39]
        node _procInterrupt_T_10 = mux(_procInterrupt_T_2, procInterrupt_byte_wdata_2, procInterrupt_byte_original_2) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node procInterrupt_byte_original_3 = bits(_procInterrupt_WIRE, 31, 24) @[Interface.scala 258:39]
        node _procInterrupt_T_11 = mux(_procInterrupt_T_3, procInterrupt_byte_wdata_3, procInterrupt_byte_original_3) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node procInterrupt_byte_original_4 = bits(_procInterrupt_WIRE, 39, 32) @[Interface.scala 258:39]
        node _procInterrupt_T_12 = mux(_procInterrupt_T_4, procInterrupt_byte_wdata_4, procInterrupt_byte_original_4) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node procInterrupt_byte_original_5 = bits(_procInterrupt_WIRE, 47, 40) @[Interface.scala 258:39]
        node _procInterrupt_T_13 = mux(_procInterrupt_T_5, procInterrupt_byte_wdata_5, procInterrupt_byte_original_5) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node procInterrupt_byte_original_6 = bits(_procInterrupt_WIRE, 55, 48) @[Interface.scala 258:39]
        node _procInterrupt_T_14 = mux(_procInterrupt_T_6, procInterrupt_byte_wdata_6, procInterrupt_byte_original_6) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node procInterrupt_byte_original_7 = bits(_procInterrupt_WIRE, 63, 56) @[Interface.scala 258:39]
        node _procInterrupt_T_15 = mux(_procInterrupt_T_7, procInterrupt_byte_wdata_7, procInterrupt_byte_original_7) @[Interface.scala 259:14]
        wire _procInterrupt_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[0] <= _procInterrupt_T_8 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[1] <= _procInterrupt_T_9 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[2] <= _procInterrupt_T_10 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[3] <= _procInterrupt_T_11 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[4] <= _procInterrupt_T_12 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[5] <= _procInterrupt_T_13 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[6] <= _procInterrupt_T_14 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[7] <= _procInterrupt_T_15 @[Interface.scala 254:12]
        node procInterrupt_lo_lo = cat(_procInterrupt_WIRE_1[1], _procInterrupt_WIRE_1[0]) @[Interface.scala 262:7]
        node procInterrupt_lo_hi = cat(_procInterrupt_WIRE_1[3], _procInterrupt_WIRE_1[2]) @[Interface.scala 262:7]
        node procInterrupt_lo = cat(procInterrupt_lo_hi, procInterrupt_lo_lo) @[Interface.scala 262:7]
        node procInterrupt_hi_lo = cat(_procInterrupt_WIRE_1[5], _procInterrupt_WIRE_1[4]) @[Interface.scala 262:7]
        node procInterrupt_hi_hi = cat(_procInterrupt_WIRE_1[7], _procInterrupt_WIRE_1[6]) @[Interface.scala 262:7]
        node procInterrupt_hi = cat(procInterrupt_hi_hi, procInterrupt_hi_lo) @[Interface.scala 262:7]
        node _procInterrupt_T_16 = cat(procInterrupt_hi, procInterrupt_lo) @[Interface.scala 262:7]
        wire _procInterrupt_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _procInterrupt_WIRE_2 <= _procInterrupt_T_16 @[RegisterBlock.scala 118:82]
        procInterrupt <= _procInterrupt_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_66 = asUInt(reset) @[RegisterBlock.scala 198:11]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
      when _T_67 : @[RegisterBlock.scala 198:11]
        node _T_68 = eq(wrReq, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
        when _T_68 : @[RegisterBlock.scala 198:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:198 assert(wrReq)\n") : printf_1 @[RegisterBlock.scala 198:11]
        assert(clock, wrReq, UInt<1>("h1"), "") : assert_1 @[RegisterBlock.scala 198:11]
      wrReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wrReqData_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp_1 : { resp : UInt<2>} @[RegisterBlock.scala 203:20]
      resp_1.resp <= UInt<2>("h0") @[RegisterBlock.scala 204:15]
      saxil.b.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.b.bits <= resp_1 @[Decoupled.scala 66:19]

  module Queue_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, count : UInt<3>}

    cmem ram : { data : UInt<64>, strb : UInt<8>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module virtualStealServer_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip axi_mgmt : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}, read_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip read_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, write_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip ntwDataUnitOccupancy : UInt<1>}

    wire saxil : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[RegisterBlock.scala 60:19]
    node _mask_T = asUInt(asSInt(UInt<6>("h3f"))) @[RegisterBlock.scala 159:36]
    node mask = xor(_mask_T, UInt<3>("h7")) @[RegisterBlock.scala 159:39]
    inst rdReq__deq of Queue_6 @[Decoupled.scala 377:21]
    rdReq__deq.clock <= clock
    rdReq__deq.reset <= reset
    rdReq__deq.io.enq.valid <= saxil.ar.valid @[Decoupled.scala 379:22]
    rdReq__deq.io.enq.bits.prot <= saxil.ar.bits.prot @[Decoupled.scala 380:21]
    rdReq__deq.io.enq.bits.addr <= saxil.ar.bits.addr @[Decoupled.scala 380:21]
    saxil.ar.ready <= rdReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire rdReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    rdReq_.bits <= rdReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    rdReq_.valid <= rdReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    rdReq__deq.io.deq.ready <= rdReq_.ready @[Decoupled.scala 420:15]
    inst wrReq__deq of Queue_7 @[Decoupled.scala 377:21]
    wrReq__deq.clock <= clock
    wrReq__deq.reset <= reset
    wrReq__deq.io.enq.valid <= saxil.aw.valid @[Decoupled.scala 379:22]
    wrReq__deq.io.enq.bits.prot <= saxil.aw.bits.prot @[Decoupled.scala 380:21]
    wrReq__deq.io.enq.bits.addr <= saxil.aw.bits.addr @[Decoupled.scala 380:21]
    saxil.aw.ready <= wrReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    wrReq_.bits <= wrReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReq_.valid <= wrReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReq__deq.io.deq.ready <= wrReq_.ready @[Decoupled.scala 420:15]
    inst wrReqData__deq of Queue_8 @[Decoupled.scala 377:21]
    wrReqData__deq.clock <= clock
    wrReqData__deq.reset <= reset
    wrReqData__deq.io.enq.valid <= saxil.w.valid @[Decoupled.scala 379:22]
    wrReqData__deq.io.enq.bits.strb <= saxil.w.bits.strb @[Decoupled.scala 380:21]
    wrReqData__deq.io.enq.bits.data <= saxil.w.bits.data @[Decoupled.scala 380:21]
    saxil.w.ready <= wrReqData__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReqData_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}} @[Decoupled.scala 417:19]
    wrReqData_.bits <= wrReqData__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReqData_.valid <= wrReqData__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReqData__deq.io.deq.ready <= wrReqData_.ready @[Decoupled.scala 420:15]
    rdReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.r.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.r.bits.resp is invalid @[Decoupled.scala 75:19]
    saxil.r.bits.data is invalid @[Decoupled.scala 75:19]
    wrReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    wrReqData_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.b.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.b.bits.resp is invalid @[Decoupled.scala 75:19]
    node rdReq = and(rdReq_.valid, saxil.r.ready) @[RegisterBlock.scala 210:44]
    node rdAddr = and(rdReq_.bits.addr, mask) @[RegisterBlock.scala 214:48]
    node _wrReq_T = and(wrReq_.valid, wrReqData_.valid) @[RegisterBlock.scala 241:43]
    node wrReq = and(_wrReq_T, saxil.b.ready) @[RegisterBlock.scala 241:63]
    node wrAddr = and(wrReq_.bits.addr, mask) @[RegisterBlock.scala 243:48]
    io.axi_mgmt.BRESP <= saxil.b.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.BVALID <= saxil.b.valid @[virtualStealServer.scala 58:20]
    saxil.b.ready <= io.axi_mgmt.BREADY @[virtualStealServer.scala 58:20]
    saxil.w.bits.strb <= io.axi_mgmt.WSTRB @[virtualStealServer.scala 58:20]
    saxil.w.bits.data <= io.axi_mgmt.WDATA @[virtualStealServer.scala 58:20]
    saxil.w.valid <= io.axi_mgmt.WVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.WREADY <= saxil.w.ready @[virtualStealServer.scala 58:20]
    saxil.aw.bits.prot <= io.axi_mgmt.AWPROT @[virtualStealServer.scala 58:20]
    saxil.aw.bits.addr <= io.axi_mgmt.AWADDR @[virtualStealServer.scala 58:20]
    saxil.aw.valid <= io.axi_mgmt.AWVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.AWREADY <= saxil.aw.ready @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RRESP <= saxil.r.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RDATA <= saxil.r.bits.data @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RVALID <= saxil.r.valid @[virtualStealServer.scala 58:20]
    saxil.r.ready <= io.axi_mgmt.RREADY @[virtualStealServer.scala 58:20]
    saxil.ar.bits.prot <= io.axi_mgmt.ARPROT @[virtualStealServer.scala 58:20]
    saxil.ar.bits.addr <= io.axi_mgmt.ARADDR @[virtualStealServer.scala 58:20]
    saxil.ar.valid <= io.axi_mgmt.ARVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.ARREADY <= saxil.ar.ready @[virtualStealServer.scala 58:20]
    reg rAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 61:44]
    reg rPause : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 62:44]
    reg procInterrupt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 63:44]
    reg maxLength : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 64:44]
    reg stateReg : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 65:44]
    wire currLen : UInt<64> @[virtualStealServer.scala 66:41]
    reg contentionCounter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 67:44]
    reg contentionThresh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h14")) @[virtualStealServer.scala 68:44]
    reg networkCongested : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 69:44]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 70:44]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 71:44]
    reg delta : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 72:44]
    reg fifoTailReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 73:44]
    reg fifoHeadReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 74:44]
    reg popOrPush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[virtualStealServer.scala 75:44]
    reg addrShift : UInt, clock with :
      reset => (reset, UInt<2>("h2")) @[virtualStealServer.scala 76:44]
    node _T = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[virtualStealServer.scala 89:10]
    node _T_1 = and(_T, io.ntwDataUnitOccupancy) @[virtualStealServer.scala 89:52]
    node _T_2 = neq(contentionCounter, UInt<5>("h18")) @[virtualStealServer.scala 91:31]
    node _T_3 = and(_T_1, _T_2) @[virtualStealServer.scala 91:10]
    when _T_3 : @[virtualStealServer.scala 91:57]
      node _contentionCounter_T = add(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 92:48]
      node _contentionCounter_T_1 = tail(_contentionCounter_T, 1) @[virtualStealServer.scala 92:48]
      contentionCounter <= _contentionCounter_T_1 @[virtualStealServer.scala 92:27]
    else :
      node _T_4 = neq(contentionCounter, UInt<1>("h0")) @[virtualStealServer.scala 94:36]
      node _T_5 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_4) @[virtualStealServer.scala 93:56]
      node _T_6 = eq(io.ntwDataUnitOccupancy, UInt<1>("h0")) @[virtualStealServer.scala 95:20]
      node _T_7 = and(_T_5, _T_6) @[virtualStealServer.scala 95:17]
      when _T_7 : @[virtualStealServer.scala 95:46]
        node _contentionCounter_T_2 = sub(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 96:48]
        node _contentionCounter_T_3 = tail(_contentionCounter_T_2, 1) @[virtualStealServer.scala 96:48]
        contentionCounter <= _contentionCounter_T_3 @[virtualStealServer.scala 96:27]
      else :
        contentionCounter <= contentionCounter @[virtualStealServer.scala 98:27]
    node _T_8 = add(contentionThresh, delta) @[virtualStealServer.scala 102:49]
    node _T_9 = tail(_T_8, 1) @[virtualStealServer.scala 102:49]
    node _T_10 = geq(contentionCounter, _T_9) @[virtualStealServer.scala 102:28]
    when _T_10 : @[virtualStealServer.scala 102:58]
      networkCongested <= UInt<1>("h1") @[virtualStealServer.scala 103:26]
    else :
      node _T_11 = sub(contentionThresh, delta) @[virtualStealServer.scala 104:54]
      node _T_12 = tail(_T_11, 1) @[virtualStealServer.scala 104:54]
      node _T_13 = lt(contentionCounter, _T_12) @[virtualStealServer.scala 104:34]
      when _T_13 : @[virtualStealServer.scala 104:63]
        networkCongested <= UInt<1>("h0") @[virtualStealServer.scala 105:26]
      else :
        networkCongested <= networkCongested @[virtualStealServer.scala 107:26]
    node _T_14 = eq(stateReg, UInt<1>("h0")) @[virtualStealServer.scala 112:19]
    when _T_14 : @[virtualStealServer.scala 112:34]
      node _T_15 = eq(currLen, maxLength) @[virtualStealServer.scala 113:23]
      node _T_16 = and(_T_15, networkCongested) @[virtualStealServer.scala 113:37]
      node _T_17 = eq(maxLength, UInt<1>("h0")) @[virtualStealServer.scala 113:71]
      node _T_18 = or(_T_16, _T_17) @[virtualStealServer.scala 113:58]
      when _T_18 : @[virtualStealServer.scala 113:79]
        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 114:22]
        rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 115:22]
      else :
        when networkCongested : @[virtualStealServer.scala 116:37]
          stateReg <= UInt<2>("h2") @[virtualStealServer.scala 117:22]
        else :
          node _T_19 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 118:20]
          node _T_20 = neq(currLen, UInt<1>("h0")) @[virtualStealServer.scala 118:49]
          node _T_21 = and(_T_19, _T_20) @[virtualStealServer.scala 118:38]
          when _T_21 : @[virtualStealServer.scala 118:57]
            stateReg <= UInt<3>("h6") @[virtualStealServer.scala 119:22]
          else :
            node _T_22 = neq(procInterrupt, UInt<1>("h0")) @[virtualStealServer.scala 120:34]
            when _T_22 : @[virtualStealServer.scala 120:42]
              stateReg <= UInt<4>("ha") @[virtualStealServer.scala 121:22]
              rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 122:22]
            else :
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 124:22]
    else :
      node _T_23 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 126:25]
      when _T_23 : @[virtualStealServer.scala 126:46]
        when io.connNetwork.data.availableTask.valid : @[virtualStealServer.scala 127:54]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 128:22]
        else :
          node _T_24 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 129:20]
          when _T_24 : @[virtualStealServer.scala 129:38]
            stateReg <= UInt<1>("h0") @[virtualStealServer.scala 130:22]
          else :
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 132:22]
      else :
        node _T_25 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 134:25]
        when _T_25 : @[virtualStealServer.scala 134:51]
          when io.write_address.ready : @[virtualStealServer.scala 135:37]
            stateReg <= UInt<2>("h3") @[virtualStealServer.scala 136:22]
          else :
            node _T_26 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 137:20]
            when _T_26 : @[virtualStealServer.scala 137:38]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 138:22]
            else :
              stateReg <= UInt<3>("h4") @[virtualStealServer.scala 140:22]
        else :
          node _T_27 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 142:25]
          when _T_27 : @[virtualStealServer.scala 142:44]
            when io.write_data.ready : @[virtualStealServer.scala 143:34]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 144:22]
              popOrPush <= UInt<1>("h0") @[virtualStealServer.scala 145:23]
              node _T_28 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 146:42]
              node _T_29 = tail(_T_28, 1) @[virtualStealServer.scala 146:42]
              node _T_30 = lt(fifoTailReg, _T_29) @[virtualStealServer.scala 146:30]
              when _T_30 : @[virtualStealServer.scala 146:48]
                node _fifoTailReg_T = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 147:44]
                node _fifoTailReg_T_1 = tail(_fifoTailReg_T, 1) @[virtualStealServer.scala 147:44]
                fifoTailReg <= _fifoTailReg_T_1 @[virtualStealServer.scala 147:29]
              else :
                fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 149:29]
            else :
              stateReg <= UInt<2>("h3") @[virtualStealServer.scala 152:22]
          else :
            node _T_31 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 154:25]
            when _T_31 : @[virtualStealServer.scala 154:50]
              when io.read_address.ready : @[virtualStealServer.scala 155:36]
                stateReg <= UInt<3>("h5") @[virtualStealServer.scala 156:22]
              else :
                when networkCongested : @[virtualStealServer.scala 157:37]
                  stateReg <= UInt<1>("h0") @[virtualStealServer.scala 158:22]
                else :
                  stateReg <= UInt<3>("h6") @[virtualStealServer.scala 160:22]
            else :
              node _T_32 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 162:25]
              when _T_32 : @[virtualStealServer.scala 162:43]
                when io.read_data.valid : @[virtualStealServer.scala 163:33]
                  stateReg <= UInt<4>("h8") @[virtualStealServer.scala 164:22]
                  popOrPush <= UInt<1>("h1") @[virtualStealServer.scala 165:23]
                  node _T_33 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 166:42]
                  node _T_34 = tail(_T_33, 1) @[virtualStealServer.scala 166:42]
                  node _T_35 = lt(fifoHeadReg, _T_34) @[virtualStealServer.scala 166:30]
                  when _T_35 : @[virtualStealServer.scala 166:48]
                    node _fifoHeadReg_T = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 167:44]
                    node _fifoHeadReg_T_1 = tail(_fifoHeadReg_T, 1) @[virtualStealServer.scala 167:44]
                    fifoHeadReg <= _fifoHeadReg_T_1 @[virtualStealServer.scala 167:29]
                  else :
                    fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 169:29]
                else :
                  stateReg <= UInt<3>("h5") @[virtualStealServer.scala 172:22]
              else :
                node _T_36 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 174:25]
                when _T_36 : @[virtualStealServer.scala 174:48]
                  when io.connNetwork.data.qOutTask.ready : @[virtualStealServer.scala 175:49]
                    stateReg <= UInt<1>("h0") @[virtualStealServer.scala 176:22]
                  else :
                    stateReg <= UInt<3>("h7") @[virtualStealServer.scala 178:22]
                else :
                  node _T_37 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 180:25]
                  when _T_37 : @[virtualStealServer.scala 180:54]
                    when io.connNetwork.ctrl.serveStealReq.ready : @[virtualStealServer.scala 181:54]
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 182:22]
                    else :
                      when networkCongested : @[virtualStealServer.scala 186:39]
                        stolenTaskReg <= giveTaskReg @[virtualStealServer.scala 187:27]
                        stateReg <= UInt<3>("h4") @[virtualStealServer.scala 188:22]
                      else :
                        stateReg <= UInt<4>("h8") @[virtualStealServer.scala 192:22]
                  else :
                    node _T_38 = eq(stateReg, UInt<4>("h9")) @[virtualStealServer.scala 194:25]
                    when _T_38 : @[virtualStealServer.scala 194:46]
                      node _T_39 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 195:21]
                      when _T_39 : @[virtualStealServer.scala 195:33]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 196:22]
                      else :
                        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 198:22]
                    else :
                      node _T_40 = eq(stateReg, UInt<4>("ha")) @[virtualStealServer.scala 200:25]
                      when _T_40 : @[virtualStealServer.scala 200:53]
                        node _T_41 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 201:21]
                        when _T_41 : @[virtualStealServer.scala 201:33]
                          stateReg <= UInt<1>("h0") @[virtualStealServer.scala 202:22]
                        else :
                          stateReg <= UInt<4>("ha") @[virtualStealServer.scala 204:22]
                      else :
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 207:18]
    io.connNetwork.data.qOutTask.bits <= giveTaskReg @[virtualStealServer.scala 210:45]
    io.write_data.bits <= stolenTaskReg @[virtualStealServer.scala 211:45]
    io.read_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 215:45]
    io.read_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 216:45]
    io.read_data.ready <= UInt<1>("h0") @[virtualStealServer.scala 217:45]
    io.write_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 218:45]
    io.write_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 219:45]
    io.write_data.valid <= UInt<1>("h0") @[virtualStealServer.scala 220:45]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[virtualStealServer.scala 222:45]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[virtualStealServer.scala 223:45]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 225:45]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 226:45]
    node _T_42 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 230:19]
    when _T_42 : @[virtualStealServer.scala 230:40]
      stolenTaskReg <= io.connNetwork.data.availableTask.bits @[virtualStealServer.scala 231:49]
      io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[virtualStealServer.scala 232:49]
    else :
      node _T_43 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 233:25]
      when _T_43 : @[virtualStealServer.scala 233:51]
        io.write_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 234:49]
        node _io_write_address_bits_T = dshl(fifoTailReg, addrShift) @[virtualStealServer.scala 235:65]
        node _io_write_address_bits_T_1 = add(_io_write_address_bits_T, rAddr) @[virtualStealServer.scala 235:79]
        node _io_write_address_bits_T_2 = tail(_io_write_address_bits_T_1, 1) @[virtualStealServer.scala 235:79]
        io.write_address.bits <= _io_write_address_bits_T_2 @[virtualStealServer.scala 235:49]
      else :
        node _T_44 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 236:25]
        when _T_44 : @[virtualStealServer.scala 236:44]
          io.write_data.valid <= UInt<1>("h1") @[virtualStealServer.scala 237:49]
        else :
          node _T_45 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 238:25]
          when _T_45 : @[virtualStealServer.scala 238:50]
            io.read_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 239:49]
            node _io_read_address_bits_T = dshl(fifoHeadReg, addrShift) @[virtualStealServer.scala 240:65]
            node _io_read_address_bits_T_1 = add(_io_read_address_bits_T, rAddr) @[virtualStealServer.scala 240:79]
            node _io_read_address_bits_T_2 = tail(_io_read_address_bits_T_1, 1) @[virtualStealServer.scala 240:79]
            io.read_address.bits <= _io_read_address_bits_T_2 @[virtualStealServer.scala 240:49]
          else :
            node _T_46 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 241:25]
            when _T_46 : @[virtualStealServer.scala 241:43]
              io.read_data.ready <= UInt<1>("h1") @[virtualStealServer.scala 242:49]
              giveTaskReg <= io.read_data.bits @[virtualStealServer.scala 243:49]
            else :
              node _T_47 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 244:25]
              when _T_47 : @[virtualStealServer.scala 244:48]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[virtualStealServer.scala 245:49]
              else :
                node _T_48 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 246:25]
                when _T_48 : @[virtualStealServer.scala 246:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[virtualStealServer.scala 247:49]
    reg lengthHistroy : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 251:32]
    node _T_49 = gt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 253:22]
    when _T_49 : @[virtualStealServer.scala 253:36]
      node _currLen_T = sub(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 254:32]
      node _currLen_T_1 = tail(_currLen_T, 1) @[virtualStealServer.scala 254:32]
      currLen <= _currLen_T_1 @[virtualStealServer.scala 254:17]
      lengthHistroy <= currLen @[virtualStealServer.scala 255:23]
    else :
      node _T_50 = lt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 256:28]
      when _T_50 : @[virtualStealServer.scala 256:42]
        node _currLen_T_2 = sub(maxLength, fifoHeadReg) @[virtualStealServer.scala 257:30]
        node _currLen_T_3 = tail(_currLen_T_2, 1) @[virtualStealServer.scala 257:30]
        node _currLen_T_4 = add(_currLen_T_3, fifoTailReg) @[virtualStealServer.scala 257:44]
        node _currLen_T_5 = tail(_currLen_T_4, 1) @[virtualStealServer.scala 257:44]
        currLen <= _currLen_T_5 @[virtualStealServer.scala 257:17]
        lengthHistroy <= currLen @[virtualStealServer.scala 258:23]
      else :
        lengthHistroy <= lengthHistroy @[virtualStealServer.scala 260:23]
        when popOrPush : @[virtualStealServer.scala 261:24]
          currLen <= UInt<1>("h0") @[virtualStealServer.scala 262:21]
        else :
          node _currLen_T_6 = add(lengthHistroy, UInt<1>("h1")) @[virtualStealServer.scala 264:38]
          node _currLen_T_7 = tail(_currLen_T_6, 1) @[virtualStealServer.scala 264:38]
          currLen <= _currLen_T_7 @[virtualStealServer.scala 264:21]
    when rdReq : @[virtualStealServer.scala 269:27]
      wire data : UInt<64> @[RegisterBlock.scala 217:20]
      node _data_T = asUInt(asSInt(UInt<64>("hffffffffffffffff"))) @[RegisterBlock.scala 220:29]
      data <= _data_T @[RegisterBlock.scala 220:10]
      node _T_51 = eq(UInt<1>("h0"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_51 : @[RegisterBlock.scala 224:38]
        data <= rPause @[RegisterBlock.scala 225:16]
      node _T_52 = eq(UInt<4>("h8"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_52 : @[RegisterBlock.scala 224:38]
        data <= rAddr @[RegisterBlock.scala 225:16]
      node _T_53 = eq(UInt<5>("h10"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_53 : @[RegisterBlock.scala 224:38]
        data <= maxLength @[RegisterBlock.scala 225:16]
      node _T_54 = eq(UInt<5>("h18"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_54 : @[RegisterBlock.scala 224:38]
        data <= fifoTailReg @[RegisterBlock.scala 225:16]
      node _T_55 = eq(UInt<6>("h20"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_55 : @[RegisterBlock.scala 224:38]
        data <= fifoHeadReg @[RegisterBlock.scala 225:16]
      node _T_56 = eq(UInt<6>("h28"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_56 : @[RegisterBlock.scala 224:38]
        data <= procInterrupt @[RegisterBlock.scala 225:16]
      node _T_57 = asUInt(reset) @[RegisterBlock.scala 182:11]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
      when _T_58 : @[RegisterBlock.scala 182:11]
        node _T_59 = eq(rdReq, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
        when _T_59 : @[RegisterBlock.scala 182:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:182 assert(rdReq)\n") : printf @[RegisterBlock.scala 182:11]
        assert(clock, rdReq, UInt<1>("h1"), "") : assert @[RegisterBlock.scala 182:11]
      rdReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp : { data : UInt<64>, resp : UInt<2>} @[RegisterBlock.scala 186:20]
      resp.data <= data @[RegisterBlock.scala 187:15]
      resp.resp <= UInt<2>("h0") @[RegisterBlock.scala 188:15]
      saxil.r.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.r.bits <= resp @[Decoupled.scala 66:19]
    when wrReq : @[virtualStealServer.scala 273:27]
      node _T_60 = eq(UInt<1>("h0"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_60 : @[RegisterBlock.scala 252:38]
        wire _rPause_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rPause_WIRE <= rPause @[RegisterBlock.scala 118:51]
        node _rPause_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rPause_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rPause_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rPause_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rPause_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rPause_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rPause_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rPause_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rPause_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rPause_byte_original = bits(_rPause_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rPause_T_8 = mux(_rPause_T, rPause_byte_wdata, rPause_byte_original) @[Interface.scala 259:14]
        node rPause_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rPause_byte_original_1 = bits(_rPause_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rPause_T_9 = mux(_rPause_T_1, rPause_byte_wdata_1, rPause_byte_original_1) @[Interface.scala 259:14]
        node rPause_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rPause_byte_original_2 = bits(_rPause_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rPause_T_10 = mux(_rPause_T_2, rPause_byte_wdata_2, rPause_byte_original_2) @[Interface.scala 259:14]
        node rPause_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rPause_byte_original_3 = bits(_rPause_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rPause_T_11 = mux(_rPause_T_3, rPause_byte_wdata_3, rPause_byte_original_3) @[Interface.scala 259:14]
        node rPause_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rPause_byte_original_4 = bits(_rPause_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rPause_T_12 = mux(_rPause_T_4, rPause_byte_wdata_4, rPause_byte_original_4) @[Interface.scala 259:14]
        node rPause_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rPause_byte_original_5 = bits(_rPause_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rPause_T_13 = mux(_rPause_T_5, rPause_byte_wdata_5, rPause_byte_original_5) @[Interface.scala 259:14]
        node rPause_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rPause_byte_original_6 = bits(_rPause_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rPause_T_14 = mux(_rPause_T_6, rPause_byte_wdata_6, rPause_byte_original_6) @[Interface.scala 259:14]
        node rPause_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rPause_byte_original_7 = bits(_rPause_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rPause_T_15 = mux(_rPause_T_7, rPause_byte_wdata_7, rPause_byte_original_7) @[Interface.scala 259:14]
        wire _rPause_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rPause_WIRE_1[0] <= _rPause_T_8 @[Interface.scala 254:12]
        _rPause_WIRE_1[1] <= _rPause_T_9 @[Interface.scala 254:12]
        _rPause_WIRE_1[2] <= _rPause_T_10 @[Interface.scala 254:12]
        _rPause_WIRE_1[3] <= _rPause_T_11 @[Interface.scala 254:12]
        _rPause_WIRE_1[4] <= _rPause_T_12 @[Interface.scala 254:12]
        _rPause_WIRE_1[5] <= _rPause_T_13 @[Interface.scala 254:12]
        _rPause_WIRE_1[6] <= _rPause_T_14 @[Interface.scala 254:12]
        _rPause_WIRE_1[7] <= _rPause_T_15 @[Interface.scala 254:12]
        node rPause_lo_lo = cat(_rPause_WIRE_1[1], _rPause_WIRE_1[0]) @[Interface.scala 262:7]
        node rPause_lo_hi = cat(_rPause_WIRE_1[3], _rPause_WIRE_1[2]) @[Interface.scala 262:7]
        node rPause_lo = cat(rPause_lo_hi, rPause_lo_lo) @[Interface.scala 262:7]
        node rPause_hi_lo = cat(_rPause_WIRE_1[5], _rPause_WIRE_1[4]) @[Interface.scala 262:7]
        node rPause_hi_hi = cat(_rPause_WIRE_1[7], _rPause_WIRE_1[6]) @[Interface.scala 262:7]
        node rPause_hi = cat(rPause_hi_hi, rPause_hi_lo) @[Interface.scala 262:7]
        node _rPause_T_16 = cat(rPause_hi, rPause_lo) @[Interface.scala 262:7]
        wire _rPause_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rPause_WIRE_2 <= _rPause_T_16 @[RegisterBlock.scala 118:82]
        rPause <= _rPause_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_61 = eq(UInt<4>("h8"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_61 : @[RegisterBlock.scala 252:38]
        wire _rAddr_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rAddr_WIRE <= rAddr @[RegisterBlock.scala 118:51]
        node _rAddr_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rAddr_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rAddr_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rAddr_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rAddr_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rAddr_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rAddr_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rAddr_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rAddr_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rAddr_byte_original = bits(_rAddr_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rAddr_T_8 = mux(_rAddr_T, rAddr_byte_wdata, rAddr_byte_original) @[Interface.scala 259:14]
        node rAddr_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rAddr_byte_original_1 = bits(_rAddr_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rAddr_T_9 = mux(_rAddr_T_1, rAddr_byte_wdata_1, rAddr_byte_original_1) @[Interface.scala 259:14]
        node rAddr_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rAddr_byte_original_2 = bits(_rAddr_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rAddr_T_10 = mux(_rAddr_T_2, rAddr_byte_wdata_2, rAddr_byte_original_2) @[Interface.scala 259:14]
        node rAddr_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rAddr_byte_original_3 = bits(_rAddr_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rAddr_T_11 = mux(_rAddr_T_3, rAddr_byte_wdata_3, rAddr_byte_original_3) @[Interface.scala 259:14]
        node rAddr_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rAddr_byte_original_4 = bits(_rAddr_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rAddr_T_12 = mux(_rAddr_T_4, rAddr_byte_wdata_4, rAddr_byte_original_4) @[Interface.scala 259:14]
        node rAddr_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rAddr_byte_original_5 = bits(_rAddr_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rAddr_T_13 = mux(_rAddr_T_5, rAddr_byte_wdata_5, rAddr_byte_original_5) @[Interface.scala 259:14]
        node rAddr_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rAddr_byte_original_6 = bits(_rAddr_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rAddr_T_14 = mux(_rAddr_T_6, rAddr_byte_wdata_6, rAddr_byte_original_6) @[Interface.scala 259:14]
        node rAddr_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rAddr_byte_original_7 = bits(_rAddr_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rAddr_T_15 = mux(_rAddr_T_7, rAddr_byte_wdata_7, rAddr_byte_original_7) @[Interface.scala 259:14]
        wire _rAddr_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rAddr_WIRE_1[0] <= _rAddr_T_8 @[Interface.scala 254:12]
        _rAddr_WIRE_1[1] <= _rAddr_T_9 @[Interface.scala 254:12]
        _rAddr_WIRE_1[2] <= _rAddr_T_10 @[Interface.scala 254:12]
        _rAddr_WIRE_1[3] <= _rAddr_T_11 @[Interface.scala 254:12]
        _rAddr_WIRE_1[4] <= _rAddr_T_12 @[Interface.scala 254:12]
        _rAddr_WIRE_1[5] <= _rAddr_T_13 @[Interface.scala 254:12]
        _rAddr_WIRE_1[6] <= _rAddr_T_14 @[Interface.scala 254:12]
        _rAddr_WIRE_1[7] <= _rAddr_T_15 @[Interface.scala 254:12]
        node rAddr_lo_lo = cat(_rAddr_WIRE_1[1], _rAddr_WIRE_1[0]) @[Interface.scala 262:7]
        node rAddr_lo_hi = cat(_rAddr_WIRE_1[3], _rAddr_WIRE_1[2]) @[Interface.scala 262:7]
        node rAddr_lo = cat(rAddr_lo_hi, rAddr_lo_lo) @[Interface.scala 262:7]
        node rAddr_hi_lo = cat(_rAddr_WIRE_1[5], _rAddr_WIRE_1[4]) @[Interface.scala 262:7]
        node rAddr_hi_hi = cat(_rAddr_WIRE_1[7], _rAddr_WIRE_1[6]) @[Interface.scala 262:7]
        node rAddr_hi = cat(rAddr_hi_hi, rAddr_hi_lo) @[Interface.scala 262:7]
        node _rAddr_T_16 = cat(rAddr_hi, rAddr_lo) @[Interface.scala 262:7]
        wire _rAddr_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rAddr_WIRE_2 <= _rAddr_T_16 @[RegisterBlock.scala 118:82]
        rAddr <= _rAddr_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_62 = eq(UInt<5>("h10"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_62 : @[RegisterBlock.scala 252:38]
        wire _maxLength_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _maxLength_WIRE <= maxLength @[RegisterBlock.scala 118:51]
        node _maxLength_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _maxLength_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _maxLength_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _maxLength_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _maxLength_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _maxLength_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _maxLength_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _maxLength_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node maxLength_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node maxLength_byte_original = bits(_maxLength_WIRE, 7, 0) @[Interface.scala 258:39]
        node _maxLength_T_8 = mux(_maxLength_T, maxLength_byte_wdata, maxLength_byte_original) @[Interface.scala 259:14]
        node maxLength_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node maxLength_byte_original_1 = bits(_maxLength_WIRE, 15, 8) @[Interface.scala 258:39]
        node _maxLength_T_9 = mux(_maxLength_T_1, maxLength_byte_wdata_1, maxLength_byte_original_1) @[Interface.scala 259:14]
        node maxLength_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node maxLength_byte_original_2 = bits(_maxLength_WIRE, 23, 16) @[Interface.scala 258:39]
        node _maxLength_T_10 = mux(_maxLength_T_2, maxLength_byte_wdata_2, maxLength_byte_original_2) @[Interface.scala 259:14]
        node maxLength_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node maxLength_byte_original_3 = bits(_maxLength_WIRE, 31, 24) @[Interface.scala 258:39]
        node _maxLength_T_11 = mux(_maxLength_T_3, maxLength_byte_wdata_3, maxLength_byte_original_3) @[Interface.scala 259:14]
        node maxLength_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node maxLength_byte_original_4 = bits(_maxLength_WIRE, 39, 32) @[Interface.scala 258:39]
        node _maxLength_T_12 = mux(_maxLength_T_4, maxLength_byte_wdata_4, maxLength_byte_original_4) @[Interface.scala 259:14]
        node maxLength_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node maxLength_byte_original_5 = bits(_maxLength_WIRE, 47, 40) @[Interface.scala 258:39]
        node _maxLength_T_13 = mux(_maxLength_T_5, maxLength_byte_wdata_5, maxLength_byte_original_5) @[Interface.scala 259:14]
        node maxLength_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node maxLength_byte_original_6 = bits(_maxLength_WIRE, 55, 48) @[Interface.scala 258:39]
        node _maxLength_T_14 = mux(_maxLength_T_6, maxLength_byte_wdata_6, maxLength_byte_original_6) @[Interface.scala 259:14]
        node maxLength_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node maxLength_byte_original_7 = bits(_maxLength_WIRE, 63, 56) @[Interface.scala 258:39]
        node _maxLength_T_15 = mux(_maxLength_T_7, maxLength_byte_wdata_7, maxLength_byte_original_7) @[Interface.scala 259:14]
        wire _maxLength_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _maxLength_WIRE_1[0] <= _maxLength_T_8 @[Interface.scala 254:12]
        _maxLength_WIRE_1[1] <= _maxLength_T_9 @[Interface.scala 254:12]
        _maxLength_WIRE_1[2] <= _maxLength_T_10 @[Interface.scala 254:12]
        _maxLength_WIRE_1[3] <= _maxLength_T_11 @[Interface.scala 254:12]
        _maxLength_WIRE_1[4] <= _maxLength_T_12 @[Interface.scala 254:12]
        _maxLength_WIRE_1[5] <= _maxLength_T_13 @[Interface.scala 254:12]
        _maxLength_WIRE_1[6] <= _maxLength_T_14 @[Interface.scala 254:12]
        _maxLength_WIRE_1[7] <= _maxLength_T_15 @[Interface.scala 254:12]
        node maxLength_lo_lo = cat(_maxLength_WIRE_1[1], _maxLength_WIRE_1[0]) @[Interface.scala 262:7]
        node maxLength_lo_hi = cat(_maxLength_WIRE_1[3], _maxLength_WIRE_1[2]) @[Interface.scala 262:7]
        node maxLength_lo = cat(maxLength_lo_hi, maxLength_lo_lo) @[Interface.scala 262:7]
        node maxLength_hi_lo = cat(_maxLength_WIRE_1[5], _maxLength_WIRE_1[4]) @[Interface.scala 262:7]
        node maxLength_hi_hi = cat(_maxLength_WIRE_1[7], _maxLength_WIRE_1[6]) @[Interface.scala 262:7]
        node maxLength_hi = cat(maxLength_hi_hi, maxLength_hi_lo) @[Interface.scala 262:7]
        node _maxLength_T_16 = cat(maxLength_hi, maxLength_lo) @[Interface.scala 262:7]
        wire _maxLength_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _maxLength_WIRE_2 <= _maxLength_T_16 @[RegisterBlock.scala 118:82]
        maxLength <= _maxLength_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_63 = eq(UInt<5>("h18"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_63 : @[RegisterBlock.scala 252:38]
        wire _fifoTailReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoTailReg_WIRE <= fifoTailReg @[RegisterBlock.scala 118:51]
        node _fifoTailReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoTailReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoTailReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoTailReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoTailReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoTailReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoTailReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoTailReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoTailReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoTailReg_byte_original = bits(_fifoTailReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoTailReg_T_10 = mux(_fifoTailReg_T_2, fifoTailReg_byte_wdata, fifoTailReg_byte_original) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_1 = bits(_fifoTailReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoTailReg_T_11 = mux(_fifoTailReg_T_3, fifoTailReg_byte_wdata_1, fifoTailReg_byte_original_1) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_2 = bits(_fifoTailReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoTailReg_T_12 = mux(_fifoTailReg_T_4, fifoTailReg_byte_wdata_2, fifoTailReg_byte_original_2) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_3 = bits(_fifoTailReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoTailReg_T_13 = mux(_fifoTailReg_T_5, fifoTailReg_byte_wdata_3, fifoTailReg_byte_original_3) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_4 = bits(_fifoTailReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoTailReg_T_14 = mux(_fifoTailReg_T_6, fifoTailReg_byte_wdata_4, fifoTailReg_byte_original_4) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_5 = bits(_fifoTailReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoTailReg_T_15 = mux(_fifoTailReg_T_7, fifoTailReg_byte_wdata_5, fifoTailReg_byte_original_5) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_6 = bits(_fifoTailReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoTailReg_T_16 = mux(_fifoTailReg_T_8, fifoTailReg_byte_wdata_6, fifoTailReg_byte_original_6) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_7 = bits(_fifoTailReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoTailReg_T_17 = mux(_fifoTailReg_T_9, fifoTailReg_byte_wdata_7, fifoTailReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoTailReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[0] <= _fifoTailReg_T_10 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[1] <= _fifoTailReg_T_11 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[2] <= _fifoTailReg_T_12 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[3] <= _fifoTailReg_T_13 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[4] <= _fifoTailReg_T_14 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[5] <= _fifoTailReg_T_15 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[6] <= _fifoTailReg_T_16 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[7] <= _fifoTailReg_T_17 @[Interface.scala 254:12]
        node fifoTailReg_lo_lo = cat(_fifoTailReg_WIRE_1[1], _fifoTailReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoTailReg_lo_hi = cat(_fifoTailReg_WIRE_1[3], _fifoTailReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoTailReg_lo = cat(fifoTailReg_lo_hi, fifoTailReg_lo_lo) @[Interface.scala 262:7]
        node fifoTailReg_hi_lo = cat(_fifoTailReg_WIRE_1[5], _fifoTailReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoTailReg_hi_hi = cat(_fifoTailReg_WIRE_1[7], _fifoTailReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoTailReg_hi = cat(fifoTailReg_hi_hi, fifoTailReg_hi_lo) @[Interface.scala 262:7]
        node _fifoTailReg_T_18 = cat(fifoTailReg_hi, fifoTailReg_lo) @[Interface.scala 262:7]
        wire _fifoTailReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoTailReg_WIRE_2 <= _fifoTailReg_T_18 @[RegisterBlock.scala 118:82]
        fifoTailReg <= _fifoTailReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_64 = eq(UInt<6>("h20"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_64 : @[RegisterBlock.scala 252:38]
        wire _fifoHeadReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoHeadReg_WIRE <= fifoHeadReg @[RegisterBlock.scala 118:51]
        node _fifoHeadReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoHeadReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoHeadReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoHeadReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoHeadReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoHeadReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoHeadReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoHeadReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoHeadReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original = bits(_fifoHeadReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoHeadReg_T_10 = mux(_fifoHeadReg_T_2, fifoHeadReg_byte_wdata, fifoHeadReg_byte_original) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_1 = bits(_fifoHeadReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoHeadReg_T_11 = mux(_fifoHeadReg_T_3, fifoHeadReg_byte_wdata_1, fifoHeadReg_byte_original_1) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_2 = bits(_fifoHeadReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoHeadReg_T_12 = mux(_fifoHeadReg_T_4, fifoHeadReg_byte_wdata_2, fifoHeadReg_byte_original_2) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_3 = bits(_fifoHeadReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoHeadReg_T_13 = mux(_fifoHeadReg_T_5, fifoHeadReg_byte_wdata_3, fifoHeadReg_byte_original_3) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_4 = bits(_fifoHeadReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoHeadReg_T_14 = mux(_fifoHeadReg_T_6, fifoHeadReg_byte_wdata_4, fifoHeadReg_byte_original_4) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_5 = bits(_fifoHeadReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoHeadReg_T_15 = mux(_fifoHeadReg_T_7, fifoHeadReg_byte_wdata_5, fifoHeadReg_byte_original_5) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_6 = bits(_fifoHeadReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoHeadReg_T_16 = mux(_fifoHeadReg_T_8, fifoHeadReg_byte_wdata_6, fifoHeadReg_byte_original_6) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_7 = bits(_fifoHeadReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoHeadReg_T_17 = mux(_fifoHeadReg_T_9, fifoHeadReg_byte_wdata_7, fifoHeadReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoHeadReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[0] <= _fifoHeadReg_T_10 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[1] <= _fifoHeadReg_T_11 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[2] <= _fifoHeadReg_T_12 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[3] <= _fifoHeadReg_T_13 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[4] <= _fifoHeadReg_T_14 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[5] <= _fifoHeadReg_T_15 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[6] <= _fifoHeadReg_T_16 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[7] <= _fifoHeadReg_T_17 @[Interface.scala 254:12]
        node fifoHeadReg_lo_lo = cat(_fifoHeadReg_WIRE_1[1], _fifoHeadReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoHeadReg_lo_hi = cat(_fifoHeadReg_WIRE_1[3], _fifoHeadReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoHeadReg_lo = cat(fifoHeadReg_lo_hi, fifoHeadReg_lo_lo) @[Interface.scala 262:7]
        node fifoHeadReg_hi_lo = cat(_fifoHeadReg_WIRE_1[5], _fifoHeadReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoHeadReg_hi_hi = cat(_fifoHeadReg_WIRE_1[7], _fifoHeadReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoHeadReg_hi = cat(fifoHeadReg_hi_hi, fifoHeadReg_hi_lo) @[Interface.scala 262:7]
        node _fifoHeadReg_T_18 = cat(fifoHeadReg_hi, fifoHeadReg_lo) @[Interface.scala 262:7]
        wire _fifoHeadReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoHeadReg_WIRE_2 <= _fifoHeadReg_T_18 @[RegisterBlock.scala 118:82]
        fifoHeadReg <= _fifoHeadReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_65 = eq(UInt<6>("h28"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_65 : @[RegisterBlock.scala 252:38]
        wire _procInterrupt_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _procInterrupt_WIRE <= procInterrupt @[RegisterBlock.scala 118:51]
        node _procInterrupt_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _procInterrupt_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _procInterrupt_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _procInterrupt_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _procInterrupt_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _procInterrupt_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _procInterrupt_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _procInterrupt_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node procInterrupt_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node procInterrupt_byte_original = bits(_procInterrupt_WIRE, 7, 0) @[Interface.scala 258:39]
        node _procInterrupt_T_8 = mux(_procInterrupt_T, procInterrupt_byte_wdata, procInterrupt_byte_original) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node procInterrupt_byte_original_1 = bits(_procInterrupt_WIRE, 15, 8) @[Interface.scala 258:39]
        node _procInterrupt_T_9 = mux(_procInterrupt_T_1, procInterrupt_byte_wdata_1, procInterrupt_byte_original_1) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node procInterrupt_byte_original_2 = bits(_procInterrupt_WIRE, 23, 16) @[Interface.scala 258:39]
        node _procInterrupt_T_10 = mux(_procInterrupt_T_2, procInterrupt_byte_wdata_2, procInterrupt_byte_original_2) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node procInterrupt_byte_original_3 = bits(_procInterrupt_WIRE, 31, 24) @[Interface.scala 258:39]
        node _procInterrupt_T_11 = mux(_procInterrupt_T_3, procInterrupt_byte_wdata_3, procInterrupt_byte_original_3) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node procInterrupt_byte_original_4 = bits(_procInterrupt_WIRE, 39, 32) @[Interface.scala 258:39]
        node _procInterrupt_T_12 = mux(_procInterrupt_T_4, procInterrupt_byte_wdata_4, procInterrupt_byte_original_4) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node procInterrupt_byte_original_5 = bits(_procInterrupt_WIRE, 47, 40) @[Interface.scala 258:39]
        node _procInterrupt_T_13 = mux(_procInterrupt_T_5, procInterrupt_byte_wdata_5, procInterrupt_byte_original_5) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node procInterrupt_byte_original_6 = bits(_procInterrupt_WIRE, 55, 48) @[Interface.scala 258:39]
        node _procInterrupt_T_14 = mux(_procInterrupt_T_6, procInterrupt_byte_wdata_6, procInterrupt_byte_original_6) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node procInterrupt_byte_original_7 = bits(_procInterrupt_WIRE, 63, 56) @[Interface.scala 258:39]
        node _procInterrupt_T_15 = mux(_procInterrupt_T_7, procInterrupt_byte_wdata_7, procInterrupt_byte_original_7) @[Interface.scala 259:14]
        wire _procInterrupt_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[0] <= _procInterrupt_T_8 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[1] <= _procInterrupt_T_9 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[2] <= _procInterrupt_T_10 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[3] <= _procInterrupt_T_11 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[4] <= _procInterrupt_T_12 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[5] <= _procInterrupt_T_13 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[6] <= _procInterrupt_T_14 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[7] <= _procInterrupt_T_15 @[Interface.scala 254:12]
        node procInterrupt_lo_lo = cat(_procInterrupt_WIRE_1[1], _procInterrupt_WIRE_1[0]) @[Interface.scala 262:7]
        node procInterrupt_lo_hi = cat(_procInterrupt_WIRE_1[3], _procInterrupt_WIRE_1[2]) @[Interface.scala 262:7]
        node procInterrupt_lo = cat(procInterrupt_lo_hi, procInterrupt_lo_lo) @[Interface.scala 262:7]
        node procInterrupt_hi_lo = cat(_procInterrupt_WIRE_1[5], _procInterrupt_WIRE_1[4]) @[Interface.scala 262:7]
        node procInterrupt_hi_hi = cat(_procInterrupt_WIRE_1[7], _procInterrupt_WIRE_1[6]) @[Interface.scala 262:7]
        node procInterrupt_hi = cat(procInterrupt_hi_hi, procInterrupt_hi_lo) @[Interface.scala 262:7]
        node _procInterrupt_T_16 = cat(procInterrupt_hi, procInterrupt_lo) @[Interface.scala 262:7]
        wire _procInterrupt_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _procInterrupt_WIRE_2 <= _procInterrupt_T_16 @[RegisterBlock.scala 118:82]
        procInterrupt <= _procInterrupt_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_66 = asUInt(reset) @[RegisterBlock.scala 198:11]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
      when _T_67 : @[RegisterBlock.scala 198:11]
        node _T_68 = eq(wrReq, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
        when _T_68 : @[RegisterBlock.scala 198:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:198 assert(wrReq)\n") : printf_1 @[RegisterBlock.scala 198:11]
        assert(clock, wrReq, UInt<1>("h1"), "") : assert_1 @[RegisterBlock.scala 198:11]
      wrReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wrReqData_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp_1 : { resp : UInt<2>} @[RegisterBlock.scala 203:20]
      resp_1.resp <= UInt<2>("h0") @[RegisterBlock.scala 204:15]
      saxil.b.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.b.bits <= resp_1 @[Decoupled.scala 66:19]

  module Queue_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, count : UInt<3>}

    cmem ram : { data : UInt<64>, strb : UInt<8>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module virtualStealServer_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip axi_mgmt : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}, read_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip read_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, write_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip ntwDataUnitOccupancy : UInt<1>}

    wire saxil : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[RegisterBlock.scala 60:19]
    node _mask_T = asUInt(asSInt(UInt<6>("h3f"))) @[RegisterBlock.scala 159:36]
    node mask = xor(_mask_T, UInt<3>("h7")) @[RegisterBlock.scala 159:39]
    inst rdReq__deq of Queue_9 @[Decoupled.scala 377:21]
    rdReq__deq.clock <= clock
    rdReq__deq.reset <= reset
    rdReq__deq.io.enq.valid <= saxil.ar.valid @[Decoupled.scala 379:22]
    rdReq__deq.io.enq.bits.prot <= saxil.ar.bits.prot @[Decoupled.scala 380:21]
    rdReq__deq.io.enq.bits.addr <= saxil.ar.bits.addr @[Decoupled.scala 380:21]
    saxil.ar.ready <= rdReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire rdReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    rdReq_.bits <= rdReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    rdReq_.valid <= rdReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    rdReq__deq.io.deq.ready <= rdReq_.ready @[Decoupled.scala 420:15]
    inst wrReq__deq of Queue_10 @[Decoupled.scala 377:21]
    wrReq__deq.clock <= clock
    wrReq__deq.reset <= reset
    wrReq__deq.io.enq.valid <= saxil.aw.valid @[Decoupled.scala 379:22]
    wrReq__deq.io.enq.bits.prot <= saxil.aw.bits.prot @[Decoupled.scala 380:21]
    wrReq__deq.io.enq.bits.addr <= saxil.aw.bits.addr @[Decoupled.scala 380:21]
    saxil.aw.ready <= wrReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    wrReq_.bits <= wrReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReq_.valid <= wrReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReq__deq.io.deq.ready <= wrReq_.ready @[Decoupled.scala 420:15]
    inst wrReqData__deq of Queue_11 @[Decoupled.scala 377:21]
    wrReqData__deq.clock <= clock
    wrReqData__deq.reset <= reset
    wrReqData__deq.io.enq.valid <= saxil.w.valid @[Decoupled.scala 379:22]
    wrReqData__deq.io.enq.bits.strb <= saxil.w.bits.strb @[Decoupled.scala 380:21]
    wrReqData__deq.io.enq.bits.data <= saxil.w.bits.data @[Decoupled.scala 380:21]
    saxil.w.ready <= wrReqData__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReqData_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}} @[Decoupled.scala 417:19]
    wrReqData_.bits <= wrReqData__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReqData_.valid <= wrReqData__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReqData__deq.io.deq.ready <= wrReqData_.ready @[Decoupled.scala 420:15]
    rdReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.r.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.r.bits.resp is invalid @[Decoupled.scala 75:19]
    saxil.r.bits.data is invalid @[Decoupled.scala 75:19]
    wrReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    wrReqData_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.b.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.b.bits.resp is invalid @[Decoupled.scala 75:19]
    node rdReq = and(rdReq_.valid, saxil.r.ready) @[RegisterBlock.scala 210:44]
    node rdAddr = and(rdReq_.bits.addr, mask) @[RegisterBlock.scala 214:48]
    node _wrReq_T = and(wrReq_.valid, wrReqData_.valid) @[RegisterBlock.scala 241:43]
    node wrReq = and(_wrReq_T, saxil.b.ready) @[RegisterBlock.scala 241:63]
    node wrAddr = and(wrReq_.bits.addr, mask) @[RegisterBlock.scala 243:48]
    io.axi_mgmt.BRESP <= saxil.b.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.BVALID <= saxil.b.valid @[virtualStealServer.scala 58:20]
    saxil.b.ready <= io.axi_mgmt.BREADY @[virtualStealServer.scala 58:20]
    saxil.w.bits.strb <= io.axi_mgmt.WSTRB @[virtualStealServer.scala 58:20]
    saxil.w.bits.data <= io.axi_mgmt.WDATA @[virtualStealServer.scala 58:20]
    saxil.w.valid <= io.axi_mgmt.WVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.WREADY <= saxil.w.ready @[virtualStealServer.scala 58:20]
    saxil.aw.bits.prot <= io.axi_mgmt.AWPROT @[virtualStealServer.scala 58:20]
    saxil.aw.bits.addr <= io.axi_mgmt.AWADDR @[virtualStealServer.scala 58:20]
    saxil.aw.valid <= io.axi_mgmt.AWVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.AWREADY <= saxil.aw.ready @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RRESP <= saxil.r.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RDATA <= saxil.r.bits.data @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RVALID <= saxil.r.valid @[virtualStealServer.scala 58:20]
    saxil.r.ready <= io.axi_mgmt.RREADY @[virtualStealServer.scala 58:20]
    saxil.ar.bits.prot <= io.axi_mgmt.ARPROT @[virtualStealServer.scala 58:20]
    saxil.ar.bits.addr <= io.axi_mgmt.ARADDR @[virtualStealServer.scala 58:20]
    saxil.ar.valid <= io.axi_mgmt.ARVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.ARREADY <= saxil.ar.ready @[virtualStealServer.scala 58:20]
    reg rAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 61:44]
    reg rPause : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 62:44]
    reg procInterrupt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 63:44]
    reg maxLength : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 64:44]
    reg stateReg : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 65:44]
    wire currLen : UInt<64> @[virtualStealServer.scala 66:41]
    reg contentionCounter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 67:44]
    reg contentionThresh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h14")) @[virtualStealServer.scala 68:44]
    reg networkCongested : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 69:44]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 70:44]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 71:44]
    reg delta : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 72:44]
    reg fifoTailReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 73:44]
    reg fifoHeadReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 74:44]
    reg popOrPush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[virtualStealServer.scala 75:44]
    reg addrShift : UInt, clock with :
      reset => (reset, UInt<2>("h2")) @[virtualStealServer.scala 76:44]
    node _T = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[virtualStealServer.scala 89:10]
    node _T_1 = and(_T, io.ntwDataUnitOccupancy) @[virtualStealServer.scala 89:52]
    node _T_2 = neq(contentionCounter, UInt<5>("h18")) @[virtualStealServer.scala 91:31]
    node _T_3 = and(_T_1, _T_2) @[virtualStealServer.scala 91:10]
    when _T_3 : @[virtualStealServer.scala 91:57]
      node _contentionCounter_T = add(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 92:48]
      node _contentionCounter_T_1 = tail(_contentionCounter_T, 1) @[virtualStealServer.scala 92:48]
      contentionCounter <= _contentionCounter_T_1 @[virtualStealServer.scala 92:27]
    else :
      node _T_4 = neq(contentionCounter, UInt<1>("h0")) @[virtualStealServer.scala 94:36]
      node _T_5 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_4) @[virtualStealServer.scala 93:56]
      node _T_6 = eq(io.ntwDataUnitOccupancy, UInt<1>("h0")) @[virtualStealServer.scala 95:20]
      node _T_7 = and(_T_5, _T_6) @[virtualStealServer.scala 95:17]
      when _T_7 : @[virtualStealServer.scala 95:46]
        node _contentionCounter_T_2 = sub(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 96:48]
        node _contentionCounter_T_3 = tail(_contentionCounter_T_2, 1) @[virtualStealServer.scala 96:48]
        contentionCounter <= _contentionCounter_T_3 @[virtualStealServer.scala 96:27]
      else :
        contentionCounter <= contentionCounter @[virtualStealServer.scala 98:27]
    node _T_8 = add(contentionThresh, delta) @[virtualStealServer.scala 102:49]
    node _T_9 = tail(_T_8, 1) @[virtualStealServer.scala 102:49]
    node _T_10 = geq(contentionCounter, _T_9) @[virtualStealServer.scala 102:28]
    when _T_10 : @[virtualStealServer.scala 102:58]
      networkCongested <= UInt<1>("h1") @[virtualStealServer.scala 103:26]
    else :
      node _T_11 = sub(contentionThresh, delta) @[virtualStealServer.scala 104:54]
      node _T_12 = tail(_T_11, 1) @[virtualStealServer.scala 104:54]
      node _T_13 = lt(contentionCounter, _T_12) @[virtualStealServer.scala 104:34]
      when _T_13 : @[virtualStealServer.scala 104:63]
        networkCongested <= UInt<1>("h0") @[virtualStealServer.scala 105:26]
      else :
        networkCongested <= networkCongested @[virtualStealServer.scala 107:26]
    node _T_14 = eq(stateReg, UInt<1>("h0")) @[virtualStealServer.scala 112:19]
    when _T_14 : @[virtualStealServer.scala 112:34]
      node _T_15 = eq(currLen, maxLength) @[virtualStealServer.scala 113:23]
      node _T_16 = and(_T_15, networkCongested) @[virtualStealServer.scala 113:37]
      node _T_17 = eq(maxLength, UInt<1>("h0")) @[virtualStealServer.scala 113:71]
      node _T_18 = or(_T_16, _T_17) @[virtualStealServer.scala 113:58]
      when _T_18 : @[virtualStealServer.scala 113:79]
        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 114:22]
        rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 115:22]
      else :
        when networkCongested : @[virtualStealServer.scala 116:37]
          stateReg <= UInt<2>("h2") @[virtualStealServer.scala 117:22]
        else :
          node _T_19 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 118:20]
          node _T_20 = neq(currLen, UInt<1>("h0")) @[virtualStealServer.scala 118:49]
          node _T_21 = and(_T_19, _T_20) @[virtualStealServer.scala 118:38]
          when _T_21 : @[virtualStealServer.scala 118:57]
            stateReg <= UInt<3>("h6") @[virtualStealServer.scala 119:22]
          else :
            node _T_22 = neq(procInterrupt, UInt<1>("h0")) @[virtualStealServer.scala 120:34]
            when _T_22 : @[virtualStealServer.scala 120:42]
              stateReg <= UInt<4>("ha") @[virtualStealServer.scala 121:22]
              rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 122:22]
            else :
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 124:22]
    else :
      node _T_23 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 126:25]
      when _T_23 : @[virtualStealServer.scala 126:46]
        when io.connNetwork.data.availableTask.valid : @[virtualStealServer.scala 127:54]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 128:22]
        else :
          node _T_24 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 129:20]
          when _T_24 : @[virtualStealServer.scala 129:38]
            stateReg <= UInt<1>("h0") @[virtualStealServer.scala 130:22]
          else :
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 132:22]
      else :
        node _T_25 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 134:25]
        when _T_25 : @[virtualStealServer.scala 134:51]
          when io.write_address.ready : @[virtualStealServer.scala 135:37]
            stateReg <= UInt<2>("h3") @[virtualStealServer.scala 136:22]
          else :
            node _T_26 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 137:20]
            when _T_26 : @[virtualStealServer.scala 137:38]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 138:22]
            else :
              stateReg <= UInt<3>("h4") @[virtualStealServer.scala 140:22]
        else :
          node _T_27 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 142:25]
          when _T_27 : @[virtualStealServer.scala 142:44]
            when io.write_data.ready : @[virtualStealServer.scala 143:34]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 144:22]
              popOrPush <= UInt<1>("h0") @[virtualStealServer.scala 145:23]
              node _T_28 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 146:42]
              node _T_29 = tail(_T_28, 1) @[virtualStealServer.scala 146:42]
              node _T_30 = lt(fifoTailReg, _T_29) @[virtualStealServer.scala 146:30]
              when _T_30 : @[virtualStealServer.scala 146:48]
                node _fifoTailReg_T = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 147:44]
                node _fifoTailReg_T_1 = tail(_fifoTailReg_T, 1) @[virtualStealServer.scala 147:44]
                fifoTailReg <= _fifoTailReg_T_1 @[virtualStealServer.scala 147:29]
              else :
                fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 149:29]
            else :
              stateReg <= UInt<2>("h3") @[virtualStealServer.scala 152:22]
          else :
            node _T_31 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 154:25]
            when _T_31 : @[virtualStealServer.scala 154:50]
              when io.read_address.ready : @[virtualStealServer.scala 155:36]
                stateReg <= UInt<3>("h5") @[virtualStealServer.scala 156:22]
              else :
                when networkCongested : @[virtualStealServer.scala 157:37]
                  stateReg <= UInt<1>("h0") @[virtualStealServer.scala 158:22]
                else :
                  stateReg <= UInt<3>("h6") @[virtualStealServer.scala 160:22]
            else :
              node _T_32 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 162:25]
              when _T_32 : @[virtualStealServer.scala 162:43]
                when io.read_data.valid : @[virtualStealServer.scala 163:33]
                  stateReg <= UInt<4>("h8") @[virtualStealServer.scala 164:22]
                  popOrPush <= UInt<1>("h1") @[virtualStealServer.scala 165:23]
                  node _T_33 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 166:42]
                  node _T_34 = tail(_T_33, 1) @[virtualStealServer.scala 166:42]
                  node _T_35 = lt(fifoHeadReg, _T_34) @[virtualStealServer.scala 166:30]
                  when _T_35 : @[virtualStealServer.scala 166:48]
                    node _fifoHeadReg_T = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 167:44]
                    node _fifoHeadReg_T_1 = tail(_fifoHeadReg_T, 1) @[virtualStealServer.scala 167:44]
                    fifoHeadReg <= _fifoHeadReg_T_1 @[virtualStealServer.scala 167:29]
                  else :
                    fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 169:29]
                else :
                  stateReg <= UInt<3>("h5") @[virtualStealServer.scala 172:22]
              else :
                node _T_36 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 174:25]
                when _T_36 : @[virtualStealServer.scala 174:48]
                  when io.connNetwork.data.qOutTask.ready : @[virtualStealServer.scala 175:49]
                    stateReg <= UInt<1>("h0") @[virtualStealServer.scala 176:22]
                  else :
                    stateReg <= UInt<3>("h7") @[virtualStealServer.scala 178:22]
                else :
                  node _T_37 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 180:25]
                  when _T_37 : @[virtualStealServer.scala 180:54]
                    when io.connNetwork.ctrl.serveStealReq.ready : @[virtualStealServer.scala 181:54]
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 182:22]
                    else :
                      when networkCongested : @[virtualStealServer.scala 186:39]
                        stolenTaskReg <= giveTaskReg @[virtualStealServer.scala 187:27]
                        stateReg <= UInt<3>("h4") @[virtualStealServer.scala 188:22]
                      else :
                        stateReg <= UInt<4>("h8") @[virtualStealServer.scala 192:22]
                  else :
                    node _T_38 = eq(stateReg, UInt<4>("h9")) @[virtualStealServer.scala 194:25]
                    when _T_38 : @[virtualStealServer.scala 194:46]
                      node _T_39 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 195:21]
                      when _T_39 : @[virtualStealServer.scala 195:33]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 196:22]
                      else :
                        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 198:22]
                    else :
                      node _T_40 = eq(stateReg, UInt<4>("ha")) @[virtualStealServer.scala 200:25]
                      when _T_40 : @[virtualStealServer.scala 200:53]
                        node _T_41 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 201:21]
                        when _T_41 : @[virtualStealServer.scala 201:33]
                          stateReg <= UInt<1>("h0") @[virtualStealServer.scala 202:22]
                        else :
                          stateReg <= UInt<4>("ha") @[virtualStealServer.scala 204:22]
                      else :
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 207:18]
    io.connNetwork.data.qOutTask.bits <= giveTaskReg @[virtualStealServer.scala 210:45]
    io.write_data.bits <= stolenTaskReg @[virtualStealServer.scala 211:45]
    io.read_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 215:45]
    io.read_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 216:45]
    io.read_data.ready <= UInt<1>("h0") @[virtualStealServer.scala 217:45]
    io.write_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 218:45]
    io.write_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 219:45]
    io.write_data.valid <= UInt<1>("h0") @[virtualStealServer.scala 220:45]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[virtualStealServer.scala 222:45]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[virtualStealServer.scala 223:45]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 225:45]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 226:45]
    node _T_42 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 230:19]
    when _T_42 : @[virtualStealServer.scala 230:40]
      stolenTaskReg <= io.connNetwork.data.availableTask.bits @[virtualStealServer.scala 231:49]
      io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[virtualStealServer.scala 232:49]
    else :
      node _T_43 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 233:25]
      when _T_43 : @[virtualStealServer.scala 233:51]
        io.write_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 234:49]
        node _io_write_address_bits_T = dshl(fifoTailReg, addrShift) @[virtualStealServer.scala 235:65]
        node _io_write_address_bits_T_1 = add(_io_write_address_bits_T, rAddr) @[virtualStealServer.scala 235:79]
        node _io_write_address_bits_T_2 = tail(_io_write_address_bits_T_1, 1) @[virtualStealServer.scala 235:79]
        io.write_address.bits <= _io_write_address_bits_T_2 @[virtualStealServer.scala 235:49]
      else :
        node _T_44 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 236:25]
        when _T_44 : @[virtualStealServer.scala 236:44]
          io.write_data.valid <= UInt<1>("h1") @[virtualStealServer.scala 237:49]
        else :
          node _T_45 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 238:25]
          when _T_45 : @[virtualStealServer.scala 238:50]
            io.read_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 239:49]
            node _io_read_address_bits_T = dshl(fifoHeadReg, addrShift) @[virtualStealServer.scala 240:65]
            node _io_read_address_bits_T_1 = add(_io_read_address_bits_T, rAddr) @[virtualStealServer.scala 240:79]
            node _io_read_address_bits_T_2 = tail(_io_read_address_bits_T_1, 1) @[virtualStealServer.scala 240:79]
            io.read_address.bits <= _io_read_address_bits_T_2 @[virtualStealServer.scala 240:49]
          else :
            node _T_46 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 241:25]
            when _T_46 : @[virtualStealServer.scala 241:43]
              io.read_data.ready <= UInt<1>("h1") @[virtualStealServer.scala 242:49]
              giveTaskReg <= io.read_data.bits @[virtualStealServer.scala 243:49]
            else :
              node _T_47 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 244:25]
              when _T_47 : @[virtualStealServer.scala 244:48]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[virtualStealServer.scala 245:49]
              else :
                node _T_48 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 246:25]
                when _T_48 : @[virtualStealServer.scala 246:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[virtualStealServer.scala 247:49]
    reg lengthHistroy : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 251:32]
    node _T_49 = gt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 253:22]
    when _T_49 : @[virtualStealServer.scala 253:36]
      node _currLen_T = sub(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 254:32]
      node _currLen_T_1 = tail(_currLen_T, 1) @[virtualStealServer.scala 254:32]
      currLen <= _currLen_T_1 @[virtualStealServer.scala 254:17]
      lengthHistroy <= currLen @[virtualStealServer.scala 255:23]
    else :
      node _T_50 = lt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 256:28]
      when _T_50 : @[virtualStealServer.scala 256:42]
        node _currLen_T_2 = sub(maxLength, fifoHeadReg) @[virtualStealServer.scala 257:30]
        node _currLen_T_3 = tail(_currLen_T_2, 1) @[virtualStealServer.scala 257:30]
        node _currLen_T_4 = add(_currLen_T_3, fifoTailReg) @[virtualStealServer.scala 257:44]
        node _currLen_T_5 = tail(_currLen_T_4, 1) @[virtualStealServer.scala 257:44]
        currLen <= _currLen_T_5 @[virtualStealServer.scala 257:17]
        lengthHistroy <= currLen @[virtualStealServer.scala 258:23]
      else :
        lengthHistroy <= lengthHistroy @[virtualStealServer.scala 260:23]
        when popOrPush : @[virtualStealServer.scala 261:24]
          currLen <= UInt<1>("h0") @[virtualStealServer.scala 262:21]
        else :
          node _currLen_T_6 = add(lengthHistroy, UInt<1>("h1")) @[virtualStealServer.scala 264:38]
          node _currLen_T_7 = tail(_currLen_T_6, 1) @[virtualStealServer.scala 264:38]
          currLen <= _currLen_T_7 @[virtualStealServer.scala 264:21]
    when rdReq : @[virtualStealServer.scala 269:27]
      wire data : UInt<64> @[RegisterBlock.scala 217:20]
      node _data_T = asUInt(asSInt(UInt<64>("hffffffffffffffff"))) @[RegisterBlock.scala 220:29]
      data <= _data_T @[RegisterBlock.scala 220:10]
      node _T_51 = eq(UInt<1>("h0"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_51 : @[RegisterBlock.scala 224:38]
        data <= rPause @[RegisterBlock.scala 225:16]
      node _T_52 = eq(UInt<4>("h8"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_52 : @[RegisterBlock.scala 224:38]
        data <= rAddr @[RegisterBlock.scala 225:16]
      node _T_53 = eq(UInt<5>("h10"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_53 : @[RegisterBlock.scala 224:38]
        data <= maxLength @[RegisterBlock.scala 225:16]
      node _T_54 = eq(UInt<5>("h18"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_54 : @[RegisterBlock.scala 224:38]
        data <= fifoTailReg @[RegisterBlock.scala 225:16]
      node _T_55 = eq(UInt<6>("h20"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_55 : @[RegisterBlock.scala 224:38]
        data <= fifoHeadReg @[RegisterBlock.scala 225:16]
      node _T_56 = eq(UInt<6>("h28"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_56 : @[RegisterBlock.scala 224:38]
        data <= procInterrupt @[RegisterBlock.scala 225:16]
      node _T_57 = asUInt(reset) @[RegisterBlock.scala 182:11]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
      when _T_58 : @[RegisterBlock.scala 182:11]
        node _T_59 = eq(rdReq, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
        when _T_59 : @[RegisterBlock.scala 182:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:182 assert(rdReq)\n") : printf @[RegisterBlock.scala 182:11]
        assert(clock, rdReq, UInt<1>("h1"), "") : assert @[RegisterBlock.scala 182:11]
      rdReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp : { data : UInt<64>, resp : UInt<2>} @[RegisterBlock.scala 186:20]
      resp.data <= data @[RegisterBlock.scala 187:15]
      resp.resp <= UInt<2>("h0") @[RegisterBlock.scala 188:15]
      saxil.r.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.r.bits <= resp @[Decoupled.scala 66:19]
    when wrReq : @[virtualStealServer.scala 273:27]
      node _T_60 = eq(UInt<1>("h0"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_60 : @[RegisterBlock.scala 252:38]
        wire _rPause_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rPause_WIRE <= rPause @[RegisterBlock.scala 118:51]
        node _rPause_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rPause_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rPause_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rPause_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rPause_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rPause_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rPause_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rPause_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rPause_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rPause_byte_original = bits(_rPause_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rPause_T_8 = mux(_rPause_T, rPause_byte_wdata, rPause_byte_original) @[Interface.scala 259:14]
        node rPause_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rPause_byte_original_1 = bits(_rPause_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rPause_T_9 = mux(_rPause_T_1, rPause_byte_wdata_1, rPause_byte_original_1) @[Interface.scala 259:14]
        node rPause_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rPause_byte_original_2 = bits(_rPause_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rPause_T_10 = mux(_rPause_T_2, rPause_byte_wdata_2, rPause_byte_original_2) @[Interface.scala 259:14]
        node rPause_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rPause_byte_original_3 = bits(_rPause_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rPause_T_11 = mux(_rPause_T_3, rPause_byte_wdata_3, rPause_byte_original_3) @[Interface.scala 259:14]
        node rPause_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rPause_byte_original_4 = bits(_rPause_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rPause_T_12 = mux(_rPause_T_4, rPause_byte_wdata_4, rPause_byte_original_4) @[Interface.scala 259:14]
        node rPause_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rPause_byte_original_5 = bits(_rPause_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rPause_T_13 = mux(_rPause_T_5, rPause_byte_wdata_5, rPause_byte_original_5) @[Interface.scala 259:14]
        node rPause_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rPause_byte_original_6 = bits(_rPause_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rPause_T_14 = mux(_rPause_T_6, rPause_byte_wdata_6, rPause_byte_original_6) @[Interface.scala 259:14]
        node rPause_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rPause_byte_original_7 = bits(_rPause_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rPause_T_15 = mux(_rPause_T_7, rPause_byte_wdata_7, rPause_byte_original_7) @[Interface.scala 259:14]
        wire _rPause_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rPause_WIRE_1[0] <= _rPause_T_8 @[Interface.scala 254:12]
        _rPause_WIRE_1[1] <= _rPause_T_9 @[Interface.scala 254:12]
        _rPause_WIRE_1[2] <= _rPause_T_10 @[Interface.scala 254:12]
        _rPause_WIRE_1[3] <= _rPause_T_11 @[Interface.scala 254:12]
        _rPause_WIRE_1[4] <= _rPause_T_12 @[Interface.scala 254:12]
        _rPause_WIRE_1[5] <= _rPause_T_13 @[Interface.scala 254:12]
        _rPause_WIRE_1[6] <= _rPause_T_14 @[Interface.scala 254:12]
        _rPause_WIRE_1[7] <= _rPause_T_15 @[Interface.scala 254:12]
        node rPause_lo_lo = cat(_rPause_WIRE_1[1], _rPause_WIRE_1[0]) @[Interface.scala 262:7]
        node rPause_lo_hi = cat(_rPause_WIRE_1[3], _rPause_WIRE_1[2]) @[Interface.scala 262:7]
        node rPause_lo = cat(rPause_lo_hi, rPause_lo_lo) @[Interface.scala 262:7]
        node rPause_hi_lo = cat(_rPause_WIRE_1[5], _rPause_WIRE_1[4]) @[Interface.scala 262:7]
        node rPause_hi_hi = cat(_rPause_WIRE_1[7], _rPause_WIRE_1[6]) @[Interface.scala 262:7]
        node rPause_hi = cat(rPause_hi_hi, rPause_hi_lo) @[Interface.scala 262:7]
        node _rPause_T_16 = cat(rPause_hi, rPause_lo) @[Interface.scala 262:7]
        wire _rPause_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rPause_WIRE_2 <= _rPause_T_16 @[RegisterBlock.scala 118:82]
        rPause <= _rPause_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_61 = eq(UInt<4>("h8"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_61 : @[RegisterBlock.scala 252:38]
        wire _rAddr_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rAddr_WIRE <= rAddr @[RegisterBlock.scala 118:51]
        node _rAddr_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rAddr_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rAddr_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rAddr_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rAddr_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rAddr_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rAddr_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rAddr_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rAddr_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rAddr_byte_original = bits(_rAddr_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rAddr_T_8 = mux(_rAddr_T, rAddr_byte_wdata, rAddr_byte_original) @[Interface.scala 259:14]
        node rAddr_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rAddr_byte_original_1 = bits(_rAddr_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rAddr_T_9 = mux(_rAddr_T_1, rAddr_byte_wdata_1, rAddr_byte_original_1) @[Interface.scala 259:14]
        node rAddr_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rAddr_byte_original_2 = bits(_rAddr_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rAddr_T_10 = mux(_rAddr_T_2, rAddr_byte_wdata_2, rAddr_byte_original_2) @[Interface.scala 259:14]
        node rAddr_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rAddr_byte_original_3 = bits(_rAddr_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rAddr_T_11 = mux(_rAddr_T_3, rAddr_byte_wdata_3, rAddr_byte_original_3) @[Interface.scala 259:14]
        node rAddr_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rAddr_byte_original_4 = bits(_rAddr_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rAddr_T_12 = mux(_rAddr_T_4, rAddr_byte_wdata_4, rAddr_byte_original_4) @[Interface.scala 259:14]
        node rAddr_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rAddr_byte_original_5 = bits(_rAddr_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rAddr_T_13 = mux(_rAddr_T_5, rAddr_byte_wdata_5, rAddr_byte_original_5) @[Interface.scala 259:14]
        node rAddr_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rAddr_byte_original_6 = bits(_rAddr_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rAddr_T_14 = mux(_rAddr_T_6, rAddr_byte_wdata_6, rAddr_byte_original_6) @[Interface.scala 259:14]
        node rAddr_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rAddr_byte_original_7 = bits(_rAddr_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rAddr_T_15 = mux(_rAddr_T_7, rAddr_byte_wdata_7, rAddr_byte_original_7) @[Interface.scala 259:14]
        wire _rAddr_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rAddr_WIRE_1[0] <= _rAddr_T_8 @[Interface.scala 254:12]
        _rAddr_WIRE_1[1] <= _rAddr_T_9 @[Interface.scala 254:12]
        _rAddr_WIRE_1[2] <= _rAddr_T_10 @[Interface.scala 254:12]
        _rAddr_WIRE_1[3] <= _rAddr_T_11 @[Interface.scala 254:12]
        _rAddr_WIRE_1[4] <= _rAddr_T_12 @[Interface.scala 254:12]
        _rAddr_WIRE_1[5] <= _rAddr_T_13 @[Interface.scala 254:12]
        _rAddr_WIRE_1[6] <= _rAddr_T_14 @[Interface.scala 254:12]
        _rAddr_WIRE_1[7] <= _rAddr_T_15 @[Interface.scala 254:12]
        node rAddr_lo_lo = cat(_rAddr_WIRE_1[1], _rAddr_WIRE_1[0]) @[Interface.scala 262:7]
        node rAddr_lo_hi = cat(_rAddr_WIRE_1[3], _rAddr_WIRE_1[2]) @[Interface.scala 262:7]
        node rAddr_lo = cat(rAddr_lo_hi, rAddr_lo_lo) @[Interface.scala 262:7]
        node rAddr_hi_lo = cat(_rAddr_WIRE_1[5], _rAddr_WIRE_1[4]) @[Interface.scala 262:7]
        node rAddr_hi_hi = cat(_rAddr_WIRE_1[7], _rAddr_WIRE_1[6]) @[Interface.scala 262:7]
        node rAddr_hi = cat(rAddr_hi_hi, rAddr_hi_lo) @[Interface.scala 262:7]
        node _rAddr_T_16 = cat(rAddr_hi, rAddr_lo) @[Interface.scala 262:7]
        wire _rAddr_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rAddr_WIRE_2 <= _rAddr_T_16 @[RegisterBlock.scala 118:82]
        rAddr <= _rAddr_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_62 = eq(UInt<5>("h10"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_62 : @[RegisterBlock.scala 252:38]
        wire _maxLength_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _maxLength_WIRE <= maxLength @[RegisterBlock.scala 118:51]
        node _maxLength_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _maxLength_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _maxLength_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _maxLength_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _maxLength_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _maxLength_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _maxLength_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _maxLength_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node maxLength_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node maxLength_byte_original = bits(_maxLength_WIRE, 7, 0) @[Interface.scala 258:39]
        node _maxLength_T_8 = mux(_maxLength_T, maxLength_byte_wdata, maxLength_byte_original) @[Interface.scala 259:14]
        node maxLength_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node maxLength_byte_original_1 = bits(_maxLength_WIRE, 15, 8) @[Interface.scala 258:39]
        node _maxLength_T_9 = mux(_maxLength_T_1, maxLength_byte_wdata_1, maxLength_byte_original_1) @[Interface.scala 259:14]
        node maxLength_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node maxLength_byte_original_2 = bits(_maxLength_WIRE, 23, 16) @[Interface.scala 258:39]
        node _maxLength_T_10 = mux(_maxLength_T_2, maxLength_byte_wdata_2, maxLength_byte_original_2) @[Interface.scala 259:14]
        node maxLength_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node maxLength_byte_original_3 = bits(_maxLength_WIRE, 31, 24) @[Interface.scala 258:39]
        node _maxLength_T_11 = mux(_maxLength_T_3, maxLength_byte_wdata_3, maxLength_byte_original_3) @[Interface.scala 259:14]
        node maxLength_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node maxLength_byte_original_4 = bits(_maxLength_WIRE, 39, 32) @[Interface.scala 258:39]
        node _maxLength_T_12 = mux(_maxLength_T_4, maxLength_byte_wdata_4, maxLength_byte_original_4) @[Interface.scala 259:14]
        node maxLength_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node maxLength_byte_original_5 = bits(_maxLength_WIRE, 47, 40) @[Interface.scala 258:39]
        node _maxLength_T_13 = mux(_maxLength_T_5, maxLength_byte_wdata_5, maxLength_byte_original_5) @[Interface.scala 259:14]
        node maxLength_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node maxLength_byte_original_6 = bits(_maxLength_WIRE, 55, 48) @[Interface.scala 258:39]
        node _maxLength_T_14 = mux(_maxLength_T_6, maxLength_byte_wdata_6, maxLength_byte_original_6) @[Interface.scala 259:14]
        node maxLength_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node maxLength_byte_original_7 = bits(_maxLength_WIRE, 63, 56) @[Interface.scala 258:39]
        node _maxLength_T_15 = mux(_maxLength_T_7, maxLength_byte_wdata_7, maxLength_byte_original_7) @[Interface.scala 259:14]
        wire _maxLength_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _maxLength_WIRE_1[0] <= _maxLength_T_8 @[Interface.scala 254:12]
        _maxLength_WIRE_1[1] <= _maxLength_T_9 @[Interface.scala 254:12]
        _maxLength_WIRE_1[2] <= _maxLength_T_10 @[Interface.scala 254:12]
        _maxLength_WIRE_1[3] <= _maxLength_T_11 @[Interface.scala 254:12]
        _maxLength_WIRE_1[4] <= _maxLength_T_12 @[Interface.scala 254:12]
        _maxLength_WIRE_1[5] <= _maxLength_T_13 @[Interface.scala 254:12]
        _maxLength_WIRE_1[6] <= _maxLength_T_14 @[Interface.scala 254:12]
        _maxLength_WIRE_1[7] <= _maxLength_T_15 @[Interface.scala 254:12]
        node maxLength_lo_lo = cat(_maxLength_WIRE_1[1], _maxLength_WIRE_1[0]) @[Interface.scala 262:7]
        node maxLength_lo_hi = cat(_maxLength_WIRE_1[3], _maxLength_WIRE_1[2]) @[Interface.scala 262:7]
        node maxLength_lo = cat(maxLength_lo_hi, maxLength_lo_lo) @[Interface.scala 262:7]
        node maxLength_hi_lo = cat(_maxLength_WIRE_1[5], _maxLength_WIRE_1[4]) @[Interface.scala 262:7]
        node maxLength_hi_hi = cat(_maxLength_WIRE_1[7], _maxLength_WIRE_1[6]) @[Interface.scala 262:7]
        node maxLength_hi = cat(maxLength_hi_hi, maxLength_hi_lo) @[Interface.scala 262:7]
        node _maxLength_T_16 = cat(maxLength_hi, maxLength_lo) @[Interface.scala 262:7]
        wire _maxLength_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _maxLength_WIRE_2 <= _maxLength_T_16 @[RegisterBlock.scala 118:82]
        maxLength <= _maxLength_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_63 = eq(UInt<5>("h18"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_63 : @[RegisterBlock.scala 252:38]
        wire _fifoTailReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoTailReg_WIRE <= fifoTailReg @[RegisterBlock.scala 118:51]
        node _fifoTailReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoTailReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoTailReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoTailReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoTailReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoTailReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoTailReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoTailReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoTailReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoTailReg_byte_original = bits(_fifoTailReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoTailReg_T_10 = mux(_fifoTailReg_T_2, fifoTailReg_byte_wdata, fifoTailReg_byte_original) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_1 = bits(_fifoTailReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoTailReg_T_11 = mux(_fifoTailReg_T_3, fifoTailReg_byte_wdata_1, fifoTailReg_byte_original_1) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_2 = bits(_fifoTailReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoTailReg_T_12 = mux(_fifoTailReg_T_4, fifoTailReg_byte_wdata_2, fifoTailReg_byte_original_2) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_3 = bits(_fifoTailReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoTailReg_T_13 = mux(_fifoTailReg_T_5, fifoTailReg_byte_wdata_3, fifoTailReg_byte_original_3) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_4 = bits(_fifoTailReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoTailReg_T_14 = mux(_fifoTailReg_T_6, fifoTailReg_byte_wdata_4, fifoTailReg_byte_original_4) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_5 = bits(_fifoTailReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoTailReg_T_15 = mux(_fifoTailReg_T_7, fifoTailReg_byte_wdata_5, fifoTailReg_byte_original_5) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_6 = bits(_fifoTailReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoTailReg_T_16 = mux(_fifoTailReg_T_8, fifoTailReg_byte_wdata_6, fifoTailReg_byte_original_6) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_7 = bits(_fifoTailReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoTailReg_T_17 = mux(_fifoTailReg_T_9, fifoTailReg_byte_wdata_7, fifoTailReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoTailReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[0] <= _fifoTailReg_T_10 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[1] <= _fifoTailReg_T_11 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[2] <= _fifoTailReg_T_12 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[3] <= _fifoTailReg_T_13 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[4] <= _fifoTailReg_T_14 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[5] <= _fifoTailReg_T_15 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[6] <= _fifoTailReg_T_16 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[7] <= _fifoTailReg_T_17 @[Interface.scala 254:12]
        node fifoTailReg_lo_lo = cat(_fifoTailReg_WIRE_1[1], _fifoTailReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoTailReg_lo_hi = cat(_fifoTailReg_WIRE_1[3], _fifoTailReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoTailReg_lo = cat(fifoTailReg_lo_hi, fifoTailReg_lo_lo) @[Interface.scala 262:7]
        node fifoTailReg_hi_lo = cat(_fifoTailReg_WIRE_1[5], _fifoTailReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoTailReg_hi_hi = cat(_fifoTailReg_WIRE_1[7], _fifoTailReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoTailReg_hi = cat(fifoTailReg_hi_hi, fifoTailReg_hi_lo) @[Interface.scala 262:7]
        node _fifoTailReg_T_18 = cat(fifoTailReg_hi, fifoTailReg_lo) @[Interface.scala 262:7]
        wire _fifoTailReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoTailReg_WIRE_2 <= _fifoTailReg_T_18 @[RegisterBlock.scala 118:82]
        fifoTailReg <= _fifoTailReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_64 = eq(UInt<6>("h20"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_64 : @[RegisterBlock.scala 252:38]
        wire _fifoHeadReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoHeadReg_WIRE <= fifoHeadReg @[RegisterBlock.scala 118:51]
        node _fifoHeadReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoHeadReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoHeadReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoHeadReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoHeadReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoHeadReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoHeadReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoHeadReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoHeadReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original = bits(_fifoHeadReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoHeadReg_T_10 = mux(_fifoHeadReg_T_2, fifoHeadReg_byte_wdata, fifoHeadReg_byte_original) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_1 = bits(_fifoHeadReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoHeadReg_T_11 = mux(_fifoHeadReg_T_3, fifoHeadReg_byte_wdata_1, fifoHeadReg_byte_original_1) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_2 = bits(_fifoHeadReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoHeadReg_T_12 = mux(_fifoHeadReg_T_4, fifoHeadReg_byte_wdata_2, fifoHeadReg_byte_original_2) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_3 = bits(_fifoHeadReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoHeadReg_T_13 = mux(_fifoHeadReg_T_5, fifoHeadReg_byte_wdata_3, fifoHeadReg_byte_original_3) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_4 = bits(_fifoHeadReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoHeadReg_T_14 = mux(_fifoHeadReg_T_6, fifoHeadReg_byte_wdata_4, fifoHeadReg_byte_original_4) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_5 = bits(_fifoHeadReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoHeadReg_T_15 = mux(_fifoHeadReg_T_7, fifoHeadReg_byte_wdata_5, fifoHeadReg_byte_original_5) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_6 = bits(_fifoHeadReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoHeadReg_T_16 = mux(_fifoHeadReg_T_8, fifoHeadReg_byte_wdata_6, fifoHeadReg_byte_original_6) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_7 = bits(_fifoHeadReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoHeadReg_T_17 = mux(_fifoHeadReg_T_9, fifoHeadReg_byte_wdata_7, fifoHeadReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoHeadReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[0] <= _fifoHeadReg_T_10 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[1] <= _fifoHeadReg_T_11 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[2] <= _fifoHeadReg_T_12 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[3] <= _fifoHeadReg_T_13 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[4] <= _fifoHeadReg_T_14 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[5] <= _fifoHeadReg_T_15 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[6] <= _fifoHeadReg_T_16 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[7] <= _fifoHeadReg_T_17 @[Interface.scala 254:12]
        node fifoHeadReg_lo_lo = cat(_fifoHeadReg_WIRE_1[1], _fifoHeadReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoHeadReg_lo_hi = cat(_fifoHeadReg_WIRE_1[3], _fifoHeadReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoHeadReg_lo = cat(fifoHeadReg_lo_hi, fifoHeadReg_lo_lo) @[Interface.scala 262:7]
        node fifoHeadReg_hi_lo = cat(_fifoHeadReg_WIRE_1[5], _fifoHeadReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoHeadReg_hi_hi = cat(_fifoHeadReg_WIRE_1[7], _fifoHeadReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoHeadReg_hi = cat(fifoHeadReg_hi_hi, fifoHeadReg_hi_lo) @[Interface.scala 262:7]
        node _fifoHeadReg_T_18 = cat(fifoHeadReg_hi, fifoHeadReg_lo) @[Interface.scala 262:7]
        wire _fifoHeadReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoHeadReg_WIRE_2 <= _fifoHeadReg_T_18 @[RegisterBlock.scala 118:82]
        fifoHeadReg <= _fifoHeadReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_65 = eq(UInt<6>("h28"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_65 : @[RegisterBlock.scala 252:38]
        wire _procInterrupt_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _procInterrupt_WIRE <= procInterrupt @[RegisterBlock.scala 118:51]
        node _procInterrupt_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _procInterrupt_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _procInterrupt_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _procInterrupt_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _procInterrupt_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _procInterrupt_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _procInterrupt_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _procInterrupt_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node procInterrupt_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node procInterrupt_byte_original = bits(_procInterrupt_WIRE, 7, 0) @[Interface.scala 258:39]
        node _procInterrupt_T_8 = mux(_procInterrupt_T, procInterrupt_byte_wdata, procInterrupt_byte_original) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node procInterrupt_byte_original_1 = bits(_procInterrupt_WIRE, 15, 8) @[Interface.scala 258:39]
        node _procInterrupt_T_9 = mux(_procInterrupt_T_1, procInterrupt_byte_wdata_1, procInterrupt_byte_original_1) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node procInterrupt_byte_original_2 = bits(_procInterrupt_WIRE, 23, 16) @[Interface.scala 258:39]
        node _procInterrupt_T_10 = mux(_procInterrupt_T_2, procInterrupt_byte_wdata_2, procInterrupt_byte_original_2) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node procInterrupt_byte_original_3 = bits(_procInterrupt_WIRE, 31, 24) @[Interface.scala 258:39]
        node _procInterrupt_T_11 = mux(_procInterrupt_T_3, procInterrupt_byte_wdata_3, procInterrupt_byte_original_3) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node procInterrupt_byte_original_4 = bits(_procInterrupt_WIRE, 39, 32) @[Interface.scala 258:39]
        node _procInterrupt_T_12 = mux(_procInterrupt_T_4, procInterrupt_byte_wdata_4, procInterrupt_byte_original_4) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node procInterrupt_byte_original_5 = bits(_procInterrupt_WIRE, 47, 40) @[Interface.scala 258:39]
        node _procInterrupt_T_13 = mux(_procInterrupt_T_5, procInterrupt_byte_wdata_5, procInterrupt_byte_original_5) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node procInterrupt_byte_original_6 = bits(_procInterrupt_WIRE, 55, 48) @[Interface.scala 258:39]
        node _procInterrupt_T_14 = mux(_procInterrupt_T_6, procInterrupt_byte_wdata_6, procInterrupt_byte_original_6) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node procInterrupt_byte_original_7 = bits(_procInterrupt_WIRE, 63, 56) @[Interface.scala 258:39]
        node _procInterrupt_T_15 = mux(_procInterrupt_T_7, procInterrupt_byte_wdata_7, procInterrupt_byte_original_7) @[Interface.scala 259:14]
        wire _procInterrupt_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[0] <= _procInterrupt_T_8 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[1] <= _procInterrupt_T_9 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[2] <= _procInterrupt_T_10 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[3] <= _procInterrupt_T_11 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[4] <= _procInterrupt_T_12 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[5] <= _procInterrupt_T_13 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[6] <= _procInterrupt_T_14 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[7] <= _procInterrupt_T_15 @[Interface.scala 254:12]
        node procInterrupt_lo_lo = cat(_procInterrupt_WIRE_1[1], _procInterrupt_WIRE_1[0]) @[Interface.scala 262:7]
        node procInterrupt_lo_hi = cat(_procInterrupt_WIRE_1[3], _procInterrupt_WIRE_1[2]) @[Interface.scala 262:7]
        node procInterrupt_lo = cat(procInterrupt_lo_hi, procInterrupt_lo_lo) @[Interface.scala 262:7]
        node procInterrupt_hi_lo = cat(_procInterrupt_WIRE_1[5], _procInterrupt_WIRE_1[4]) @[Interface.scala 262:7]
        node procInterrupt_hi_hi = cat(_procInterrupt_WIRE_1[7], _procInterrupt_WIRE_1[6]) @[Interface.scala 262:7]
        node procInterrupt_hi = cat(procInterrupt_hi_hi, procInterrupt_hi_lo) @[Interface.scala 262:7]
        node _procInterrupt_T_16 = cat(procInterrupt_hi, procInterrupt_lo) @[Interface.scala 262:7]
        wire _procInterrupt_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _procInterrupt_WIRE_2 <= _procInterrupt_T_16 @[RegisterBlock.scala 118:82]
        procInterrupt <= _procInterrupt_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_66 = asUInt(reset) @[RegisterBlock.scala 198:11]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
      when _T_67 : @[RegisterBlock.scala 198:11]
        node _T_68 = eq(wrReq, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
        when _T_68 : @[RegisterBlock.scala 198:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:198 assert(wrReq)\n") : printf_1 @[RegisterBlock.scala 198:11]
        assert(clock, wrReq, UInt<1>("h1"), "") : assert_1 @[RegisterBlock.scala 198:11]
      wrReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wrReqData_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp_1 : { resp : UInt<2>} @[RegisterBlock.scala 203:20]
      resp_1.resp <= UInt<2>("h0") @[RegisterBlock.scala 204:15]
      saxil.b.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.b.bits <= resp_1 @[Decoupled.scala 66:19]

  module Queue_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, count : UInt<3>}

    cmem ram : { data : UInt<64>, strb : UInt<8>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module virtualStealServer_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}, flip axi_mgmt : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}, read_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip read_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, write_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip ntwDataUnitOccupancy : UInt<1>}

    wire saxil : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[RegisterBlock.scala 60:19]
    node _mask_T = asUInt(asSInt(UInt<6>("h3f"))) @[RegisterBlock.scala 159:36]
    node mask = xor(_mask_T, UInt<3>("h7")) @[RegisterBlock.scala 159:39]
    inst rdReq__deq of Queue_12 @[Decoupled.scala 377:21]
    rdReq__deq.clock <= clock
    rdReq__deq.reset <= reset
    rdReq__deq.io.enq.valid <= saxil.ar.valid @[Decoupled.scala 379:22]
    rdReq__deq.io.enq.bits.prot <= saxil.ar.bits.prot @[Decoupled.scala 380:21]
    rdReq__deq.io.enq.bits.addr <= saxil.ar.bits.addr @[Decoupled.scala 380:21]
    saxil.ar.ready <= rdReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire rdReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    rdReq_.bits <= rdReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    rdReq_.valid <= rdReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    rdReq__deq.io.deq.ready <= rdReq_.ready @[Decoupled.scala 420:15]
    inst wrReq__deq of Queue_13 @[Decoupled.scala 377:21]
    wrReq__deq.clock <= clock
    wrReq__deq.reset <= reset
    wrReq__deq.io.enq.valid <= saxil.aw.valid @[Decoupled.scala 379:22]
    wrReq__deq.io.enq.bits.prot <= saxil.aw.bits.prot @[Decoupled.scala 380:21]
    wrReq__deq.io.enq.bits.addr <= saxil.aw.bits.addr @[Decoupled.scala 380:21]
    saxil.aw.ready <= wrReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    wrReq_.bits <= wrReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReq_.valid <= wrReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReq__deq.io.deq.ready <= wrReq_.ready @[Decoupled.scala 420:15]
    inst wrReqData__deq of Queue_14 @[Decoupled.scala 377:21]
    wrReqData__deq.clock <= clock
    wrReqData__deq.reset <= reset
    wrReqData__deq.io.enq.valid <= saxil.w.valid @[Decoupled.scala 379:22]
    wrReqData__deq.io.enq.bits.strb <= saxil.w.bits.strb @[Decoupled.scala 380:21]
    wrReqData__deq.io.enq.bits.data <= saxil.w.bits.data @[Decoupled.scala 380:21]
    saxil.w.ready <= wrReqData__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReqData_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}} @[Decoupled.scala 417:19]
    wrReqData_.bits <= wrReqData__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReqData_.valid <= wrReqData__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReqData__deq.io.deq.ready <= wrReqData_.ready @[Decoupled.scala 420:15]
    rdReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.r.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.r.bits.resp is invalid @[Decoupled.scala 75:19]
    saxil.r.bits.data is invalid @[Decoupled.scala 75:19]
    wrReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    wrReqData_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.b.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.b.bits.resp is invalid @[Decoupled.scala 75:19]
    node rdReq = and(rdReq_.valid, saxil.r.ready) @[RegisterBlock.scala 210:44]
    node rdAddr = and(rdReq_.bits.addr, mask) @[RegisterBlock.scala 214:48]
    node _wrReq_T = and(wrReq_.valid, wrReqData_.valid) @[RegisterBlock.scala 241:43]
    node wrReq = and(_wrReq_T, saxil.b.ready) @[RegisterBlock.scala 241:63]
    node wrAddr = and(wrReq_.bits.addr, mask) @[RegisterBlock.scala 243:48]
    io.axi_mgmt.BRESP <= saxil.b.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.BVALID <= saxil.b.valid @[virtualStealServer.scala 58:20]
    saxil.b.ready <= io.axi_mgmt.BREADY @[virtualStealServer.scala 58:20]
    saxil.w.bits.strb <= io.axi_mgmt.WSTRB @[virtualStealServer.scala 58:20]
    saxil.w.bits.data <= io.axi_mgmt.WDATA @[virtualStealServer.scala 58:20]
    saxil.w.valid <= io.axi_mgmt.WVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.WREADY <= saxil.w.ready @[virtualStealServer.scala 58:20]
    saxil.aw.bits.prot <= io.axi_mgmt.AWPROT @[virtualStealServer.scala 58:20]
    saxil.aw.bits.addr <= io.axi_mgmt.AWADDR @[virtualStealServer.scala 58:20]
    saxil.aw.valid <= io.axi_mgmt.AWVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.AWREADY <= saxil.aw.ready @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RRESP <= saxil.r.bits.resp @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RDATA <= saxil.r.bits.data @[virtualStealServer.scala 58:20]
    io.axi_mgmt.RVALID <= saxil.r.valid @[virtualStealServer.scala 58:20]
    saxil.r.ready <= io.axi_mgmt.RREADY @[virtualStealServer.scala 58:20]
    saxil.ar.bits.prot <= io.axi_mgmt.ARPROT @[virtualStealServer.scala 58:20]
    saxil.ar.bits.addr <= io.axi_mgmt.ARADDR @[virtualStealServer.scala 58:20]
    saxil.ar.valid <= io.axi_mgmt.ARVALID @[virtualStealServer.scala 58:20]
    io.axi_mgmt.ARREADY <= saxil.ar.ready @[virtualStealServer.scala 58:20]
    reg rAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 61:44]
    reg rPause : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 62:44]
    reg procInterrupt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 63:44]
    reg maxLength : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 64:44]
    reg stateReg : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 65:44]
    wire currLen : UInt<64> @[virtualStealServer.scala 66:41]
    reg contentionCounter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 67:44]
    reg contentionThresh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h14")) @[virtualStealServer.scala 68:44]
    reg networkCongested : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 69:44]
    reg stolenTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 70:44]
    reg giveTaskReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 71:44]
    reg delta : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 72:44]
    reg fifoTailReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 73:44]
    reg fifoHeadReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 74:44]
    reg popOrPush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[virtualStealServer.scala 75:44]
    reg addrShift : UInt, clock with :
      reset => (reset, UInt<2>("h2")) @[virtualStealServer.scala 76:44]
    node _T = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[virtualStealServer.scala 89:10]
    node _T_1 = and(_T, io.ntwDataUnitOccupancy) @[virtualStealServer.scala 89:52]
    node _T_2 = neq(contentionCounter, UInt<5>("h18")) @[virtualStealServer.scala 91:31]
    node _T_3 = and(_T_1, _T_2) @[virtualStealServer.scala 91:10]
    when _T_3 : @[virtualStealServer.scala 91:57]
      node _contentionCounter_T = add(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 92:48]
      node _contentionCounter_T_1 = tail(_contentionCounter_T, 1) @[virtualStealServer.scala 92:48]
      contentionCounter <= _contentionCounter_T_1 @[virtualStealServer.scala 92:27]
    else :
      node _T_4 = neq(contentionCounter, UInt<1>("h0")) @[virtualStealServer.scala 94:36]
      node _T_5 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_4) @[virtualStealServer.scala 93:56]
      node _T_6 = eq(io.ntwDataUnitOccupancy, UInt<1>("h0")) @[virtualStealServer.scala 95:20]
      node _T_7 = and(_T_5, _T_6) @[virtualStealServer.scala 95:17]
      when _T_7 : @[virtualStealServer.scala 95:46]
        node _contentionCounter_T_2 = sub(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 96:48]
        node _contentionCounter_T_3 = tail(_contentionCounter_T_2, 1) @[virtualStealServer.scala 96:48]
        contentionCounter <= _contentionCounter_T_3 @[virtualStealServer.scala 96:27]
      else :
        contentionCounter <= contentionCounter @[virtualStealServer.scala 98:27]
    node _T_8 = add(contentionThresh, delta) @[virtualStealServer.scala 102:49]
    node _T_9 = tail(_T_8, 1) @[virtualStealServer.scala 102:49]
    node _T_10 = geq(contentionCounter, _T_9) @[virtualStealServer.scala 102:28]
    when _T_10 : @[virtualStealServer.scala 102:58]
      networkCongested <= UInt<1>("h1") @[virtualStealServer.scala 103:26]
    else :
      node _T_11 = sub(contentionThresh, delta) @[virtualStealServer.scala 104:54]
      node _T_12 = tail(_T_11, 1) @[virtualStealServer.scala 104:54]
      node _T_13 = lt(contentionCounter, _T_12) @[virtualStealServer.scala 104:34]
      when _T_13 : @[virtualStealServer.scala 104:63]
        networkCongested <= UInt<1>("h0") @[virtualStealServer.scala 105:26]
      else :
        networkCongested <= networkCongested @[virtualStealServer.scala 107:26]
    node _T_14 = eq(stateReg, UInt<1>("h0")) @[virtualStealServer.scala 112:19]
    when _T_14 : @[virtualStealServer.scala 112:34]
      node _T_15 = eq(currLen, maxLength) @[virtualStealServer.scala 113:23]
      node _T_16 = and(_T_15, networkCongested) @[virtualStealServer.scala 113:37]
      node _T_17 = eq(maxLength, UInt<1>("h0")) @[virtualStealServer.scala 113:71]
      node _T_18 = or(_T_16, _T_17) @[virtualStealServer.scala 113:58]
      when _T_18 : @[virtualStealServer.scala 113:79]
        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 114:22]
        rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 115:22]
      else :
        when networkCongested : @[virtualStealServer.scala 116:37]
          stateReg <= UInt<2>("h2") @[virtualStealServer.scala 117:22]
        else :
          node _T_19 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 118:20]
          node _T_20 = neq(currLen, UInt<1>("h0")) @[virtualStealServer.scala 118:49]
          node _T_21 = and(_T_19, _T_20) @[virtualStealServer.scala 118:38]
          when _T_21 : @[virtualStealServer.scala 118:57]
            stateReg <= UInt<3>("h6") @[virtualStealServer.scala 119:22]
          else :
            node _T_22 = neq(procInterrupt, UInt<1>("h0")) @[virtualStealServer.scala 120:34]
            when _T_22 : @[virtualStealServer.scala 120:42]
              stateReg <= UInt<4>("ha") @[virtualStealServer.scala 121:22]
              rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 122:22]
            else :
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 124:22]
    else :
      node _T_23 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 126:25]
      when _T_23 : @[virtualStealServer.scala 126:46]
        when io.connNetwork.data.availableTask.valid : @[virtualStealServer.scala 127:54]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 128:22]
        else :
          node _T_24 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 129:20]
          when _T_24 : @[virtualStealServer.scala 129:38]
            stateReg <= UInt<1>("h0") @[virtualStealServer.scala 130:22]
          else :
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 132:22]
      else :
        node _T_25 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 134:25]
        when _T_25 : @[virtualStealServer.scala 134:51]
          when io.write_address.ready : @[virtualStealServer.scala 135:37]
            stateReg <= UInt<2>("h3") @[virtualStealServer.scala 136:22]
          else :
            node _T_26 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 137:20]
            when _T_26 : @[virtualStealServer.scala 137:38]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 138:22]
            else :
              stateReg <= UInt<3>("h4") @[virtualStealServer.scala 140:22]
        else :
          node _T_27 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 142:25]
          when _T_27 : @[virtualStealServer.scala 142:44]
            when io.write_data.ready : @[virtualStealServer.scala 143:34]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 144:22]
              popOrPush <= UInt<1>("h0") @[virtualStealServer.scala 145:23]
              node _T_28 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 146:42]
              node _T_29 = tail(_T_28, 1) @[virtualStealServer.scala 146:42]
              node _T_30 = lt(fifoTailReg, _T_29) @[virtualStealServer.scala 146:30]
              when _T_30 : @[virtualStealServer.scala 146:48]
                node _fifoTailReg_T = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 147:44]
                node _fifoTailReg_T_1 = tail(_fifoTailReg_T, 1) @[virtualStealServer.scala 147:44]
                fifoTailReg <= _fifoTailReg_T_1 @[virtualStealServer.scala 147:29]
              else :
                fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 149:29]
            else :
              stateReg <= UInt<2>("h3") @[virtualStealServer.scala 152:22]
          else :
            node _T_31 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 154:25]
            when _T_31 : @[virtualStealServer.scala 154:50]
              when io.read_address.ready : @[virtualStealServer.scala 155:36]
                stateReg <= UInt<3>("h5") @[virtualStealServer.scala 156:22]
              else :
                when networkCongested : @[virtualStealServer.scala 157:37]
                  stateReg <= UInt<1>("h0") @[virtualStealServer.scala 158:22]
                else :
                  stateReg <= UInt<3>("h6") @[virtualStealServer.scala 160:22]
            else :
              node _T_32 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 162:25]
              when _T_32 : @[virtualStealServer.scala 162:43]
                when io.read_data.valid : @[virtualStealServer.scala 163:33]
                  stateReg <= UInt<4>("h8") @[virtualStealServer.scala 164:22]
                  popOrPush <= UInt<1>("h1") @[virtualStealServer.scala 165:23]
                  node _T_33 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 166:42]
                  node _T_34 = tail(_T_33, 1) @[virtualStealServer.scala 166:42]
                  node _T_35 = lt(fifoHeadReg, _T_34) @[virtualStealServer.scala 166:30]
                  when _T_35 : @[virtualStealServer.scala 166:48]
                    node _fifoHeadReg_T = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 167:44]
                    node _fifoHeadReg_T_1 = tail(_fifoHeadReg_T, 1) @[virtualStealServer.scala 167:44]
                    fifoHeadReg <= _fifoHeadReg_T_1 @[virtualStealServer.scala 167:29]
                  else :
                    fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 169:29]
                else :
                  stateReg <= UInt<3>("h5") @[virtualStealServer.scala 172:22]
              else :
                node _T_36 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 174:25]
                when _T_36 : @[virtualStealServer.scala 174:48]
                  when io.connNetwork.data.qOutTask.ready : @[virtualStealServer.scala 175:49]
                    stateReg <= UInt<1>("h0") @[virtualStealServer.scala 176:22]
                  else :
                    stateReg <= UInt<3>("h7") @[virtualStealServer.scala 178:22]
                else :
                  node _T_37 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 180:25]
                  when _T_37 : @[virtualStealServer.scala 180:54]
                    when io.connNetwork.ctrl.serveStealReq.ready : @[virtualStealServer.scala 181:54]
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 182:22]
                    else :
                      when networkCongested : @[virtualStealServer.scala 186:39]
                        stolenTaskReg <= giveTaskReg @[virtualStealServer.scala 187:27]
                        stateReg <= UInt<3>("h4") @[virtualStealServer.scala 188:22]
                      else :
                        stateReg <= UInt<4>("h8") @[virtualStealServer.scala 192:22]
                  else :
                    node _T_38 = eq(stateReg, UInt<4>("h9")) @[virtualStealServer.scala 194:25]
                    when _T_38 : @[virtualStealServer.scala 194:46]
                      node _T_39 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 195:21]
                      when _T_39 : @[virtualStealServer.scala 195:33]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 196:22]
                      else :
                        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 198:22]
                    else :
                      node _T_40 = eq(stateReg, UInt<4>("ha")) @[virtualStealServer.scala 200:25]
                      when _T_40 : @[virtualStealServer.scala 200:53]
                        node _T_41 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 201:21]
                        when _T_41 : @[virtualStealServer.scala 201:33]
                          stateReg <= UInt<1>("h0") @[virtualStealServer.scala 202:22]
                        else :
                          stateReg <= UInt<4>("ha") @[virtualStealServer.scala 204:22]
                      else :
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 207:18]
    io.connNetwork.data.qOutTask.bits <= giveTaskReg @[virtualStealServer.scala 210:45]
    io.write_data.bits <= stolenTaskReg @[virtualStealServer.scala 211:45]
    io.read_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 215:45]
    io.read_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 216:45]
    io.read_data.ready <= UInt<1>("h0") @[virtualStealServer.scala 217:45]
    io.write_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 218:45]
    io.write_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 219:45]
    io.write_data.valid <= UInt<1>("h0") @[virtualStealServer.scala 220:45]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[virtualStealServer.scala 222:45]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[virtualStealServer.scala 223:45]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 225:45]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 226:45]
    node _T_42 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 230:19]
    when _T_42 : @[virtualStealServer.scala 230:40]
      stolenTaskReg <= io.connNetwork.data.availableTask.bits @[virtualStealServer.scala 231:49]
      io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[virtualStealServer.scala 232:49]
    else :
      node _T_43 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 233:25]
      when _T_43 : @[virtualStealServer.scala 233:51]
        io.write_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 234:49]
        node _io_write_address_bits_T = dshl(fifoTailReg, addrShift) @[virtualStealServer.scala 235:65]
        node _io_write_address_bits_T_1 = add(_io_write_address_bits_T, rAddr) @[virtualStealServer.scala 235:79]
        node _io_write_address_bits_T_2 = tail(_io_write_address_bits_T_1, 1) @[virtualStealServer.scala 235:79]
        io.write_address.bits <= _io_write_address_bits_T_2 @[virtualStealServer.scala 235:49]
      else :
        node _T_44 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 236:25]
        when _T_44 : @[virtualStealServer.scala 236:44]
          io.write_data.valid <= UInt<1>("h1") @[virtualStealServer.scala 237:49]
        else :
          node _T_45 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 238:25]
          when _T_45 : @[virtualStealServer.scala 238:50]
            io.read_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 239:49]
            node _io_read_address_bits_T = dshl(fifoHeadReg, addrShift) @[virtualStealServer.scala 240:65]
            node _io_read_address_bits_T_1 = add(_io_read_address_bits_T, rAddr) @[virtualStealServer.scala 240:79]
            node _io_read_address_bits_T_2 = tail(_io_read_address_bits_T_1, 1) @[virtualStealServer.scala 240:79]
            io.read_address.bits <= _io_read_address_bits_T_2 @[virtualStealServer.scala 240:49]
          else :
            node _T_46 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 241:25]
            when _T_46 : @[virtualStealServer.scala 241:43]
              io.read_data.ready <= UInt<1>("h1") @[virtualStealServer.scala 242:49]
              giveTaskReg <= io.read_data.bits @[virtualStealServer.scala 243:49]
            else :
              node _T_47 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 244:25]
              when _T_47 : @[virtualStealServer.scala 244:48]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[virtualStealServer.scala 245:49]
              else :
                node _T_48 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 246:25]
                when _T_48 : @[virtualStealServer.scala 246:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[virtualStealServer.scala 247:49]
    reg lengthHistroy : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 251:32]
    node _T_49 = gt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 253:22]
    when _T_49 : @[virtualStealServer.scala 253:36]
      node _currLen_T = sub(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 254:32]
      node _currLen_T_1 = tail(_currLen_T, 1) @[virtualStealServer.scala 254:32]
      currLen <= _currLen_T_1 @[virtualStealServer.scala 254:17]
      lengthHistroy <= currLen @[virtualStealServer.scala 255:23]
    else :
      node _T_50 = lt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 256:28]
      when _T_50 : @[virtualStealServer.scala 256:42]
        node _currLen_T_2 = sub(maxLength, fifoHeadReg) @[virtualStealServer.scala 257:30]
        node _currLen_T_3 = tail(_currLen_T_2, 1) @[virtualStealServer.scala 257:30]
        node _currLen_T_4 = add(_currLen_T_3, fifoTailReg) @[virtualStealServer.scala 257:44]
        node _currLen_T_5 = tail(_currLen_T_4, 1) @[virtualStealServer.scala 257:44]
        currLen <= _currLen_T_5 @[virtualStealServer.scala 257:17]
        lengthHistroy <= currLen @[virtualStealServer.scala 258:23]
      else :
        lengthHistroy <= lengthHistroy @[virtualStealServer.scala 260:23]
        when popOrPush : @[virtualStealServer.scala 261:24]
          currLen <= UInt<1>("h0") @[virtualStealServer.scala 262:21]
        else :
          node _currLen_T_6 = add(lengthHistroy, UInt<1>("h1")) @[virtualStealServer.scala 264:38]
          node _currLen_T_7 = tail(_currLen_T_6, 1) @[virtualStealServer.scala 264:38]
          currLen <= _currLen_T_7 @[virtualStealServer.scala 264:21]
    when rdReq : @[virtualStealServer.scala 269:27]
      wire data : UInt<64> @[RegisterBlock.scala 217:20]
      node _data_T = asUInt(asSInt(UInt<64>("hffffffffffffffff"))) @[RegisterBlock.scala 220:29]
      data <= _data_T @[RegisterBlock.scala 220:10]
      node _T_51 = eq(UInt<1>("h0"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_51 : @[RegisterBlock.scala 224:38]
        data <= rPause @[RegisterBlock.scala 225:16]
      node _T_52 = eq(UInt<4>("h8"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_52 : @[RegisterBlock.scala 224:38]
        data <= rAddr @[RegisterBlock.scala 225:16]
      node _T_53 = eq(UInt<5>("h10"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_53 : @[RegisterBlock.scala 224:38]
        data <= maxLength @[RegisterBlock.scala 225:16]
      node _T_54 = eq(UInt<5>("h18"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_54 : @[RegisterBlock.scala 224:38]
        data <= fifoTailReg @[RegisterBlock.scala 225:16]
      node _T_55 = eq(UInt<6>("h20"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_55 : @[RegisterBlock.scala 224:38]
        data <= fifoHeadReg @[RegisterBlock.scala 225:16]
      node _T_56 = eq(UInt<6>("h28"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_56 : @[RegisterBlock.scala 224:38]
        data <= procInterrupt @[RegisterBlock.scala 225:16]
      node _T_57 = asUInt(reset) @[RegisterBlock.scala 182:11]
      node _T_58 = eq(_T_57, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
      when _T_58 : @[RegisterBlock.scala 182:11]
        node _T_59 = eq(rdReq, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
        when _T_59 : @[RegisterBlock.scala 182:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:182 assert(rdReq)\n") : printf @[RegisterBlock.scala 182:11]
        assert(clock, rdReq, UInt<1>("h1"), "") : assert @[RegisterBlock.scala 182:11]
      rdReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp : { data : UInt<64>, resp : UInt<2>} @[RegisterBlock.scala 186:20]
      resp.data <= data @[RegisterBlock.scala 187:15]
      resp.resp <= UInt<2>("h0") @[RegisterBlock.scala 188:15]
      saxil.r.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.r.bits <= resp @[Decoupled.scala 66:19]
    when wrReq : @[virtualStealServer.scala 273:27]
      node _T_60 = eq(UInt<1>("h0"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_60 : @[RegisterBlock.scala 252:38]
        wire _rPause_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rPause_WIRE <= rPause @[RegisterBlock.scala 118:51]
        node _rPause_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rPause_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rPause_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rPause_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rPause_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rPause_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rPause_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rPause_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rPause_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rPause_byte_original = bits(_rPause_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rPause_T_8 = mux(_rPause_T, rPause_byte_wdata, rPause_byte_original) @[Interface.scala 259:14]
        node rPause_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rPause_byte_original_1 = bits(_rPause_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rPause_T_9 = mux(_rPause_T_1, rPause_byte_wdata_1, rPause_byte_original_1) @[Interface.scala 259:14]
        node rPause_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rPause_byte_original_2 = bits(_rPause_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rPause_T_10 = mux(_rPause_T_2, rPause_byte_wdata_2, rPause_byte_original_2) @[Interface.scala 259:14]
        node rPause_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rPause_byte_original_3 = bits(_rPause_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rPause_T_11 = mux(_rPause_T_3, rPause_byte_wdata_3, rPause_byte_original_3) @[Interface.scala 259:14]
        node rPause_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rPause_byte_original_4 = bits(_rPause_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rPause_T_12 = mux(_rPause_T_4, rPause_byte_wdata_4, rPause_byte_original_4) @[Interface.scala 259:14]
        node rPause_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rPause_byte_original_5 = bits(_rPause_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rPause_T_13 = mux(_rPause_T_5, rPause_byte_wdata_5, rPause_byte_original_5) @[Interface.scala 259:14]
        node rPause_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rPause_byte_original_6 = bits(_rPause_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rPause_T_14 = mux(_rPause_T_6, rPause_byte_wdata_6, rPause_byte_original_6) @[Interface.scala 259:14]
        node rPause_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rPause_byte_original_7 = bits(_rPause_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rPause_T_15 = mux(_rPause_T_7, rPause_byte_wdata_7, rPause_byte_original_7) @[Interface.scala 259:14]
        wire _rPause_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rPause_WIRE_1[0] <= _rPause_T_8 @[Interface.scala 254:12]
        _rPause_WIRE_1[1] <= _rPause_T_9 @[Interface.scala 254:12]
        _rPause_WIRE_1[2] <= _rPause_T_10 @[Interface.scala 254:12]
        _rPause_WIRE_1[3] <= _rPause_T_11 @[Interface.scala 254:12]
        _rPause_WIRE_1[4] <= _rPause_T_12 @[Interface.scala 254:12]
        _rPause_WIRE_1[5] <= _rPause_T_13 @[Interface.scala 254:12]
        _rPause_WIRE_1[6] <= _rPause_T_14 @[Interface.scala 254:12]
        _rPause_WIRE_1[7] <= _rPause_T_15 @[Interface.scala 254:12]
        node rPause_lo_lo = cat(_rPause_WIRE_1[1], _rPause_WIRE_1[0]) @[Interface.scala 262:7]
        node rPause_lo_hi = cat(_rPause_WIRE_1[3], _rPause_WIRE_1[2]) @[Interface.scala 262:7]
        node rPause_lo = cat(rPause_lo_hi, rPause_lo_lo) @[Interface.scala 262:7]
        node rPause_hi_lo = cat(_rPause_WIRE_1[5], _rPause_WIRE_1[4]) @[Interface.scala 262:7]
        node rPause_hi_hi = cat(_rPause_WIRE_1[7], _rPause_WIRE_1[6]) @[Interface.scala 262:7]
        node rPause_hi = cat(rPause_hi_hi, rPause_hi_lo) @[Interface.scala 262:7]
        node _rPause_T_16 = cat(rPause_hi, rPause_lo) @[Interface.scala 262:7]
        wire _rPause_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rPause_WIRE_2 <= _rPause_T_16 @[RegisterBlock.scala 118:82]
        rPause <= _rPause_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_61 = eq(UInt<4>("h8"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_61 : @[RegisterBlock.scala 252:38]
        wire _rAddr_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rAddr_WIRE <= rAddr @[RegisterBlock.scala 118:51]
        node _rAddr_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rAddr_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rAddr_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rAddr_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rAddr_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rAddr_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rAddr_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rAddr_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rAddr_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rAddr_byte_original = bits(_rAddr_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rAddr_T_8 = mux(_rAddr_T, rAddr_byte_wdata, rAddr_byte_original) @[Interface.scala 259:14]
        node rAddr_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rAddr_byte_original_1 = bits(_rAddr_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rAddr_T_9 = mux(_rAddr_T_1, rAddr_byte_wdata_1, rAddr_byte_original_1) @[Interface.scala 259:14]
        node rAddr_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rAddr_byte_original_2 = bits(_rAddr_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rAddr_T_10 = mux(_rAddr_T_2, rAddr_byte_wdata_2, rAddr_byte_original_2) @[Interface.scala 259:14]
        node rAddr_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rAddr_byte_original_3 = bits(_rAddr_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rAddr_T_11 = mux(_rAddr_T_3, rAddr_byte_wdata_3, rAddr_byte_original_3) @[Interface.scala 259:14]
        node rAddr_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rAddr_byte_original_4 = bits(_rAddr_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rAddr_T_12 = mux(_rAddr_T_4, rAddr_byte_wdata_4, rAddr_byte_original_4) @[Interface.scala 259:14]
        node rAddr_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rAddr_byte_original_5 = bits(_rAddr_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rAddr_T_13 = mux(_rAddr_T_5, rAddr_byte_wdata_5, rAddr_byte_original_5) @[Interface.scala 259:14]
        node rAddr_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rAddr_byte_original_6 = bits(_rAddr_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rAddr_T_14 = mux(_rAddr_T_6, rAddr_byte_wdata_6, rAddr_byte_original_6) @[Interface.scala 259:14]
        node rAddr_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rAddr_byte_original_7 = bits(_rAddr_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rAddr_T_15 = mux(_rAddr_T_7, rAddr_byte_wdata_7, rAddr_byte_original_7) @[Interface.scala 259:14]
        wire _rAddr_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rAddr_WIRE_1[0] <= _rAddr_T_8 @[Interface.scala 254:12]
        _rAddr_WIRE_1[1] <= _rAddr_T_9 @[Interface.scala 254:12]
        _rAddr_WIRE_1[2] <= _rAddr_T_10 @[Interface.scala 254:12]
        _rAddr_WIRE_1[3] <= _rAddr_T_11 @[Interface.scala 254:12]
        _rAddr_WIRE_1[4] <= _rAddr_T_12 @[Interface.scala 254:12]
        _rAddr_WIRE_1[5] <= _rAddr_T_13 @[Interface.scala 254:12]
        _rAddr_WIRE_1[6] <= _rAddr_T_14 @[Interface.scala 254:12]
        _rAddr_WIRE_1[7] <= _rAddr_T_15 @[Interface.scala 254:12]
        node rAddr_lo_lo = cat(_rAddr_WIRE_1[1], _rAddr_WIRE_1[0]) @[Interface.scala 262:7]
        node rAddr_lo_hi = cat(_rAddr_WIRE_1[3], _rAddr_WIRE_1[2]) @[Interface.scala 262:7]
        node rAddr_lo = cat(rAddr_lo_hi, rAddr_lo_lo) @[Interface.scala 262:7]
        node rAddr_hi_lo = cat(_rAddr_WIRE_1[5], _rAddr_WIRE_1[4]) @[Interface.scala 262:7]
        node rAddr_hi_hi = cat(_rAddr_WIRE_1[7], _rAddr_WIRE_1[6]) @[Interface.scala 262:7]
        node rAddr_hi = cat(rAddr_hi_hi, rAddr_hi_lo) @[Interface.scala 262:7]
        node _rAddr_T_16 = cat(rAddr_hi, rAddr_lo) @[Interface.scala 262:7]
        wire _rAddr_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rAddr_WIRE_2 <= _rAddr_T_16 @[RegisterBlock.scala 118:82]
        rAddr <= _rAddr_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_62 = eq(UInt<5>("h10"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_62 : @[RegisterBlock.scala 252:38]
        wire _maxLength_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _maxLength_WIRE <= maxLength @[RegisterBlock.scala 118:51]
        node _maxLength_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _maxLength_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _maxLength_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _maxLength_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _maxLength_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _maxLength_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _maxLength_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _maxLength_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node maxLength_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node maxLength_byte_original = bits(_maxLength_WIRE, 7, 0) @[Interface.scala 258:39]
        node _maxLength_T_8 = mux(_maxLength_T, maxLength_byte_wdata, maxLength_byte_original) @[Interface.scala 259:14]
        node maxLength_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node maxLength_byte_original_1 = bits(_maxLength_WIRE, 15, 8) @[Interface.scala 258:39]
        node _maxLength_T_9 = mux(_maxLength_T_1, maxLength_byte_wdata_1, maxLength_byte_original_1) @[Interface.scala 259:14]
        node maxLength_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node maxLength_byte_original_2 = bits(_maxLength_WIRE, 23, 16) @[Interface.scala 258:39]
        node _maxLength_T_10 = mux(_maxLength_T_2, maxLength_byte_wdata_2, maxLength_byte_original_2) @[Interface.scala 259:14]
        node maxLength_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node maxLength_byte_original_3 = bits(_maxLength_WIRE, 31, 24) @[Interface.scala 258:39]
        node _maxLength_T_11 = mux(_maxLength_T_3, maxLength_byte_wdata_3, maxLength_byte_original_3) @[Interface.scala 259:14]
        node maxLength_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node maxLength_byte_original_4 = bits(_maxLength_WIRE, 39, 32) @[Interface.scala 258:39]
        node _maxLength_T_12 = mux(_maxLength_T_4, maxLength_byte_wdata_4, maxLength_byte_original_4) @[Interface.scala 259:14]
        node maxLength_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node maxLength_byte_original_5 = bits(_maxLength_WIRE, 47, 40) @[Interface.scala 258:39]
        node _maxLength_T_13 = mux(_maxLength_T_5, maxLength_byte_wdata_5, maxLength_byte_original_5) @[Interface.scala 259:14]
        node maxLength_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node maxLength_byte_original_6 = bits(_maxLength_WIRE, 55, 48) @[Interface.scala 258:39]
        node _maxLength_T_14 = mux(_maxLength_T_6, maxLength_byte_wdata_6, maxLength_byte_original_6) @[Interface.scala 259:14]
        node maxLength_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node maxLength_byte_original_7 = bits(_maxLength_WIRE, 63, 56) @[Interface.scala 258:39]
        node _maxLength_T_15 = mux(_maxLength_T_7, maxLength_byte_wdata_7, maxLength_byte_original_7) @[Interface.scala 259:14]
        wire _maxLength_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _maxLength_WIRE_1[0] <= _maxLength_T_8 @[Interface.scala 254:12]
        _maxLength_WIRE_1[1] <= _maxLength_T_9 @[Interface.scala 254:12]
        _maxLength_WIRE_1[2] <= _maxLength_T_10 @[Interface.scala 254:12]
        _maxLength_WIRE_1[3] <= _maxLength_T_11 @[Interface.scala 254:12]
        _maxLength_WIRE_1[4] <= _maxLength_T_12 @[Interface.scala 254:12]
        _maxLength_WIRE_1[5] <= _maxLength_T_13 @[Interface.scala 254:12]
        _maxLength_WIRE_1[6] <= _maxLength_T_14 @[Interface.scala 254:12]
        _maxLength_WIRE_1[7] <= _maxLength_T_15 @[Interface.scala 254:12]
        node maxLength_lo_lo = cat(_maxLength_WIRE_1[1], _maxLength_WIRE_1[0]) @[Interface.scala 262:7]
        node maxLength_lo_hi = cat(_maxLength_WIRE_1[3], _maxLength_WIRE_1[2]) @[Interface.scala 262:7]
        node maxLength_lo = cat(maxLength_lo_hi, maxLength_lo_lo) @[Interface.scala 262:7]
        node maxLength_hi_lo = cat(_maxLength_WIRE_1[5], _maxLength_WIRE_1[4]) @[Interface.scala 262:7]
        node maxLength_hi_hi = cat(_maxLength_WIRE_1[7], _maxLength_WIRE_1[6]) @[Interface.scala 262:7]
        node maxLength_hi = cat(maxLength_hi_hi, maxLength_hi_lo) @[Interface.scala 262:7]
        node _maxLength_T_16 = cat(maxLength_hi, maxLength_lo) @[Interface.scala 262:7]
        wire _maxLength_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _maxLength_WIRE_2 <= _maxLength_T_16 @[RegisterBlock.scala 118:82]
        maxLength <= _maxLength_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_63 = eq(UInt<5>("h18"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_63 : @[RegisterBlock.scala 252:38]
        wire _fifoTailReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoTailReg_WIRE <= fifoTailReg @[RegisterBlock.scala 118:51]
        node _fifoTailReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoTailReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoTailReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoTailReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoTailReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoTailReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoTailReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoTailReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoTailReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoTailReg_byte_original = bits(_fifoTailReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoTailReg_T_10 = mux(_fifoTailReg_T_2, fifoTailReg_byte_wdata, fifoTailReg_byte_original) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_1 = bits(_fifoTailReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoTailReg_T_11 = mux(_fifoTailReg_T_3, fifoTailReg_byte_wdata_1, fifoTailReg_byte_original_1) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_2 = bits(_fifoTailReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoTailReg_T_12 = mux(_fifoTailReg_T_4, fifoTailReg_byte_wdata_2, fifoTailReg_byte_original_2) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_3 = bits(_fifoTailReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoTailReg_T_13 = mux(_fifoTailReg_T_5, fifoTailReg_byte_wdata_3, fifoTailReg_byte_original_3) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_4 = bits(_fifoTailReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoTailReg_T_14 = mux(_fifoTailReg_T_6, fifoTailReg_byte_wdata_4, fifoTailReg_byte_original_4) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_5 = bits(_fifoTailReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoTailReg_T_15 = mux(_fifoTailReg_T_7, fifoTailReg_byte_wdata_5, fifoTailReg_byte_original_5) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_6 = bits(_fifoTailReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoTailReg_T_16 = mux(_fifoTailReg_T_8, fifoTailReg_byte_wdata_6, fifoTailReg_byte_original_6) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_7 = bits(_fifoTailReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoTailReg_T_17 = mux(_fifoTailReg_T_9, fifoTailReg_byte_wdata_7, fifoTailReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoTailReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[0] <= _fifoTailReg_T_10 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[1] <= _fifoTailReg_T_11 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[2] <= _fifoTailReg_T_12 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[3] <= _fifoTailReg_T_13 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[4] <= _fifoTailReg_T_14 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[5] <= _fifoTailReg_T_15 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[6] <= _fifoTailReg_T_16 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[7] <= _fifoTailReg_T_17 @[Interface.scala 254:12]
        node fifoTailReg_lo_lo = cat(_fifoTailReg_WIRE_1[1], _fifoTailReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoTailReg_lo_hi = cat(_fifoTailReg_WIRE_1[3], _fifoTailReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoTailReg_lo = cat(fifoTailReg_lo_hi, fifoTailReg_lo_lo) @[Interface.scala 262:7]
        node fifoTailReg_hi_lo = cat(_fifoTailReg_WIRE_1[5], _fifoTailReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoTailReg_hi_hi = cat(_fifoTailReg_WIRE_1[7], _fifoTailReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoTailReg_hi = cat(fifoTailReg_hi_hi, fifoTailReg_hi_lo) @[Interface.scala 262:7]
        node _fifoTailReg_T_18 = cat(fifoTailReg_hi, fifoTailReg_lo) @[Interface.scala 262:7]
        wire _fifoTailReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoTailReg_WIRE_2 <= _fifoTailReg_T_18 @[RegisterBlock.scala 118:82]
        fifoTailReg <= _fifoTailReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_64 = eq(UInt<6>("h20"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_64 : @[RegisterBlock.scala 252:38]
        wire _fifoHeadReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoHeadReg_WIRE <= fifoHeadReg @[RegisterBlock.scala 118:51]
        node _fifoHeadReg_T_2 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoHeadReg_T_3 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoHeadReg_T_4 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoHeadReg_T_5 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoHeadReg_T_6 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoHeadReg_T_7 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoHeadReg_T_8 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoHeadReg_T_9 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoHeadReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original = bits(_fifoHeadReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoHeadReg_T_10 = mux(_fifoHeadReg_T_2, fifoHeadReg_byte_wdata, fifoHeadReg_byte_original) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_1 = bits(_fifoHeadReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoHeadReg_T_11 = mux(_fifoHeadReg_T_3, fifoHeadReg_byte_wdata_1, fifoHeadReg_byte_original_1) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_2 = bits(_fifoHeadReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoHeadReg_T_12 = mux(_fifoHeadReg_T_4, fifoHeadReg_byte_wdata_2, fifoHeadReg_byte_original_2) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_3 = bits(_fifoHeadReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoHeadReg_T_13 = mux(_fifoHeadReg_T_5, fifoHeadReg_byte_wdata_3, fifoHeadReg_byte_original_3) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_4 = bits(_fifoHeadReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoHeadReg_T_14 = mux(_fifoHeadReg_T_6, fifoHeadReg_byte_wdata_4, fifoHeadReg_byte_original_4) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_5 = bits(_fifoHeadReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoHeadReg_T_15 = mux(_fifoHeadReg_T_7, fifoHeadReg_byte_wdata_5, fifoHeadReg_byte_original_5) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_6 = bits(_fifoHeadReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoHeadReg_T_16 = mux(_fifoHeadReg_T_8, fifoHeadReg_byte_wdata_6, fifoHeadReg_byte_original_6) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_7 = bits(_fifoHeadReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoHeadReg_T_17 = mux(_fifoHeadReg_T_9, fifoHeadReg_byte_wdata_7, fifoHeadReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoHeadReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[0] <= _fifoHeadReg_T_10 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[1] <= _fifoHeadReg_T_11 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[2] <= _fifoHeadReg_T_12 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[3] <= _fifoHeadReg_T_13 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[4] <= _fifoHeadReg_T_14 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[5] <= _fifoHeadReg_T_15 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[6] <= _fifoHeadReg_T_16 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[7] <= _fifoHeadReg_T_17 @[Interface.scala 254:12]
        node fifoHeadReg_lo_lo = cat(_fifoHeadReg_WIRE_1[1], _fifoHeadReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoHeadReg_lo_hi = cat(_fifoHeadReg_WIRE_1[3], _fifoHeadReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoHeadReg_lo = cat(fifoHeadReg_lo_hi, fifoHeadReg_lo_lo) @[Interface.scala 262:7]
        node fifoHeadReg_hi_lo = cat(_fifoHeadReg_WIRE_1[5], _fifoHeadReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoHeadReg_hi_hi = cat(_fifoHeadReg_WIRE_1[7], _fifoHeadReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoHeadReg_hi = cat(fifoHeadReg_hi_hi, fifoHeadReg_hi_lo) @[Interface.scala 262:7]
        node _fifoHeadReg_T_18 = cat(fifoHeadReg_hi, fifoHeadReg_lo) @[Interface.scala 262:7]
        wire _fifoHeadReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoHeadReg_WIRE_2 <= _fifoHeadReg_T_18 @[RegisterBlock.scala 118:82]
        fifoHeadReg <= _fifoHeadReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_65 = eq(UInt<6>("h28"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_65 : @[RegisterBlock.scala 252:38]
        wire _procInterrupt_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _procInterrupt_WIRE <= procInterrupt @[RegisterBlock.scala 118:51]
        node _procInterrupt_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _procInterrupt_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _procInterrupt_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _procInterrupt_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _procInterrupt_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _procInterrupt_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _procInterrupt_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _procInterrupt_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node procInterrupt_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node procInterrupt_byte_original = bits(_procInterrupt_WIRE, 7, 0) @[Interface.scala 258:39]
        node _procInterrupt_T_8 = mux(_procInterrupt_T, procInterrupt_byte_wdata, procInterrupt_byte_original) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node procInterrupt_byte_original_1 = bits(_procInterrupt_WIRE, 15, 8) @[Interface.scala 258:39]
        node _procInterrupt_T_9 = mux(_procInterrupt_T_1, procInterrupt_byte_wdata_1, procInterrupt_byte_original_1) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node procInterrupt_byte_original_2 = bits(_procInterrupt_WIRE, 23, 16) @[Interface.scala 258:39]
        node _procInterrupt_T_10 = mux(_procInterrupt_T_2, procInterrupt_byte_wdata_2, procInterrupt_byte_original_2) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node procInterrupt_byte_original_3 = bits(_procInterrupt_WIRE, 31, 24) @[Interface.scala 258:39]
        node _procInterrupt_T_11 = mux(_procInterrupt_T_3, procInterrupt_byte_wdata_3, procInterrupt_byte_original_3) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node procInterrupt_byte_original_4 = bits(_procInterrupt_WIRE, 39, 32) @[Interface.scala 258:39]
        node _procInterrupt_T_12 = mux(_procInterrupt_T_4, procInterrupt_byte_wdata_4, procInterrupt_byte_original_4) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node procInterrupt_byte_original_5 = bits(_procInterrupt_WIRE, 47, 40) @[Interface.scala 258:39]
        node _procInterrupt_T_13 = mux(_procInterrupt_T_5, procInterrupt_byte_wdata_5, procInterrupt_byte_original_5) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node procInterrupt_byte_original_6 = bits(_procInterrupt_WIRE, 55, 48) @[Interface.scala 258:39]
        node _procInterrupt_T_14 = mux(_procInterrupt_T_6, procInterrupt_byte_wdata_6, procInterrupt_byte_original_6) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node procInterrupt_byte_original_7 = bits(_procInterrupt_WIRE, 63, 56) @[Interface.scala 258:39]
        node _procInterrupt_T_15 = mux(_procInterrupt_T_7, procInterrupt_byte_wdata_7, procInterrupt_byte_original_7) @[Interface.scala 259:14]
        wire _procInterrupt_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[0] <= _procInterrupt_T_8 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[1] <= _procInterrupt_T_9 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[2] <= _procInterrupt_T_10 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[3] <= _procInterrupt_T_11 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[4] <= _procInterrupt_T_12 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[5] <= _procInterrupt_T_13 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[6] <= _procInterrupt_T_14 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[7] <= _procInterrupt_T_15 @[Interface.scala 254:12]
        node procInterrupt_lo_lo = cat(_procInterrupt_WIRE_1[1], _procInterrupt_WIRE_1[0]) @[Interface.scala 262:7]
        node procInterrupt_lo_hi = cat(_procInterrupt_WIRE_1[3], _procInterrupt_WIRE_1[2]) @[Interface.scala 262:7]
        node procInterrupt_lo = cat(procInterrupt_lo_hi, procInterrupt_lo_lo) @[Interface.scala 262:7]
        node procInterrupt_hi_lo = cat(_procInterrupt_WIRE_1[5], _procInterrupt_WIRE_1[4]) @[Interface.scala 262:7]
        node procInterrupt_hi_hi = cat(_procInterrupt_WIRE_1[7], _procInterrupt_WIRE_1[6]) @[Interface.scala 262:7]
        node procInterrupt_hi = cat(procInterrupt_hi_hi, procInterrupt_hi_lo) @[Interface.scala 262:7]
        node _procInterrupt_T_16 = cat(procInterrupt_hi, procInterrupt_lo) @[Interface.scala 262:7]
        wire _procInterrupt_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _procInterrupt_WIRE_2 <= _procInterrupt_T_16 @[RegisterBlock.scala 118:82]
        procInterrupt <= _procInterrupt_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_66 = asUInt(reset) @[RegisterBlock.scala 198:11]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
      when _T_67 : @[RegisterBlock.scala 198:11]
        node _T_68 = eq(wrReq, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
        when _T_68 : @[RegisterBlock.scala 198:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:198 assert(wrReq)\n") : printf_1 @[RegisterBlock.scala 198:11]
        assert(clock, wrReq, UInt<1>("h1"), "") : assert_1 @[RegisterBlock.scala 198:11]
      wrReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wrReqData_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp_1 : { resp : UInt<2>} @[RegisterBlock.scala 203:20]
      resp_1.resp <= UInt<2>("h0") @[RegisterBlock.scala 204:15]
      saxil.b.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.b.bits <= resp_1 @[Decoupled.scala 66:19]

  module readyValidMem :
    input clock : Clock
    input reset : Reset
    output io : { read : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, write : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}
    output axi : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}

    reg writeDataDone : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[readyValidMem.scala 35:30]
    reg writeHandshakeDetector : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[readyValidMem.scala 37:39]
    wire _view__aw_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.AWREGION <= _view__aw_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.AWQOS <= _view__aw_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.AWPROT <= _view__aw_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.AWCACHE <= _view__aw_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.AWLOCK <= _view__aw_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.AWBURST <= _view__aw_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.AWSIZE <= _view__aw_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.AWLEN <= _view__aw_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.AWADDR <= _view__aw_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.AWID <= _view__aw_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__ar_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.ARREGION <= _view__ar_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.ARQOS <= _view__ar_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.ARPROT <= _view__ar_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.ARCACHE <= _view__ar_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.ARLOCK <= _view__ar_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.ARBURST <= _view__ar_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.ARSIZE <= _view__ar_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.ARLEN <= _view__ar_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.ARADDR <= _view__ar_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.ARID <= _view__ar_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__w_bits_WIRE : { id : UInt<4>, data : UInt<32>, strb : UInt<4>, last : UInt<1>} @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.last <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.strb <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.data <= UInt<32>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.WLAST <= _view__w_bits_WIRE.last @[readyValidMem.scala 44:10]
    axi.WSTRB <= _view__w_bits_WIRE.strb @[readyValidMem.scala 44:10]
    axi.WDATA <= _view__w_bits_WIRE.data @[readyValidMem.scala 44:10]
    axi.WID <= _view__w_bits_WIRE.id @[readyValidMem.scala 44:10]
    node _T = eq(writeDataDone, UInt<1>("h0")) @[readyValidMem.scala 54:22]
    node _T_1 = and(_T, axi.WREADY) @[readyValidMem.scala 54:30]
    when _T_1 : @[readyValidMem.scala 54:49]
      writeDataDone <= UInt<1>("h1") @[readyValidMem.scala 55:19]
    else :
      node _T_2 = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 56:28]
      node _T_3 = and(_T_2, axi.BVALID) @[readyValidMem.scala 56:36]
      when _T_3 : @[readyValidMem.scala 56:55]
        writeDataDone <= UInt<1>("h0") @[readyValidMem.scala 57:19]
    axi.WVALID <= UInt<1>("h0") @[readyValidMem.scala 68:19]
    node _T_4 = and(io.write.data.valid, axi.WREADY) @[readyValidMem.scala 71:34]
    node _T_5 = not(writeHandshakeDetector) @[readyValidMem.scala 71:56]
    node _T_6 = and(_T_4, _T_5) @[readyValidMem.scala 71:53]
    when _T_6 : @[readyValidMem.scala 71:80]
      axi.WVALID <= UInt<1>("h1") @[readyValidMem.scala 72:25]
      writeHandshakeDetector <= UInt<1>("h1") @[readyValidMem.scala 73:32]
    else :
      when axi.BVALID : @[readyValidMem.scala 74:32]
        writeHandshakeDetector <= UInt<1>("h0") @[readyValidMem.scala 75:32]
    axi.AWVALID <= io.write.address.valid @[readyValidMem.scala 79:28]
    axi.AWADDR <= io.write.address.bits @[readyValidMem.scala 80:28]
    axi.AWLEN <= UInt<1>("h0") @[readyValidMem.scala 81:28]
    axi.AWSIZE <= UInt<2>("h2") @[readyValidMem.scala 82:28]
    axi.AWBURST <= UInt<1>("h1") @[readyValidMem.scala 83:28]
    axi.WDATA <= io.write.data.bits @[readyValidMem.scala 86:28]
    node _view__w_bits_strb_T = asUInt(asSInt(UInt<4>("hf"))) @[readyValidMem.scala 87:60]
    axi.WSTRB <= _view__w_bits_strb_T @[readyValidMem.scala 87:28]
    axi.WLAST <= UInt<1>("h1") @[readyValidMem.scala 88:28]
    axi.BREADY <= UInt<1>("h1") @[readyValidMem.scala 90:28]
    node _io_write_data_ready_T = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 92:51]
    node _io_write_data_ready_T_1 = and(_io_write_data_ready_T, axi.BVALID) @[readyValidMem.scala 92:60]
    io.write.data.ready <= _io_write_data_ready_T_1 @[readyValidMem.scala 92:32]
    io.write.address.ready <= axi.AWREADY @[readyValidMem.scala 93:32]
    axi.ARVALID <= io.read.address.valid @[readyValidMem.scala 103:31]
    axi.ARADDR <= io.read.address.bits @[readyValidMem.scala 104:31]
    io.read.address.ready <= axi.ARREADY @[readyValidMem.scala 105:31]
    axi.ARLEN <= UInt<1>("h0") @[readyValidMem.scala 106:31]
    axi.ARSIZE <= UInt<2>("h2") @[readyValidMem.scala 107:31]
    axi.ARID <= UInt<1>("h0") @[readyValidMem.scala 108:31]
    axi.ARBURST <= UInt<1>("h1") @[readyValidMem.scala 109:31]
    axi.ARPROT <= UInt<1>("h0") @[readyValidMem.scala 111:31]
    axi.RREADY <= io.read.data.ready @[readyValidMem.scala 112:31]
    io.read.data.valid <= axi.RVALID @[readyValidMem.scala 114:31]
    io.read.data.bits <= axi.RDATA @[readyValidMem.scala 115:31]

  module readyValidMem_1 :
    input clock : Clock
    input reset : Reset
    output io : { read : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, write : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}
    output axi : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}

    reg writeDataDone : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[readyValidMem.scala 35:30]
    reg writeHandshakeDetector : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[readyValidMem.scala 37:39]
    wire _view__aw_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.AWREGION <= _view__aw_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.AWQOS <= _view__aw_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.AWPROT <= _view__aw_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.AWCACHE <= _view__aw_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.AWLOCK <= _view__aw_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.AWBURST <= _view__aw_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.AWSIZE <= _view__aw_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.AWLEN <= _view__aw_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.AWADDR <= _view__aw_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.AWID <= _view__aw_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__ar_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.ARREGION <= _view__ar_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.ARQOS <= _view__ar_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.ARPROT <= _view__ar_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.ARCACHE <= _view__ar_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.ARLOCK <= _view__ar_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.ARBURST <= _view__ar_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.ARSIZE <= _view__ar_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.ARLEN <= _view__ar_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.ARADDR <= _view__ar_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.ARID <= _view__ar_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__w_bits_WIRE : { id : UInt<4>, data : UInt<32>, strb : UInt<4>, last : UInt<1>} @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.last <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.strb <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.data <= UInt<32>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.WLAST <= _view__w_bits_WIRE.last @[readyValidMem.scala 44:10]
    axi.WSTRB <= _view__w_bits_WIRE.strb @[readyValidMem.scala 44:10]
    axi.WDATA <= _view__w_bits_WIRE.data @[readyValidMem.scala 44:10]
    axi.WID <= _view__w_bits_WIRE.id @[readyValidMem.scala 44:10]
    node _T = eq(writeDataDone, UInt<1>("h0")) @[readyValidMem.scala 54:22]
    node _T_1 = and(_T, axi.WREADY) @[readyValidMem.scala 54:30]
    when _T_1 : @[readyValidMem.scala 54:49]
      writeDataDone <= UInt<1>("h1") @[readyValidMem.scala 55:19]
    else :
      node _T_2 = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 56:28]
      node _T_3 = and(_T_2, axi.BVALID) @[readyValidMem.scala 56:36]
      when _T_3 : @[readyValidMem.scala 56:55]
        writeDataDone <= UInt<1>("h0") @[readyValidMem.scala 57:19]
    axi.WVALID <= UInt<1>("h0") @[readyValidMem.scala 68:19]
    node _T_4 = and(io.write.data.valid, axi.WREADY) @[readyValidMem.scala 71:34]
    node _T_5 = not(writeHandshakeDetector) @[readyValidMem.scala 71:56]
    node _T_6 = and(_T_4, _T_5) @[readyValidMem.scala 71:53]
    when _T_6 : @[readyValidMem.scala 71:80]
      axi.WVALID <= UInt<1>("h1") @[readyValidMem.scala 72:25]
      writeHandshakeDetector <= UInt<1>("h1") @[readyValidMem.scala 73:32]
    else :
      when axi.BVALID : @[readyValidMem.scala 74:32]
        writeHandshakeDetector <= UInt<1>("h0") @[readyValidMem.scala 75:32]
    axi.AWVALID <= io.write.address.valid @[readyValidMem.scala 79:28]
    axi.AWADDR <= io.write.address.bits @[readyValidMem.scala 80:28]
    axi.AWLEN <= UInt<1>("h0") @[readyValidMem.scala 81:28]
    axi.AWSIZE <= UInt<2>("h2") @[readyValidMem.scala 82:28]
    axi.AWBURST <= UInt<1>("h1") @[readyValidMem.scala 83:28]
    axi.WDATA <= io.write.data.bits @[readyValidMem.scala 86:28]
    node _view__w_bits_strb_T = asUInt(asSInt(UInt<4>("hf"))) @[readyValidMem.scala 87:60]
    axi.WSTRB <= _view__w_bits_strb_T @[readyValidMem.scala 87:28]
    axi.WLAST <= UInt<1>("h1") @[readyValidMem.scala 88:28]
    axi.BREADY <= UInt<1>("h1") @[readyValidMem.scala 90:28]
    node _io_write_data_ready_T = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 92:51]
    node _io_write_data_ready_T_1 = and(_io_write_data_ready_T, axi.BVALID) @[readyValidMem.scala 92:60]
    io.write.data.ready <= _io_write_data_ready_T_1 @[readyValidMem.scala 92:32]
    io.write.address.ready <= axi.AWREADY @[readyValidMem.scala 93:32]
    axi.ARVALID <= io.read.address.valid @[readyValidMem.scala 103:31]
    axi.ARADDR <= io.read.address.bits @[readyValidMem.scala 104:31]
    io.read.address.ready <= axi.ARREADY @[readyValidMem.scala 105:31]
    axi.ARLEN <= UInt<1>("h0") @[readyValidMem.scala 106:31]
    axi.ARSIZE <= UInt<2>("h2") @[readyValidMem.scala 107:31]
    axi.ARID <= UInt<1>("h0") @[readyValidMem.scala 108:31]
    axi.ARBURST <= UInt<1>("h1") @[readyValidMem.scala 109:31]
    axi.ARPROT <= UInt<1>("h0") @[readyValidMem.scala 111:31]
    axi.RREADY <= io.read.data.ready @[readyValidMem.scala 112:31]
    io.read.data.valid <= axi.RVALID @[readyValidMem.scala 114:31]
    io.read.data.bits <= axi.RDATA @[readyValidMem.scala 115:31]

  module readyValidMem_2 :
    input clock : Clock
    input reset : Reset
    output io : { read : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, write : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}
    output axi : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}

    reg writeDataDone : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[readyValidMem.scala 35:30]
    reg writeHandshakeDetector : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[readyValidMem.scala 37:39]
    wire _view__aw_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.AWREGION <= _view__aw_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.AWQOS <= _view__aw_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.AWPROT <= _view__aw_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.AWCACHE <= _view__aw_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.AWLOCK <= _view__aw_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.AWBURST <= _view__aw_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.AWSIZE <= _view__aw_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.AWLEN <= _view__aw_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.AWADDR <= _view__aw_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.AWID <= _view__aw_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__ar_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.ARREGION <= _view__ar_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.ARQOS <= _view__ar_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.ARPROT <= _view__ar_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.ARCACHE <= _view__ar_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.ARLOCK <= _view__ar_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.ARBURST <= _view__ar_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.ARSIZE <= _view__ar_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.ARLEN <= _view__ar_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.ARADDR <= _view__ar_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.ARID <= _view__ar_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__w_bits_WIRE : { id : UInt<4>, data : UInt<32>, strb : UInt<4>, last : UInt<1>} @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.last <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.strb <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.data <= UInt<32>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.WLAST <= _view__w_bits_WIRE.last @[readyValidMem.scala 44:10]
    axi.WSTRB <= _view__w_bits_WIRE.strb @[readyValidMem.scala 44:10]
    axi.WDATA <= _view__w_bits_WIRE.data @[readyValidMem.scala 44:10]
    axi.WID <= _view__w_bits_WIRE.id @[readyValidMem.scala 44:10]
    node _T = eq(writeDataDone, UInt<1>("h0")) @[readyValidMem.scala 54:22]
    node _T_1 = and(_T, axi.WREADY) @[readyValidMem.scala 54:30]
    when _T_1 : @[readyValidMem.scala 54:49]
      writeDataDone <= UInt<1>("h1") @[readyValidMem.scala 55:19]
    else :
      node _T_2 = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 56:28]
      node _T_3 = and(_T_2, axi.BVALID) @[readyValidMem.scala 56:36]
      when _T_3 : @[readyValidMem.scala 56:55]
        writeDataDone <= UInt<1>("h0") @[readyValidMem.scala 57:19]
    axi.WVALID <= UInt<1>("h0") @[readyValidMem.scala 68:19]
    node _T_4 = and(io.write.data.valid, axi.WREADY) @[readyValidMem.scala 71:34]
    node _T_5 = not(writeHandshakeDetector) @[readyValidMem.scala 71:56]
    node _T_6 = and(_T_4, _T_5) @[readyValidMem.scala 71:53]
    when _T_6 : @[readyValidMem.scala 71:80]
      axi.WVALID <= UInt<1>("h1") @[readyValidMem.scala 72:25]
      writeHandshakeDetector <= UInt<1>("h1") @[readyValidMem.scala 73:32]
    else :
      when axi.BVALID : @[readyValidMem.scala 74:32]
        writeHandshakeDetector <= UInt<1>("h0") @[readyValidMem.scala 75:32]
    axi.AWVALID <= io.write.address.valid @[readyValidMem.scala 79:28]
    axi.AWADDR <= io.write.address.bits @[readyValidMem.scala 80:28]
    axi.AWLEN <= UInt<1>("h0") @[readyValidMem.scala 81:28]
    axi.AWSIZE <= UInt<2>("h2") @[readyValidMem.scala 82:28]
    axi.AWBURST <= UInt<1>("h1") @[readyValidMem.scala 83:28]
    axi.WDATA <= io.write.data.bits @[readyValidMem.scala 86:28]
    node _view__w_bits_strb_T = asUInt(asSInt(UInt<4>("hf"))) @[readyValidMem.scala 87:60]
    axi.WSTRB <= _view__w_bits_strb_T @[readyValidMem.scala 87:28]
    axi.WLAST <= UInt<1>("h1") @[readyValidMem.scala 88:28]
    axi.BREADY <= UInt<1>("h1") @[readyValidMem.scala 90:28]
    node _io_write_data_ready_T = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 92:51]
    node _io_write_data_ready_T_1 = and(_io_write_data_ready_T, axi.BVALID) @[readyValidMem.scala 92:60]
    io.write.data.ready <= _io_write_data_ready_T_1 @[readyValidMem.scala 92:32]
    io.write.address.ready <= axi.AWREADY @[readyValidMem.scala 93:32]
    axi.ARVALID <= io.read.address.valid @[readyValidMem.scala 103:31]
    axi.ARADDR <= io.read.address.bits @[readyValidMem.scala 104:31]
    io.read.address.ready <= axi.ARREADY @[readyValidMem.scala 105:31]
    axi.ARLEN <= UInt<1>("h0") @[readyValidMem.scala 106:31]
    axi.ARSIZE <= UInt<2>("h2") @[readyValidMem.scala 107:31]
    axi.ARID <= UInt<1>("h0") @[readyValidMem.scala 108:31]
    axi.ARBURST <= UInt<1>("h1") @[readyValidMem.scala 109:31]
    axi.ARPROT <= UInt<1>("h0") @[readyValidMem.scala 111:31]
    axi.RREADY <= io.read.data.ready @[readyValidMem.scala 112:31]
    io.read.data.valid <= axi.RVALID @[readyValidMem.scala 114:31]
    io.read.data.bits <= axi.RDATA @[readyValidMem.scala 115:31]

  module readyValidMem_3 :
    input clock : Clock
    input reset : Reset
    output io : { read : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, write : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}
    output axi : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}

    reg writeDataDone : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[readyValidMem.scala 35:30]
    reg writeHandshakeDetector : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[readyValidMem.scala 37:39]
    wire _view__aw_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.AWREGION <= _view__aw_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.AWQOS <= _view__aw_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.AWPROT <= _view__aw_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.AWCACHE <= _view__aw_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.AWLOCK <= _view__aw_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.AWBURST <= _view__aw_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.AWSIZE <= _view__aw_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.AWLEN <= _view__aw_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.AWADDR <= _view__aw_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.AWID <= _view__aw_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__ar_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.ARREGION <= _view__ar_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.ARQOS <= _view__ar_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.ARPROT <= _view__ar_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.ARCACHE <= _view__ar_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.ARLOCK <= _view__ar_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.ARBURST <= _view__ar_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.ARSIZE <= _view__ar_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.ARLEN <= _view__ar_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.ARADDR <= _view__ar_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.ARID <= _view__ar_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__w_bits_WIRE : { id : UInt<4>, data : UInt<32>, strb : UInt<4>, last : UInt<1>} @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.last <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.strb <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.data <= UInt<32>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.WLAST <= _view__w_bits_WIRE.last @[readyValidMem.scala 44:10]
    axi.WSTRB <= _view__w_bits_WIRE.strb @[readyValidMem.scala 44:10]
    axi.WDATA <= _view__w_bits_WIRE.data @[readyValidMem.scala 44:10]
    axi.WID <= _view__w_bits_WIRE.id @[readyValidMem.scala 44:10]
    node _T = eq(writeDataDone, UInt<1>("h0")) @[readyValidMem.scala 54:22]
    node _T_1 = and(_T, axi.WREADY) @[readyValidMem.scala 54:30]
    when _T_1 : @[readyValidMem.scala 54:49]
      writeDataDone <= UInt<1>("h1") @[readyValidMem.scala 55:19]
    else :
      node _T_2 = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 56:28]
      node _T_3 = and(_T_2, axi.BVALID) @[readyValidMem.scala 56:36]
      when _T_3 : @[readyValidMem.scala 56:55]
        writeDataDone <= UInt<1>("h0") @[readyValidMem.scala 57:19]
    axi.WVALID <= UInt<1>("h0") @[readyValidMem.scala 68:19]
    node _T_4 = and(io.write.data.valid, axi.WREADY) @[readyValidMem.scala 71:34]
    node _T_5 = not(writeHandshakeDetector) @[readyValidMem.scala 71:56]
    node _T_6 = and(_T_4, _T_5) @[readyValidMem.scala 71:53]
    when _T_6 : @[readyValidMem.scala 71:80]
      axi.WVALID <= UInt<1>("h1") @[readyValidMem.scala 72:25]
      writeHandshakeDetector <= UInt<1>("h1") @[readyValidMem.scala 73:32]
    else :
      when axi.BVALID : @[readyValidMem.scala 74:32]
        writeHandshakeDetector <= UInt<1>("h0") @[readyValidMem.scala 75:32]
    axi.AWVALID <= io.write.address.valid @[readyValidMem.scala 79:28]
    axi.AWADDR <= io.write.address.bits @[readyValidMem.scala 80:28]
    axi.AWLEN <= UInt<1>("h0") @[readyValidMem.scala 81:28]
    axi.AWSIZE <= UInt<2>("h2") @[readyValidMem.scala 82:28]
    axi.AWBURST <= UInt<1>("h1") @[readyValidMem.scala 83:28]
    axi.WDATA <= io.write.data.bits @[readyValidMem.scala 86:28]
    node _view__w_bits_strb_T = asUInt(asSInt(UInt<4>("hf"))) @[readyValidMem.scala 87:60]
    axi.WSTRB <= _view__w_bits_strb_T @[readyValidMem.scala 87:28]
    axi.WLAST <= UInt<1>("h1") @[readyValidMem.scala 88:28]
    axi.BREADY <= UInt<1>("h1") @[readyValidMem.scala 90:28]
    node _io_write_data_ready_T = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 92:51]
    node _io_write_data_ready_T_1 = and(_io_write_data_ready_T, axi.BVALID) @[readyValidMem.scala 92:60]
    io.write.data.ready <= _io_write_data_ready_T_1 @[readyValidMem.scala 92:32]
    io.write.address.ready <= axi.AWREADY @[readyValidMem.scala 93:32]
    axi.ARVALID <= io.read.address.valid @[readyValidMem.scala 103:31]
    axi.ARADDR <= io.read.address.bits @[readyValidMem.scala 104:31]
    io.read.address.ready <= axi.ARREADY @[readyValidMem.scala 105:31]
    axi.ARLEN <= UInt<1>("h0") @[readyValidMem.scala 106:31]
    axi.ARSIZE <= UInt<2>("h2") @[readyValidMem.scala 107:31]
    axi.ARID <= UInt<1>("h0") @[readyValidMem.scala 108:31]
    axi.ARBURST <= UInt<1>("h1") @[readyValidMem.scala 109:31]
    axi.ARPROT <= UInt<1>("h0") @[readyValidMem.scala 111:31]
    axi.RREADY <= io.read.data.ready @[readyValidMem.scala 112:31]
    io.read.data.valid <= axi.RVALID @[readyValidMem.scala 114:31]
    io.read.data.bits <= axi.RDATA @[readyValidMem.scala 115:31]

  module readyValidMem_4 :
    input clock : Clock
    input reset : Reset
    output io : { read : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}, write : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}
    output axi : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}

    reg writeDataDone : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[readyValidMem.scala 35:30]
    reg writeHandshakeDetector : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[readyValidMem.scala 37:39]
    wire _view__aw_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__aw_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.AWREGION <= _view__aw_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.AWQOS <= _view__aw_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.AWPROT <= _view__aw_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.AWCACHE <= _view__aw_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.AWLOCK <= _view__aw_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.AWBURST <= _view__aw_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.AWSIZE <= _view__aw_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.AWLEN <= _view__aw_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.AWADDR <= _view__aw_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.AWID <= _view__aw_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__ar_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 44:42]
    _view__ar_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.ARREGION <= _view__ar_bits_WIRE.region @[readyValidMem.scala 44:10]
    axi.ARQOS <= _view__ar_bits_WIRE.qos @[readyValidMem.scala 44:10]
    axi.ARPROT <= _view__ar_bits_WIRE.prot @[readyValidMem.scala 44:10]
    axi.ARCACHE <= _view__ar_bits_WIRE.cache @[readyValidMem.scala 44:10]
    axi.ARLOCK <= _view__ar_bits_WIRE.lock @[readyValidMem.scala 44:10]
    axi.ARBURST <= _view__ar_bits_WIRE.burst @[readyValidMem.scala 44:10]
    axi.ARSIZE <= _view__ar_bits_WIRE.size @[readyValidMem.scala 44:10]
    axi.ARLEN <= _view__ar_bits_WIRE.len @[readyValidMem.scala 44:10]
    axi.ARADDR <= _view__ar_bits_WIRE.addr @[readyValidMem.scala 44:10]
    axi.ARID <= _view__ar_bits_WIRE.id @[readyValidMem.scala 44:10]
    wire _view__w_bits_WIRE : { id : UInt<4>, data : UInt<32>, strb : UInt<4>, last : UInt<1>} @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.last <= UInt<1>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.strb <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.data <= UInt<32>("h0") @[readyValidMem.scala 44:42]
    _view__w_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 44:42]
    axi.WLAST <= _view__w_bits_WIRE.last @[readyValidMem.scala 44:10]
    axi.WSTRB <= _view__w_bits_WIRE.strb @[readyValidMem.scala 44:10]
    axi.WDATA <= _view__w_bits_WIRE.data @[readyValidMem.scala 44:10]
    axi.WID <= _view__w_bits_WIRE.id @[readyValidMem.scala 44:10]
    node _T = eq(writeDataDone, UInt<1>("h0")) @[readyValidMem.scala 54:22]
    node _T_1 = and(_T, axi.WREADY) @[readyValidMem.scala 54:30]
    when _T_1 : @[readyValidMem.scala 54:49]
      writeDataDone <= UInt<1>("h1") @[readyValidMem.scala 55:19]
    else :
      node _T_2 = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 56:28]
      node _T_3 = and(_T_2, axi.BVALID) @[readyValidMem.scala 56:36]
      when _T_3 : @[readyValidMem.scala 56:55]
        writeDataDone <= UInt<1>("h0") @[readyValidMem.scala 57:19]
    axi.WVALID <= UInt<1>("h0") @[readyValidMem.scala 68:19]
    node _T_4 = and(io.write.data.valid, axi.WREADY) @[readyValidMem.scala 71:34]
    node _T_5 = not(writeHandshakeDetector) @[readyValidMem.scala 71:56]
    node _T_6 = and(_T_4, _T_5) @[readyValidMem.scala 71:53]
    when _T_6 : @[readyValidMem.scala 71:80]
      axi.WVALID <= UInt<1>("h1") @[readyValidMem.scala 72:25]
      writeHandshakeDetector <= UInt<1>("h1") @[readyValidMem.scala 73:32]
    else :
      when axi.BVALID : @[readyValidMem.scala 74:32]
        writeHandshakeDetector <= UInt<1>("h0") @[readyValidMem.scala 75:32]
    axi.AWVALID <= io.write.address.valid @[readyValidMem.scala 79:28]
    axi.AWADDR <= io.write.address.bits @[readyValidMem.scala 80:28]
    axi.AWLEN <= UInt<1>("h0") @[readyValidMem.scala 81:28]
    axi.AWSIZE <= UInt<2>("h2") @[readyValidMem.scala 82:28]
    axi.AWBURST <= UInt<1>("h1") @[readyValidMem.scala 83:28]
    axi.WDATA <= io.write.data.bits @[readyValidMem.scala 86:28]
    node _view__w_bits_strb_T = asUInt(asSInt(UInt<4>("hf"))) @[readyValidMem.scala 87:60]
    axi.WSTRB <= _view__w_bits_strb_T @[readyValidMem.scala 87:28]
    axi.WLAST <= UInt<1>("h1") @[readyValidMem.scala 88:28]
    axi.BREADY <= UInt<1>("h1") @[readyValidMem.scala 90:28]
    node _io_write_data_ready_T = eq(writeDataDone, UInt<1>("h1")) @[readyValidMem.scala 92:51]
    node _io_write_data_ready_T_1 = and(_io_write_data_ready_T, axi.BVALID) @[readyValidMem.scala 92:60]
    io.write.data.ready <= _io_write_data_ready_T_1 @[readyValidMem.scala 92:32]
    io.write.address.ready <= axi.AWREADY @[readyValidMem.scala 93:32]
    axi.ARVALID <= io.read.address.valid @[readyValidMem.scala 103:31]
    axi.ARADDR <= io.read.address.bits @[readyValidMem.scala 104:31]
    io.read.address.ready <= axi.ARREADY @[readyValidMem.scala 105:31]
    axi.ARLEN <= UInt<1>("h0") @[readyValidMem.scala 106:31]
    axi.ARSIZE <= UInt<2>("h2") @[readyValidMem.scala 107:31]
    axi.ARID <= UInt<1>("h0") @[readyValidMem.scala 108:31]
    axi.ARBURST <= UInt<1>("h1") @[readyValidMem.scala 109:31]
    axi.ARPROT <= UInt<1>("h0") @[readyValidMem.scala 111:31]
    axi.RREADY <= io.read.data.ready @[readyValidMem.scala 112:31]
    io.read.data.valid <= axi.RVALID @[readyValidMem.scala 114:31]
    io.read.data.bits <= axi.RDATA @[readyValidMem.scala 115:31]

  module stealSide :
    input clock : Clock
    input reset : Reset
    output io : { flip axi_mgmt_vss : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}[5], vss_axi_full : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}[5], taskOut : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<32>}[24], flip taskIn : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<32>}[24]}
    output connSyncSide : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}}}[0]

    inst stealNW_TQ of stealNW_TQ @[stealSide.scala 53:28]
    stealNW_TQ.clock <= clock
    stealNW_TQ.reset <= reset
    inst virtualStealServers_0 of virtualStealServer @[stealSide.scala 63:75]
    virtualStealServers_0.clock <= clock
    virtualStealServers_0.reset <= reset
    inst virtualStealServers_1 of virtualStealServer_1 @[stealSide.scala 63:75]
    virtualStealServers_1.clock <= clock
    virtualStealServers_1.reset <= reset
    inst virtualStealServers_2 of virtualStealServer_2 @[stealSide.scala 63:75]
    virtualStealServers_2.clock <= clock
    virtualStealServers_2.reset <= reset
    inst virtualStealServers_3 of virtualStealServer_3 @[stealSide.scala 63:75]
    virtualStealServers_3.clock <= clock
    virtualStealServers_3.reset <= reset
    inst virtualStealServers_4 of virtualStealServer_4 @[stealSide.scala 63:75]
    virtualStealServers_4.clock <= clock
    virtualStealServers_4.reset <= reset
    virtualStealServers_0.io.axi_mgmt <= io.axi_mgmt_vss[0] @[stealSide.scala 83:28]
    virtualStealServers_0.io.ntwDataUnitOccupancy <= stealNW_TQ.io.ntwDataUnitOccupancyVSS[0] @[stealSide.scala 84:56]
    virtualStealServers_1.io.axi_mgmt <= io.axi_mgmt_vss[1] @[stealSide.scala 83:28]
    virtualStealServers_1.io.ntwDataUnitOccupancy <= stealNW_TQ.io.ntwDataUnitOccupancyVSS[1] @[stealSide.scala 84:56]
    virtualStealServers_2.io.axi_mgmt <= io.axi_mgmt_vss[2] @[stealSide.scala 83:28]
    virtualStealServers_2.io.ntwDataUnitOccupancy <= stealNW_TQ.io.ntwDataUnitOccupancyVSS[2] @[stealSide.scala 84:56]
    virtualStealServers_3.io.axi_mgmt <= io.axi_mgmt_vss[3] @[stealSide.scala 83:28]
    virtualStealServers_3.io.ntwDataUnitOccupancy <= stealNW_TQ.io.ntwDataUnitOccupancyVSS[3] @[stealSide.scala 84:56]
    virtualStealServers_4.io.axi_mgmt <= io.axi_mgmt_vss[4] @[stealSide.scala 83:28]
    virtualStealServers_4.io.ntwDataUnitOccupancy <= stealNW_TQ.io.ntwDataUnitOccupancyVSS[4] @[stealSide.scala 84:56]
    inst vssRvm_0 of readyValidMem @[stealSide.scala 87:68]
    vssRvm_0.clock <= clock
    vssRvm_0.reset <= reset
    inst vssRvm_1 of readyValidMem_1 @[stealSide.scala 87:68]
    vssRvm_1.clock <= clock
    vssRvm_1.reset <= reset
    inst vssRvm_2 of readyValidMem_2 @[stealSide.scala 87:68]
    vssRvm_2.clock <= clock
    vssRvm_2.reset <= reset
    inst vssRvm_3 of readyValidMem_3 @[stealSide.scala 87:68]
    vssRvm_3.clock <= clock
    vssRvm_3.reset <= reset
    inst vssRvm_4 of readyValidMem_4 @[stealSide.scala 87:68]
    vssRvm_4.clock <= clock
    vssRvm_4.reset <= reset
    vssRvm_0.io.read.address <= virtualStealServers_0.io.read_address @[stealSide.scala 91:47]
    virtualStealServers_0.io.read_data <= vssRvm_0.io.read.data @[stealSide.scala 92:47]
    vssRvm_0.io.write.address <= virtualStealServers_0.io.write_address @[stealSide.scala 93:47]
    vssRvm_0.io.write.data <= virtualStealServers_0.io.write_data @[stealSide.scala 94:47]
    vssRvm_0.axi.BRESP <= io.vss_axi_full[0].BRESP @[stealSide.scala 95:47]
    vssRvm_0.axi.BID <= io.vss_axi_full[0].BID @[stealSide.scala 95:47]
    vssRvm_0.axi.BVALID <= io.vss_axi_full[0].BVALID @[stealSide.scala 95:47]
    io.vss_axi_full[0].BREADY <= vssRvm_0.axi.BREADY @[stealSide.scala 95:47]
    io.vss_axi_full[0].WLAST <= vssRvm_0.axi.WLAST @[stealSide.scala 95:47]
    io.vss_axi_full[0].WSTRB <= vssRvm_0.axi.WSTRB @[stealSide.scala 95:47]
    io.vss_axi_full[0].WDATA <= vssRvm_0.axi.WDATA @[stealSide.scala 95:47]
    io.vss_axi_full[0].WID <= vssRvm_0.axi.WID @[stealSide.scala 95:47]
    io.vss_axi_full[0].WVALID <= vssRvm_0.axi.WVALID @[stealSide.scala 95:47]
    vssRvm_0.axi.WREADY <= io.vss_axi_full[0].WREADY @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWREGION <= vssRvm_0.axi.AWREGION @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWQOS <= vssRvm_0.axi.AWQOS @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWPROT <= vssRvm_0.axi.AWPROT @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWCACHE <= vssRvm_0.axi.AWCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWLOCK <= vssRvm_0.axi.AWLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWBURST <= vssRvm_0.axi.AWBURST @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWSIZE <= vssRvm_0.axi.AWSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWLEN <= vssRvm_0.axi.AWLEN @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWADDR <= vssRvm_0.axi.AWADDR @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWID <= vssRvm_0.axi.AWID @[stealSide.scala 95:47]
    io.vss_axi_full[0].AWVALID <= vssRvm_0.axi.AWVALID @[stealSide.scala 95:47]
    vssRvm_0.axi.AWREADY <= io.vss_axi_full[0].AWREADY @[stealSide.scala 95:47]
    vssRvm_0.axi.RLAST <= io.vss_axi_full[0].RLAST @[stealSide.scala 95:47]
    vssRvm_0.axi.RRESP <= io.vss_axi_full[0].RRESP @[stealSide.scala 95:47]
    vssRvm_0.axi.RDATA <= io.vss_axi_full[0].RDATA @[stealSide.scala 95:47]
    vssRvm_0.axi.RID <= io.vss_axi_full[0].RID @[stealSide.scala 95:47]
    vssRvm_0.axi.RVALID <= io.vss_axi_full[0].RVALID @[stealSide.scala 95:47]
    io.vss_axi_full[0].RREADY <= vssRvm_0.axi.RREADY @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARREGION <= vssRvm_0.axi.ARREGION @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARQOS <= vssRvm_0.axi.ARQOS @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARPROT <= vssRvm_0.axi.ARPROT @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARCACHE <= vssRvm_0.axi.ARCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARLOCK <= vssRvm_0.axi.ARLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARBURST <= vssRvm_0.axi.ARBURST @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARSIZE <= vssRvm_0.axi.ARSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARLEN <= vssRvm_0.axi.ARLEN @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARADDR <= vssRvm_0.axi.ARADDR @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARID <= vssRvm_0.axi.ARID @[stealSide.scala 95:47]
    io.vss_axi_full[0].ARVALID <= vssRvm_0.axi.ARVALID @[stealSide.scala 95:47]
    vssRvm_0.axi.ARREADY <= io.vss_axi_full[0].ARREADY @[stealSide.scala 95:47]
    virtualStealServers_0.io.connNetwork <= stealNW_TQ.io.connVSS[0] @[stealSide.scala 96:47]
    vssRvm_1.io.read.address <= virtualStealServers_1.io.read_address @[stealSide.scala 91:47]
    virtualStealServers_1.io.read_data <= vssRvm_1.io.read.data @[stealSide.scala 92:47]
    vssRvm_1.io.write.address <= virtualStealServers_1.io.write_address @[stealSide.scala 93:47]
    vssRvm_1.io.write.data <= virtualStealServers_1.io.write_data @[stealSide.scala 94:47]
    vssRvm_1.axi.BRESP <= io.vss_axi_full[1].BRESP @[stealSide.scala 95:47]
    vssRvm_1.axi.BID <= io.vss_axi_full[1].BID @[stealSide.scala 95:47]
    vssRvm_1.axi.BVALID <= io.vss_axi_full[1].BVALID @[stealSide.scala 95:47]
    io.vss_axi_full[1].BREADY <= vssRvm_1.axi.BREADY @[stealSide.scala 95:47]
    io.vss_axi_full[1].WLAST <= vssRvm_1.axi.WLAST @[stealSide.scala 95:47]
    io.vss_axi_full[1].WSTRB <= vssRvm_1.axi.WSTRB @[stealSide.scala 95:47]
    io.vss_axi_full[1].WDATA <= vssRvm_1.axi.WDATA @[stealSide.scala 95:47]
    io.vss_axi_full[1].WID <= vssRvm_1.axi.WID @[stealSide.scala 95:47]
    io.vss_axi_full[1].WVALID <= vssRvm_1.axi.WVALID @[stealSide.scala 95:47]
    vssRvm_1.axi.WREADY <= io.vss_axi_full[1].WREADY @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWREGION <= vssRvm_1.axi.AWREGION @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWQOS <= vssRvm_1.axi.AWQOS @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWPROT <= vssRvm_1.axi.AWPROT @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWCACHE <= vssRvm_1.axi.AWCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWLOCK <= vssRvm_1.axi.AWLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWBURST <= vssRvm_1.axi.AWBURST @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWSIZE <= vssRvm_1.axi.AWSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWLEN <= vssRvm_1.axi.AWLEN @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWADDR <= vssRvm_1.axi.AWADDR @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWID <= vssRvm_1.axi.AWID @[stealSide.scala 95:47]
    io.vss_axi_full[1].AWVALID <= vssRvm_1.axi.AWVALID @[stealSide.scala 95:47]
    vssRvm_1.axi.AWREADY <= io.vss_axi_full[1].AWREADY @[stealSide.scala 95:47]
    vssRvm_1.axi.RLAST <= io.vss_axi_full[1].RLAST @[stealSide.scala 95:47]
    vssRvm_1.axi.RRESP <= io.vss_axi_full[1].RRESP @[stealSide.scala 95:47]
    vssRvm_1.axi.RDATA <= io.vss_axi_full[1].RDATA @[stealSide.scala 95:47]
    vssRvm_1.axi.RID <= io.vss_axi_full[1].RID @[stealSide.scala 95:47]
    vssRvm_1.axi.RVALID <= io.vss_axi_full[1].RVALID @[stealSide.scala 95:47]
    io.vss_axi_full[1].RREADY <= vssRvm_1.axi.RREADY @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARREGION <= vssRvm_1.axi.ARREGION @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARQOS <= vssRvm_1.axi.ARQOS @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARPROT <= vssRvm_1.axi.ARPROT @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARCACHE <= vssRvm_1.axi.ARCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARLOCK <= vssRvm_1.axi.ARLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARBURST <= vssRvm_1.axi.ARBURST @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARSIZE <= vssRvm_1.axi.ARSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARLEN <= vssRvm_1.axi.ARLEN @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARADDR <= vssRvm_1.axi.ARADDR @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARID <= vssRvm_1.axi.ARID @[stealSide.scala 95:47]
    io.vss_axi_full[1].ARVALID <= vssRvm_1.axi.ARVALID @[stealSide.scala 95:47]
    vssRvm_1.axi.ARREADY <= io.vss_axi_full[1].ARREADY @[stealSide.scala 95:47]
    virtualStealServers_1.io.connNetwork <= stealNW_TQ.io.connVSS[1] @[stealSide.scala 96:47]
    vssRvm_2.io.read.address <= virtualStealServers_2.io.read_address @[stealSide.scala 91:47]
    virtualStealServers_2.io.read_data <= vssRvm_2.io.read.data @[stealSide.scala 92:47]
    vssRvm_2.io.write.address <= virtualStealServers_2.io.write_address @[stealSide.scala 93:47]
    vssRvm_2.io.write.data <= virtualStealServers_2.io.write_data @[stealSide.scala 94:47]
    vssRvm_2.axi.BRESP <= io.vss_axi_full[2].BRESP @[stealSide.scala 95:47]
    vssRvm_2.axi.BID <= io.vss_axi_full[2].BID @[stealSide.scala 95:47]
    vssRvm_2.axi.BVALID <= io.vss_axi_full[2].BVALID @[stealSide.scala 95:47]
    io.vss_axi_full[2].BREADY <= vssRvm_2.axi.BREADY @[stealSide.scala 95:47]
    io.vss_axi_full[2].WLAST <= vssRvm_2.axi.WLAST @[stealSide.scala 95:47]
    io.vss_axi_full[2].WSTRB <= vssRvm_2.axi.WSTRB @[stealSide.scala 95:47]
    io.vss_axi_full[2].WDATA <= vssRvm_2.axi.WDATA @[stealSide.scala 95:47]
    io.vss_axi_full[2].WID <= vssRvm_2.axi.WID @[stealSide.scala 95:47]
    io.vss_axi_full[2].WVALID <= vssRvm_2.axi.WVALID @[stealSide.scala 95:47]
    vssRvm_2.axi.WREADY <= io.vss_axi_full[2].WREADY @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWREGION <= vssRvm_2.axi.AWREGION @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWQOS <= vssRvm_2.axi.AWQOS @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWPROT <= vssRvm_2.axi.AWPROT @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWCACHE <= vssRvm_2.axi.AWCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWLOCK <= vssRvm_2.axi.AWLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWBURST <= vssRvm_2.axi.AWBURST @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWSIZE <= vssRvm_2.axi.AWSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWLEN <= vssRvm_2.axi.AWLEN @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWADDR <= vssRvm_2.axi.AWADDR @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWID <= vssRvm_2.axi.AWID @[stealSide.scala 95:47]
    io.vss_axi_full[2].AWVALID <= vssRvm_2.axi.AWVALID @[stealSide.scala 95:47]
    vssRvm_2.axi.AWREADY <= io.vss_axi_full[2].AWREADY @[stealSide.scala 95:47]
    vssRvm_2.axi.RLAST <= io.vss_axi_full[2].RLAST @[stealSide.scala 95:47]
    vssRvm_2.axi.RRESP <= io.vss_axi_full[2].RRESP @[stealSide.scala 95:47]
    vssRvm_2.axi.RDATA <= io.vss_axi_full[2].RDATA @[stealSide.scala 95:47]
    vssRvm_2.axi.RID <= io.vss_axi_full[2].RID @[stealSide.scala 95:47]
    vssRvm_2.axi.RVALID <= io.vss_axi_full[2].RVALID @[stealSide.scala 95:47]
    io.vss_axi_full[2].RREADY <= vssRvm_2.axi.RREADY @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARREGION <= vssRvm_2.axi.ARREGION @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARQOS <= vssRvm_2.axi.ARQOS @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARPROT <= vssRvm_2.axi.ARPROT @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARCACHE <= vssRvm_2.axi.ARCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARLOCK <= vssRvm_2.axi.ARLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARBURST <= vssRvm_2.axi.ARBURST @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARSIZE <= vssRvm_2.axi.ARSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARLEN <= vssRvm_2.axi.ARLEN @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARADDR <= vssRvm_2.axi.ARADDR @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARID <= vssRvm_2.axi.ARID @[stealSide.scala 95:47]
    io.vss_axi_full[2].ARVALID <= vssRvm_2.axi.ARVALID @[stealSide.scala 95:47]
    vssRvm_2.axi.ARREADY <= io.vss_axi_full[2].ARREADY @[stealSide.scala 95:47]
    virtualStealServers_2.io.connNetwork <= stealNW_TQ.io.connVSS[2] @[stealSide.scala 96:47]
    vssRvm_3.io.read.address <= virtualStealServers_3.io.read_address @[stealSide.scala 91:47]
    virtualStealServers_3.io.read_data <= vssRvm_3.io.read.data @[stealSide.scala 92:47]
    vssRvm_3.io.write.address <= virtualStealServers_3.io.write_address @[stealSide.scala 93:47]
    vssRvm_3.io.write.data <= virtualStealServers_3.io.write_data @[stealSide.scala 94:47]
    vssRvm_3.axi.BRESP <= io.vss_axi_full[3].BRESP @[stealSide.scala 95:47]
    vssRvm_3.axi.BID <= io.vss_axi_full[3].BID @[stealSide.scala 95:47]
    vssRvm_3.axi.BVALID <= io.vss_axi_full[3].BVALID @[stealSide.scala 95:47]
    io.vss_axi_full[3].BREADY <= vssRvm_3.axi.BREADY @[stealSide.scala 95:47]
    io.vss_axi_full[3].WLAST <= vssRvm_3.axi.WLAST @[stealSide.scala 95:47]
    io.vss_axi_full[3].WSTRB <= vssRvm_3.axi.WSTRB @[stealSide.scala 95:47]
    io.vss_axi_full[3].WDATA <= vssRvm_3.axi.WDATA @[stealSide.scala 95:47]
    io.vss_axi_full[3].WID <= vssRvm_3.axi.WID @[stealSide.scala 95:47]
    io.vss_axi_full[3].WVALID <= vssRvm_3.axi.WVALID @[stealSide.scala 95:47]
    vssRvm_3.axi.WREADY <= io.vss_axi_full[3].WREADY @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWREGION <= vssRvm_3.axi.AWREGION @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWQOS <= vssRvm_3.axi.AWQOS @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWPROT <= vssRvm_3.axi.AWPROT @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWCACHE <= vssRvm_3.axi.AWCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWLOCK <= vssRvm_3.axi.AWLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWBURST <= vssRvm_3.axi.AWBURST @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWSIZE <= vssRvm_3.axi.AWSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWLEN <= vssRvm_3.axi.AWLEN @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWADDR <= vssRvm_3.axi.AWADDR @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWID <= vssRvm_3.axi.AWID @[stealSide.scala 95:47]
    io.vss_axi_full[3].AWVALID <= vssRvm_3.axi.AWVALID @[stealSide.scala 95:47]
    vssRvm_3.axi.AWREADY <= io.vss_axi_full[3].AWREADY @[stealSide.scala 95:47]
    vssRvm_3.axi.RLAST <= io.vss_axi_full[3].RLAST @[stealSide.scala 95:47]
    vssRvm_3.axi.RRESP <= io.vss_axi_full[3].RRESP @[stealSide.scala 95:47]
    vssRvm_3.axi.RDATA <= io.vss_axi_full[3].RDATA @[stealSide.scala 95:47]
    vssRvm_3.axi.RID <= io.vss_axi_full[3].RID @[stealSide.scala 95:47]
    vssRvm_3.axi.RVALID <= io.vss_axi_full[3].RVALID @[stealSide.scala 95:47]
    io.vss_axi_full[3].RREADY <= vssRvm_3.axi.RREADY @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARREGION <= vssRvm_3.axi.ARREGION @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARQOS <= vssRvm_3.axi.ARQOS @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARPROT <= vssRvm_3.axi.ARPROT @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARCACHE <= vssRvm_3.axi.ARCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARLOCK <= vssRvm_3.axi.ARLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARBURST <= vssRvm_3.axi.ARBURST @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARSIZE <= vssRvm_3.axi.ARSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARLEN <= vssRvm_3.axi.ARLEN @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARADDR <= vssRvm_3.axi.ARADDR @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARID <= vssRvm_3.axi.ARID @[stealSide.scala 95:47]
    io.vss_axi_full[3].ARVALID <= vssRvm_3.axi.ARVALID @[stealSide.scala 95:47]
    vssRvm_3.axi.ARREADY <= io.vss_axi_full[3].ARREADY @[stealSide.scala 95:47]
    virtualStealServers_3.io.connNetwork <= stealNW_TQ.io.connVSS[3] @[stealSide.scala 96:47]
    vssRvm_4.io.read.address <= virtualStealServers_4.io.read_address @[stealSide.scala 91:47]
    virtualStealServers_4.io.read_data <= vssRvm_4.io.read.data @[stealSide.scala 92:47]
    vssRvm_4.io.write.address <= virtualStealServers_4.io.write_address @[stealSide.scala 93:47]
    vssRvm_4.io.write.data <= virtualStealServers_4.io.write_data @[stealSide.scala 94:47]
    vssRvm_4.axi.BRESP <= io.vss_axi_full[4].BRESP @[stealSide.scala 95:47]
    vssRvm_4.axi.BID <= io.vss_axi_full[4].BID @[stealSide.scala 95:47]
    vssRvm_4.axi.BVALID <= io.vss_axi_full[4].BVALID @[stealSide.scala 95:47]
    io.vss_axi_full[4].BREADY <= vssRvm_4.axi.BREADY @[stealSide.scala 95:47]
    io.vss_axi_full[4].WLAST <= vssRvm_4.axi.WLAST @[stealSide.scala 95:47]
    io.vss_axi_full[4].WSTRB <= vssRvm_4.axi.WSTRB @[stealSide.scala 95:47]
    io.vss_axi_full[4].WDATA <= vssRvm_4.axi.WDATA @[stealSide.scala 95:47]
    io.vss_axi_full[4].WID <= vssRvm_4.axi.WID @[stealSide.scala 95:47]
    io.vss_axi_full[4].WVALID <= vssRvm_4.axi.WVALID @[stealSide.scala 95:47]
    vssRvm_4.axi.WREADY <= io.vss_axi_full[4].WREADY @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWREGION <= vssRvm_4.axi.AWREGION @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWQOS <= vssRvm_4.axi.AWQOS @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWPROT <= vssRvm_4.axi.AWPROT @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWCACHE <= vssRvm_4.axi.AWCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWLOCK <= vssRvm_4.axi.AWLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWBURST <= vssRvm_4.axi.AWBURST @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWSIZE <= vssRvm_4.axi.AWSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWLEN <= vssRvm_4.axi.AWLEN @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWADDR <= vssRvm_4.axi.AWADDR @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWID <= vssRvm_4.axi.AWID @[stealSide.scala 95:47]
    io.vss_axi_full[4].AWVALID <= vssRvm_4.axi.AWVALID @[stealSide.scala 95:47]
    vssRvm_4.axi.AWREADY <= io.vss_axi_full[4].AWREADY @[stealSide.scala 95:47]
    vssRvm_4.axi.RLAST <= io.vss_axi_full[4].RLAST @[stealSide.scala 95:47]
    vssRvm_4.axi.RRESP <= io.vss_axi_full[4].RRESP @[stealSide.scala 95:47]
    vssRvm_4.axi.RDATA <= io.vss_axi_full[4].RDATA @[stealSide.scala 95:47]
    vssRvm_4.axi.RID <= io.vss_axi_full[4].RID @[stealSide.scala 95:47]
    vssRvm_4.axi.RVALID <= io.vss_axi_full[4].RVALID @[stealSide.scala 95:47]
    io.vss_axi_full[4].RREADY <= vssRvm_4.axi.RREADY @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARREGION <= vssRvm_4.axi.ARREGION @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARQOS <= vssRvm_4.axi.ARQOS @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARPROT <= vssRvm_4.axi.ARPROT @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARCACHE <= vssRvm_4.axi.ARCACHE @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARLOCK <= vssRvm_4.axi.ARLOCK @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARBURST <= vssRvm_4.axi.ARBURST @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARSIZE <= vssRvm_4.axi.ARSIZE @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARLEN <= vssRvm_4.axi.ARLEN @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARADDR <= vssRvm_4.axi.ARADDR @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARID <= vssRvm_4.axi.ARID @[stealSide.scala 95:47]
    io.vss_axi_full[4].ARVALID <= vssRvm_4.axi.ARVALID @[stealSide.scala 95:47]
    vssRvm_4.axi.ARREADY <= io.vss_axi_full[4].ARREADY @[stealSide.scala 95:47]
    virtualStealServers_4.io.connNetwork <= stealNW_TQ.io.connVSS[4] @[stealSide.scala 96:47]
    io.taskOut[0].TDATA <= stealNW_TQ.io.connPE[0].pop.bits @[stealSide.scala 100:39]
    io.taskOut[0].TVALID <= stealNW_TQ.io.connPE[0].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[0].pop.ready <= io.taskOut[0].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[0].push.bits <= io.taskIn[0].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[0].push.valid <= io.taskIn[0].TVALID @[stealSide.scala 102:43]
    io.taskIn[0].TREADY <= stealNW_TQ.io.connPE[0].push.ready @[stealSide.scala 102:43]
    io.taskOut[1].TDATA <= stealNW_TQ.io.connPE[1].pop.bits @[stealSide.scala 100:39]
    io.taskOut[1].TVALID <= stealNW_TQ.io.connPE[1].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[1].pop.ready <= io.taskOut[1].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[1].push.bits <= io.taskIn[1].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[1].push.valid <= io.taskIn[1].TVALID @[stealSide.scala 102:43]
    io.taskIn[1].TREADY <= stealNW_TQ.io.connPE[1].push.ready @[stealSide.scala 102:43]
    io.taskOut[2].TDATA <= stealNW_TQ.io.connPE[2].pop.bits @[stealSide.scala 100:39]
    io.taskOut[2].TVALID <= stealNW_TQ.io.connPE[2].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[2].pop.ready <= io.taskOut[2].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[2].push.bits <= io.taskIn[2].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[2].push.valid <= io.taskIn[2].TVALID @[stealSide.scala 102:43]
    io.taskIn[2].TREADY <= stealNW_TQ.io.connPE[2].push.ready @[stealSide.scala 102:43]
    io.taskOut[3].TDATA <= stealNW_TQ.io.connPE[3].pop.bits @[stealSide.scala 100:39]
    io.taskOut[3].TVALID <= stealNW_TQ.io.connPE[3].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[3].pop.ready <= io.taskOut[3].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[3].push.bits <= io.taskIn[3].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[3].push.valid <= io.taskIn[3].TVALID @[stealSide.scala 102:43]
    io.taskIn[3].TREADY <= stealNW_TQ.io.connPE[3].push.ready @[stealSide.scala 102:43]
    io.taskOut[4].TDATA <= stealNW_TQ.io.connPE[4].pop.bits @[stealSide.scala 100:39]
    io.taskOut[4].TVALID <= stealNW_TQ.io.connPE[4].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[4].pop.ready <= io.taskOut[4].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[4].push.bits <= io.taskIn[4].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[4].push.valid <= io.taskIn[4].TVALID @[stealSide.scala 102:43]
    io.taskIn[4].TREADY <= stealNW_TQ.io.connPE[4].push.ready @[stealSide.scala 102:43]
    io.taskOut[5].TDATA <= stealNW_TQ.io.connPE[5].pop.bits @[stealSide.scala 100:39]
    io.taskOut[5].TVALID <= stealNW_TQ.io.connPE[5].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[5].pop.ready <= io.taskOut[5].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[5].push.bits <= io.taskIn[5].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[5].push.valid <= io.taskIn[5].TVALID @[stealSide.scala 102:43]
    io.taskIn[5].TREADY <= stealNW_TQ.io.connPE[5].push.ready @[stealSide.scala 102:43]
    io.taskOut[6].TDATA <= stealNW_TQ.io.connPE[6].pop.bits @[stealSide.scala 100:39]
    io.taskOut[6].TVALID <= stealNW_TQ.io.connPE[6].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[6].pop.ready <= io.taskOut[6].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[6].push.bits <= io.taskIn[6].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[6].push.valid <= io.taskIn[6].TVALID @[stealSide.scala 102:43]
    io.taskIn[6].TREADY <= stealNW_TQ.io.connPE[6].push.ready @[stealSide.scala 102:43]
    io.taskOut[7].TDATA <= stealNW_TQ.io.connPE[7].pop.bits @[stealSide.scala 100:39]
    io.taskOut[7].TVALID <= stealNW_TQ.io.connPE[7].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[7].pop.ready <= io.taskOut[7].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[7].push.bits <= io.taskIn[7].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[7].push.valid <= io.taskIn[7].TVALID @[stealSide.scala 102:43]
    io.taskIn[7].TREADY <= stealNW_TQ.io.connPE[7].push.ready @[stealSide.scala 102:43]
    io.taskOut[8].TDATA <= stealNW_TQ.io.connPE[8].pop.bits @[stealSide.scala 100:39]
    io.taskOut[8].TVALID <= stealNW_TQ.io.connPE[8].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[8].pop.ready <= io.taskOut[8].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[8].push.bits <= io.taskIn[8].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[8].push.valid <= io.taskIn[8].TVALID @[stealSide.scala 102:43]
    io.taskIn[8].TREADY <= stealNW_TQ.io.connPE[8].push.ready @[stealSide.scala 102:43]
    io.taskOut[9].TDATA <= stealNW_TQ.io.connPE[9].pop.bits @[stealSide.scala 100:39]
    io.taskOut[9].TVALID <= stealNW_TQ.io.connPE[9].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[9].pop.ready <= io.taskOut[9].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[9].push.bits <= io.taskIn[9].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[9].push.valid <= io.taskIn[9].TVALID @[stealSide.scala 102:43]
    io.taskIn[9].TREADY <= stealNW_TQ.io.connPE[9].push.ready @[stealSide.scala 102:43]
    io.taskOut[10].TDATA <= stealNW_TQ.io.connPE[10].pop.bits @[stealSide.scala 100:39]
    io.taskOut[10].TVALID <= stealNW_TQ.io.connPE[10].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[10].pop.ready <= io.taskOut[10].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[10].push.bits <= io.taskIn[10].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[10].push.valid <= io.taskIn[10].TVALID @[stealSide.scala 102:43]
    io.taskIn[10].TREADY <= stealNW_TQ.io.connPE[10].push.ready @[stealSide.scala 102:43]
    io.taskOut[11].TDATA <= stealNW_TQ.io.connPE[11].pop.bits @[stealSide.scala 100:39]
    io.taskOut[11].TVALID <= stealNW_TQ.io.connPE[11].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[11].pop.ready <= io.taskOut[11].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[11].push.bits <= io.taskIn[11].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[11].push.valid <= io.taskIn[11].TVALID @[stealSide.scala 102:43]
    io.taskIn[11].TREADY <= stealNW_TQ.io.connPE[11].push.ready @[stealSide.scala 102:43]
    io.taskOut[12].TDATA <= stealNW_TQ.io.connPE[12].pop.bits @[stealSide.scala 100:39]
    io.taskOut[12].TVALID <= stealNW_TQ.io.connPE[12].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[12].pop.ready <= io.taskOut[12].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[12].push.bits <= io.taskIn[12].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[12].push.valid <= io.taskIn[12].TVALID @[stealSide.scala 102:43]
    io.taskIn[12].TREADY <= stealNW_TQ.io.connPE[12].push.ready @[stealSide.scala 102:43]
    io.taskOut[13].TDATA <= stealNW_TQ.io.connPE[13].pop.bits @[stealSide.scala 100:39]
    io.taskOut[13].TVALID <= stealNW_TQ.io.connPE[13].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[13].pop.ready <= io.taskOut[13].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[13].push.bits <= io.taskIn[13].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[13].push.valid <= io.taskIn[13].TVALID @[stealSide.scala 102:43]
    io.taskIn[13].TREADY <= stealNW_TQ.io.connPE[13].push.ready @[stealSide.scala 102:43]
    io.taskOut[14].TDATA <= stealNW_TQ.io.connPE[14].pop.bits @[stealSide.scala 100:39]
    io.taskOut[14].TVALID <= stealNW_TQ.io.connPE[14].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[14].pop.ready <= io.taskOut[14].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[14].push.bits <= io.taskIn[14].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[14].push.valid <= io.taskIn[14].TVALID @[stealSide.scala 102:43]
    io.taskIn[14].TREADY <= stealNW_TQ.io.connPE[14].push.ready @[stealSide.scala 102:43]
    io.taskOut[15].TDATA <= stealNW_TQ.io.connPE[15].pop.bits @[stealSide.scala 100:39]
    io.taskOut[15].TVALID <= stealNW_TQ.io.connPE[15].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[15].pop.ready <= io.taskOut[15].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[15].push.bits <= io.taskIn[15].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[15].push.valid <= io.taskIn[15].TVALID @[stealSide.scala 102:43]
    io.taskIn[15].TREADY <= stealNW_TQ.io.connPE[15].push.ready @[stealSide.scala 102:43]
    io.taskOut[16].TDATA <= stealNW_TQ.io.connPE[16].pop.bits @[stealSide.scala 100:39]
    io.taskOut[16].TVALID <= stealNW_TQ.io.connPE[16].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[16].pop.ready <= io.taskOut[16].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[16].push.bits <= io.taskIn[16].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[16].push.valid <= io.taskIn[16].TVALID @[stealSide.scala 102:43]
    io.taskIn[16].TREADY <= stealNW_TQ.io.connPE[16].push.ready @[stealSide.scala 102:43]
    io.taskOut[17].TDATA <= stealNW_TQ.io.connPE[17].pop.bits @[stealSide.scala 100:39]
    io.taskOut[17].TVALID <= stealNW_TQ.io.connPE[17].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[17].pop.ready <= io.taskOut[17].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[17].push.bits <= io.taskIn[17].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[17].push.valid <= io.taskIn[17].TVALID @[stealSide.scala 102:43]
    io.taskIn[17].TREADY <= stealNW_TQ.io.connPE[17].push.ready @[stealSide.scala 102:43]
    io.taskOut[18].TDATA <= stealNW_TQ.io.connPE[18].pop.bits @[stealSide.scala 100:39]
    io.taskOut[18].TVALID <= stealNW_TQ.io.connPE[18].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[18].pop.ready <= io.taskOut[18].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[18].push.bits <= io.taskIn[18].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[18].push.valid <= io.taskIn[18].TVALID @[stealSide.scala 102:43]
    io.taskIn[18].TREADY <= stealNW_TQ.io.connPE[18].push.ready @[stealSide.scala 102:43]
    io.taskOut[19].TDATA <= stealNW_TQ.io.connPE[19].pop.bits @[stealSide.scala 100:39]
    io.taskOut[19].TVALID <= stealNW_TQ.io.connPE[19].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[19].pop.ready <= io.taskOut[19].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[19].push.bits <= io.taskIn[19].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[19].push.valid <= io.taskIn[19].TVALID @[stealSide.scala 102:43]
    io.taskIn[19].TREADY <= stealNW_TQ.io.connPE[19].push.ready @[stealSide.scala 102:43]
    io.taskOut[20].TDATA <= stealNW_TQ.io.connPE[20].pop.bits @[stealSide.scala 100:39]
    io.taskOut[20].TVALID <= stealNW_TQ.io.connPE[20].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[20].pop.ready <= io.taskOut[20].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[20].push.bits <= io.taskIn[20].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[20].push.valid <= io.taskIn[20].TVALID @[stealSide.scala 102:43]
    io.taskIn[20].TREADY <= stealNW_TQ.io.connPE[20].push.ready @[stealSide.scala 102:43]
    io.taskOut[21].TDATA <= stealNW_TQ.io.connPE[21].pop.bits @[stealSide.scala 100:39]
    io.taskOut[21].TVALID <= stealNW_TQ.io.connPE[21].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[21].pop.ready <= io.taskOut[21].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[21].push.bits <= io.taskIn[21].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[21].push.valid <= io.taskIn[21].TVALID @[stealSide.scala 102:43]
    io.taskIn[21].TREADY <= stealNW_TQ.io.connPE[21].push.ready @[stealSide.scala 102:43]
    io.taskOut[22].TDATA <= stealNW_TQ.io.connPE[22].pop.bits @[stealSide.scala 100:39]
    io.taskOut[22].TVALID <= stealNW_TQ.io.connPE[22].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[22].pop.ready <= io.taskOut[22].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[22].push.bits <= io.taskIn[22].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[22].push.valid <= io.taskIn[22].TVALID @[stealSide.scala 102:43]
    io.taskIn[22].TREADY <= stealNW_TQ.io.connPE[22].push.ready @[stealSide.scala 102:43]
    io.taskOut[23].TDATA <= stealNW_TQ.io.connPE[23].pop.bits @[stealSide.scala 100:39]
    io.taskOut[23].TVALID <= stealNW_TQ.io.connPE[23].pop.valid @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[23].pop.ready <= io.taskOut[23].TREADY @[stealSide.scala 100:39]
    stealNW_TQ.io.connPE[23].push.bits <= io.taskIn[23].TDATA @[stealSide.scala 102:43]
    stealNW_TQ.io.connPE[23].push.valid <= io.taskIn[23].TVALID @[stealSide.scala 102:43]
    io.taskIn[23].TREADY <= stealNW_TQ.io.connPE[23].push.ready @[stealSide.scala 102:43]

  module paper_exp1 :
    input clock : Clock
    input reset : UInt<1>
    output task_stealSide : { flip axi_mgmt_vss : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}[5], vss_axi_full : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<32>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<32>, WSTRB : UInt<4>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}[5], taskOut : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<32>}[24], flip taskIn : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<32>}[24]}

    inst stealSide of stealSide @[fullSysGen.scala 228:29]
    stealSide.clock <= clock
    stealSide.reset <= reset
    stealSide.io.taskIn[0] <= task_stealSide.taskIn[0] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[1] <= task_stealSide.taskIn[1] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[2] <= task_stealSide.taskIn[2] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[3] <= task_stealSide.taskIn[3] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[4] <= task_stealSide.taskIn[4] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[5] <= task_stealSide.taskIn[5] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[6] <= task_stealSide.taskIn[6] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[7] <= task_stealSide.taskIn[7] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[8] <= task_stealSide.taskIn[8] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[9] <= task_stealSide.taskIn[9] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[10] <= task_stealSide.taskIn[10] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[11] <= task_stealSide.taskIn[11] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[12] <= task_stealSide.taskIn[12] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[13] <= task_stealSide.taskIn[13] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[14] <= task_stealSide.taskIn[14] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[15] <= task_stealSide.taskIn[15] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[16] <= task_stealSide.taskIn[16] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[17] <= task_stealSide.taskIn[17] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[18] <= task_stealSide.taskIn[18] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[19] <= task_stealSide.taskIn[19] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[20] <= task_stealSide.taskIn[20] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[21] <= task_stealSide.taskIn[21] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[22] <= task_stealSide.taskIn[22] @[fullSysGen.scala 246:23]
    stealSide.io.taskIn[23] <= task_stealSide.taskIn[23] @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[0].TDATA <= stealSide.io.taskOut[0].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[0].TVALID <= stealSide.io.taskOut[0].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[0].TREADY <= task_stealSide.taskOut[0].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[1].TDATA <= stealSide.io.taskOut[1].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[1].TVALID <= stealSide.io.taskOut[1].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[1].TREADY <= task_stealSide.taskOut[1].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[2].TDATA <= stealSide.io.taskOut[2].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[2].TVALID <= stealSide.io.taskOut[2].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[2].TREADY <= task_stealSide.taskOut[2].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[3].TDATA <= stealSide.io.taskOut[3].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[3].TVALID <= stealSide.io.taskOut[3].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[3].TREADY <= task_stealSide.taskOut[3].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[4].TDATA <= stealSide.io.taskOut[4].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[4].TVALID <= stealSide.io.taskOut[4].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[4].TREADY <= task_stealSide.taskOut[4].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[5].TDATA <= stealSide.io.taskOut[5].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[5].TVALID <= stealSide.io.taskOut[5].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[5].TREADY <= task_stealSide.taskOut[5].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[6].TDATA <= stealSide.io.taskOut[6].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[6].TVALID <= stealSide.io.taskOut[6].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[6].TREADY <= task_stealSide.taskOut[6].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[7].TDATA <= stealSide.io.taskOut[7].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[7].TVALID <= stealSide.io.taskOut[7].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[7].TREADY <= task_stealSide.taskOut[7].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[8].TDATA <= stealSide.io.taskOut[8].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[8].TVALID <= stealSide.io.taskOut[8].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[8].TREADY <= task_stealSide.taskOut[8].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[9].TDATA <= stealSide.io.taskOut[9].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[9].TVALID <= stealSide.io.taskOut[9].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[9].TREADY <= task_stealSide.taskOut[9].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[10].TDATA <= stealSide.io.taskOut[10].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[10].TVALID <= stealSide.io.taskOut[10].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[10].TREADY <= task_stealSide.taskOut[10].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[11].TDATA <= stealSide.io.taskOut[11].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[11].TVALID <= stealSide.io.taskOut[11].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[11].TREADY <= task_stealSide.taskOut[11].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[12].TDATA <= stealSide.io.taskOut[12].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[12].TVALID <= stealSide.io.taskOut[12].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[12].TREADY <= task_stealSide.taskOut[12].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[13].TDATA <= stealSide.io.taskOut[13].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[13].TVALID <= stealSide.io.taskOut[13].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[13].TREADY <= task_stealSide.taskOut[13].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[14].TDATA <= stealSide.io.taskOut[14].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[14].TVALID <= stealSide.io.taskOut[14].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[14].TREADY <= task_stealSide.taskOut[14].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[15].TDATA <= stealSide.io.taskOut[15].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[15].TVALID <= stealSide.io.taskOut[15].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[15].TREADY <= task_stealSide.taskOut[15].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[16].TDATA <= stealSide.io.taskOut[16].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[16].TVALID <= stealSide.io.taskOut[16].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[16].TREADY <= task_stealSide.taskOut[16].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[17].TDATA <= stealSide.io.taskOut[17].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[17].TVALID <= stealSide.io.taskOut[17].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[17].TREADY <= task_stealSide.taskOut[17].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[18].TDATA <= stealSide.io.taskOut[18].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[18].TVALID <= stealSide.io.taskOut[18].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[18].TREADY <= task_stealSide.taskOut[18].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[19].TDATA <= stealSide.io.taskOut[19].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[19].TVALID <= stealSide.io.taskOut[19].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[19].TREADY <= task_stealSide.taskOut[19].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[20].TDATA <= stealSide.io.taskOut[20].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[20].TVALID <= stealSide.io.taskOut[20].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[20].TREADY <= task_stealSide.taskOut[20].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[21].TDATA <= stealSide.io.taskOut[21].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[21].TVALID <= stealSide.io.taskOut[21].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[21].TREADY <= task_stealSide.taskOut[21].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[22].TDATA <= stealSide.io.taskOut[22].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[22].TVALID <= stealSide.io.taskOut[22].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[22].TREADY <= task_stealSide.taskOut[22].TREADY @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[23].TDATA <= stealSide.io.taskOut[23].TDATA @[fullSysGen.scala 246:23]
    task_stealSide.taskOut[23].TVALID <= stealSide.io.taskOut[23].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[23].TREADY <= task_stealSide.taskOut[23].TREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].BRESP <= task_stealSide.vss_axi_full[0].BRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].BID <= task_stealSide.vss_axi_full[0].BID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].BVALID <= task_stealSide.vss_axi_full[0].BVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].BREADY <= stealSide.io.vss_axi_full[0].BREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].WLAST <= stealSide.io.vss_axi_full[0].WLAST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].WSTRB <= stealSide.io.vss_axi_full[0].WSTRB @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].WDATA <= stealSide.io.vss_axi_full[0].WDATA @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].WID <= stealSide.io.vss_axi_full[0].WID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].WVALID <= stealSide.io.vss_axi_full[0].WVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].WREADY <= task_stealSide.vss_axi_full[0].WREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWREGION <= stealSide.io.vss_axi_full[0].AWREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWQOS <= stealSide.io.vss_axi_full[0].AWQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWPROT <= stealSide.io.vss_axi_full[0].AWPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWCACHE <= stealSide.io.vss_axi_full[0].AWCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWLOCK <= stealSide.io.vss_axi_full[0].AWLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWBURST <= stealSide.io.vss_axi_full[0].AWBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWSIZE <= stealSide.io.vss_axi_full[0].AWSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWLEN <= stealSide.io.vss_axi_full[0].AWLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWADDR <= stealSide.io.vss_axi_full[0].AWADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWID <= stealSide.io.vss_axi_full[0].AWID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].AWVALID <= stealSide.io.vss_axi_full[0].AWVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].AWREADY <= task_stealSide.vss_axi_full[0].AWREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RLAST <= task_stealSide.vss_axi_full[0].RLAST @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RRESP <= task_stealSide.vss_axi_full[0].RRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RDATA <= task_stealSide.vss_axi_full[0].RDATA @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RID <= task_stealSide.vss_axi_full[0].RID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RVALID <= task_stealSide.vss_axi_full[0].RVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].RREADY <= stealSide.io.vss_axi_full[0].RREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARREGION <= stealSide.io.vss_axi_full[0].ARREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARQOS <= stealSide.io.vss_axi_full[0].ARQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARPROT <= stealSide.io.vss_axi_full[0].ARPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARCACHE <= stealSide.io.vss_axi_full[0].ARCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARLOCK <= stealSide.io.vss_axi_full[0].ARLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARBURST <= stealSide.io.vss_axi_full[0].ARBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARSIZE <= stealSide.io.vss_axi_full[0].ARSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARLEN <= stealSide.io.vss_axi_full[0].ARLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARADDR <= stealSide.io.vss_axi_full[0].ARADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARID <= stealSide.io.vss_axi_full[0].ARID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[0].ARVALID <= stealSide.io.vss_axi_full[0].ARVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].ARREADY <= task_stealSide.vss_axi_full[0].ARREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].BRESP <= task_stealSide.vss_axi_full[1].BRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].BID <= task_stealSide.vss_axi_full[1].BID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].BVALID <= task_stealSide.vss_axi_full[1].BVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].BREADY <= stealSide.io.vss_axi_full[1].BREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].WLAST <= stealSide.io.vss_axi_full[1].WLAST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].WSTRB <= stealSide.io.vss_axi_full[1].WSTRB @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].WDATA <= stealSide.io.vss_axi_full[1].WDATA @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].WID <= stealSide.io.vss_axi_full[1].WID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].WVALID <= stealSide.io.vss_axi_full[1].WVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].WREADY <= task_stealSide.vss_axi_full[1].WREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWREGION <= stealSide.io.vss_axi_full[1].AWREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWQOS <= stealSide.io.vss_axi_full[1].AWQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWPROT <= stealSide.io.vss_axi_full[1].AWPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWCACHE <= stealSide.io.vss_axi_full[1].AWCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWLOCK <= stealSide.io.vss_axi_full[1].AWLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWBURST <= stealSide.io.vss_axi_full[1].AWBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWSIZE <= stealSide.io.vss_axi_full[1].AWSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWLEN <= stealSide.io.vss_axi_full[1].AWLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWADDR <= stealSide.io.vss_axi_full[1].AWADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWID <= stealSide.io.vss_axi_full[1].AWID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].AWVALID <= stealSide.io.vss_axi_full[1].AWVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].AWREADY <= task_stealSide.vss_axi_full[1].AWREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].RLAST <= task_stealSide.vss_axi_full[1].RLAST @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].RRESP <= task_stealSide.vss_axi_full[1].RRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].RDATA <= task_stealSide.vss_axi_full[1].RDATA @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].RID <= task_stealSide.vss_axi_full[1].RID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].RVALID <= task_stealSide.vss_axi_full[1].RVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].RREADY <= stealSide.io.vss_axi_full[1].RREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARREGION <= stealSide.io.vss_axi_full[1].ARREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARQOS <= stealSide.io.vss_axi_full[1].ARQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARPROT <= stealSide.io.vss_axi_full[1].ARPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARCACHE <= stealSide.io.vss_axi_full[1].ARCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARLOCK <= stealSide.io.vss_axi_full[1].ARLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARBURST <= stealSide.io.vss_axi_full[1].ARBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARSIZE <= stealSide.io.vss_axi_full[1].ARSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARLEN <= stealSide.io.vss_axi_full[1].ARLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARADDR <= stealSide.io.vss_axi_full[1].ARADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARID <= stealSide.io.vss_axi_full[1].ARID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[1].ARVALID <= stealSide.io.vss_axi_full[1].ARVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[1].ARREADY <= task_stealSide.vss_axi_full[1].ARREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].BRESP <= task_stealSide.vss_axi_full[2].BRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].BID <= task_stealSide.vss_axi_full[2].BID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].BVALID <= task_stealSide.vss_axi_full[2].BVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].BREADY <= stealSide.io.vss_axi_full[2].BREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].WLAST <= stealSide.io.vss_axi_full[2].WLAST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].WSTRB <= stealSide.io.vss_axi_full[2].WSTRB @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].WDATA <= stealSide.io.vss_axi_full[2].WDATA @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].WID <= stealSide.io.vss_axi_full[2].WID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].WVALID <= stealSide.io.vss_axi_full[2].WVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].WREADY <= task_stealSide.vss_axi_full[2].WREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWREGION <= stealSide.io.vss_axi_full[2].AWREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWQOS <= stealSide.io.vss_axi_full[2].AWQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWPROT <= stealSide.io.vss_axi_full[2].AWPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWCACHE <= stealSide.io.vss_axi_full[2].AWCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWLOCK <= stealSide.io.vss_axi_full[2].AWLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWBURST <= stealSide.io.vss_axi_full[2].AWBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWSIZE <= stealSide.io.vss_axi_full[2].AWSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWLEN <= stealSide.io.vss_axi_full[2].AWLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWADDR <= stealSide.io.vss_axi_full[2].AWADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWID <= stealSide.io.vss_axi_full[2].AWID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].AWVALID <= stealSide.io.vss_axi_full[2].AWVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].AWREADY <= task_stealSide.vss_axi_full[2].AWREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].RLAST <= task_stealSide.vss_axi_full[2].RLAST @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].RRESP <= task_stealSide.vss_axi_full[2].RRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].RDATA <= task_stealSide.vss_axi_full[2].RDATA @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].RID <= task_stealSide.vss_axi_full[2].RID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].RVALID <= task_stealSide.vss_axi_full[2].RVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].RREADY <= stealSide.io.vss_axi_full[2].RREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARREGION <= stealSide.io.vss_axi_full[2].ARREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARQOS <= stealSide.io.vss_axi_full[2].ARQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARPROT <= stealSide.io.vss_axi_full[2].ARPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARCACHE <= stealSide.io.vss_axi_full[2].ARCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARLOCK <= stealSide.io.vss_axi_full[2].ARLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARBURST <= stealSide.io.vss_axi_full[2].ARBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARSIZE <= stealSide.io.vss_axi_full[2].ARSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARLEN <= stealSide.io.vss_axi_full[2].ARLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARADDR <= stealSide.io.vss_axi_full[2].ARADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARID <= stealSide.io.vss_axi_full[2].ARID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[2].ARVALID <= stealSide.io.vss_axi_full[2].ARVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[2].ARREADY <= task_stealSide.vss_axi_full[2].ARREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].BRESP <= task_stealSide.vss_axi_full[3].BRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].BID <= task_stealSide.vss_axi_full[3].BID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].BVALID <= task_stealSide.vss_axi_full[3].BVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].BREADY <= stealSide.io.vss_axi_full[3].BREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].WLAST <= stealSide.io.vss_axi_full[3].WLAST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].WSTRB <= stealSide.io.vss_axi_full[3].WSTRB @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].WDATA <= stealSide.io.vss_axi_full[3].WDATA @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].WID <= stealSide.io.vss_axi_full[3].WID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].WVALID <= stealSide.io.vss_axi_full[3].WVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].WREADY <= task_stealSide.vss_axi_full[3].WREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWREGION <= stealSide.io.vss_axi_full[3].AWREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWQOS <= stealSide.io.vss_axi_full[3].AWQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWPROT <= stealSide.io.vss_axi_full[3].AWPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWCACHE <= stealSide.io.vss_axi_full[3].AWCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWLOCK <= stealSide.io.vss_axi_full[3].AWLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWBURST <= stealSide.io.vss_axi_full[3].AWBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWSIZE <= stealSide.io.vss_axi_full[3].AWSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWLEN <= stealSide.io.vss_axi_full[3].AWLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWADDR <= stealSide.io.vss_axi_full[3].AWADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWID <= stealSide.io.vss_axi_full[3].AWID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].AWVALID <= stealSide.io.vss_axi_full[3].AWVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].AWREADY <= task_stealSide.vss_axi_full[3].AWREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].RLAST <= task_stealSide.vss_axi_full[3].RLAST @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].RRESP <= task_stealSide.vss_axi_full[3].RRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].RDATA <= task_stealSide.vss_axi_full[3].RDATA @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].RID <= task_stealSide.vss_axi_full[3].RID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].RVALID <= task_stealSide.vss_axi_full[3].RVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].RREADY <= stealSide.io.vss_axi_full[3].RREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARREGION <= stealSide.io.vss_axi_full[3].ARREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARQOS <= stealSide.io.vss_axi_full[3].ARQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARPROT <= stealSide.io.vss_axi_full[3].ARPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARCACHE <= stealSide.io.vss_axi_full[3].ARCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARLOCK <= stealSide.io.vss_axi_full[3].ARLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARBURST <= stealSide.io.vss_axi_full[3].ARBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARSIZE <= stealSide.io.vss_axi_full[3].ARSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARLEN <= stealSide.io.vss_axi_full[3].ARLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARADDR <= stealSide.io.vss_axi_full[3].ARADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARID <= stealSide.io.vss_axi_full[3].ARID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[3].ARVALID <= stealSide.io.vss_axi_full[3].ARVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[3].ARREADY <= task_stealSide.vss_axi_full[3].ARREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].BRESP <= task_stealSide.vss_axi_full[4].BRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].BID <= task_stealSide.vss_axi_full[4].BID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].BVALID <= task_stealSide.vss_axi_full[4].BVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].BREADY <= stealSide.io.vss_axi_full[4].BREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].WLAST <= stealSide.io.vss_axi_full[4].WLAST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].WSTRB <= stealSide.io.vss_axi_full[4].WSTRB @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].WDATA <= stealSide.io.vss_axi_full[4].WDATA @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].WID <= stealSide.io.vss_axi_full[4].WID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].WVALID <= stealSide.io.vss_axi_full[4].WVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].WREADY <= task_stealSide.vss_axi_full[4].WREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWREGION <= stealSide.io.vss_axi_full[4].AWREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWQOS <= stealSide.io.vss_axi_full[4].AWQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWPROT <= stealSide.io.vss_axi_full[4].AWPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWCACHE <= stealSide.io.vss_axi_full[4].AWCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWLOCK <= stealSide.io.vss_axi_full[4].AWLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWBURST <= stealSide.io.vss_axi_full[4].AWBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWSIZE <= stealSide.io.vss_axi_full[4].AWSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWLEN <= stealSide.io.vss_axi_full[4].AWLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWADDR <= stealSide.io.vss_axi_full[4].AWADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWID <= stealSide.io.vss_axi_full[4].AWID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].AWVALID <= stealSide.io.vss_axi_full[4].AWVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].AWREADY <= task_stealSide.vss_axi_full[4].AWREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].RLAST <= task_stealSide.vss_axi_full[4].RLAST @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].RRESP <= task_stealSide.vss_axi_full[4].RRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].RDATA <= task_stealSide.vss_axi_full[4].RDATA @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].RID <= task_stealSide.vss_axi_full[4].RID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].RVALID <= task_stealSide.vss_axi_full[4].RVALID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].RREADY <= stealSide.io.vss_axi_full[4].RREADY @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARREGION <= stealSide.io.vss_axi_full[4].ARREGION @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARQOS <= stealSide.io.vss_axi_full[4].ARQOS @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARPROT <= stealSide.io.vss_axi_full[4].ARPROT @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARCACHE <= stealSide.io.vss_axi_full[4].ARCACHE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARLOCK <= stealSide.io.vss_axi_full[4].ARLOCK @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARBURST <= stealSide.io.vss_axi_full[4].ARBURST @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARSIZE <= stealSide.io.vss_axi_full[4].ARSIZE @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARLEN <= stealSide.io.vss_axi_full[4].ARLEN @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARADDR <= stealSide.io.vss_axi_full[4].ARADDR @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARID <= stealSide.io.vss_axi_full[4].ARID @[fullSysGen.scala 246:23]
    task_stealSide.vss_axi_full[4].ARVALID <= stealSide.io.vss_axi_full[4].ARVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[4].ARREADY <= task_stealSide.vss_axi_full[4].ARREADY @[fullSysGen.scala 246:23]
    stealSide.io.axi_mgmt_vss[0] <= task_stealSide.axi_mgmt_vss[0] @[fullSysGen.scala 246:23]
    stealSide.io.axi_mgmt_vss[1] <= task_stealSide.axi_mgmt_vss[1] @[fullSysGen.scala 246:23]
    stealSide.io.axi_mgmt_vss[2] <= task_stealSide.axi_mgmt_vss[2] @[fullSysGen.scala 246:23]
    stealSide.io.axi_mgmt_vss[3] <= task_stealSide.axi_mgmt_vss[3] @[fullSysGen.scala 246:23]
    stealSide.io.axi_mgmt_vss[4] <= task_stealSide.axi_mgmt_vss[4] @[fullSysGen.scala 246:23]


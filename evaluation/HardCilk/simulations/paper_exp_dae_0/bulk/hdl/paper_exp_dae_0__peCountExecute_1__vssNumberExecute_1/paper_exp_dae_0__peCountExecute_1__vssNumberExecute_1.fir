circuit paper_exp_dae_0__peCountExecute_1__vssNumberExecute_1 :
  module stealNetworkDataUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<64>, taskOut : UInt<64>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}, occupied : UInt<1>}

    reg taskReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkDataUnit_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip taskIn : UInt<64>, taskOut : UInt<64>, flip validIn : UInt<1>, validOut : UInt<1>, connSS : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}, occupied : UInt<1>}

    reg taskReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[stealNetworkDataUnit.scala 32:33]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkDataUnit.scala 33:33]
    io.connSS.qOutTask.ready <= UInt<1>("h0") @[stealNetworkDataUnit.scala 41:30]
    io.connSS.availableTask.bits <= UInt<1>("h0") @[stealNetworkDataUnit.scala 42:35]
    io.connSS.availableTask.valid <= UInt<1>("h0") @[stealNetworkDataUnit.scala 43:35]
    node _T = and(io.connSS.availableTask.ready, io.validIn) @[stealNetworkDataUnit.scala 45:40]
    when _T : @[stealNetworkDataUnit.scala 45:54]
      validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 46:37]
      taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 47:37]
      io.connSS.availableTask.valid <= UInt<1>("h1") @[stealNetworkDataUnit.scala 48:37]
      io.connSS.availableTask.bits <= io.taskIn @[stealNetworkDataUnit.scala 49:37]
    else :
      node _T_1 = not(io.validIn) @[stealNetworkDataUnit.scala 50:44]
      node _T_2 = and(io.connSS.qOutTask.valid, _T_1) @[stealNetworkDataUnit.scala 50:41]
      when _T_2 : @[stealNetworkDataUnit.scala 50:56]
        validReg <= UInt<1>("h1") @[stealNetworkDataUnit.scala 51:32]
        taskReg <= io.connSS.qOutTask.bits @[stealNetworkDataUnit.scala 52:32]
        io.connSS.qOutTask.ready <= UInt<1>("h1") @[stealNetworkDataUnit.scala 53:32]
      else :
        when io.validIn : @[stealNetworkDataUnit.scala 54:27]
          validReg <= io.validIn @[stealNetworkDataUnit.scala 55:19]
          taskReg <= io.taskIn @[stealNetworkDataUnit.scala 56:19]
        else :
          validReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 58:22]
          taskReg <= UInt<1>("h0") @[stealNetworkDataUnit.scala 59:22]
    io.taskOut <= taskReg @[stealNetworkDataUnit.scala 63:25]
    io.validOut <= validReg @[stealNetworkDataUnit.scala 64:25]
    io.occupied <= validReg @[stealNetworkDataUnit.scala 65:25]

  module stealNetworkCtrlUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetworkCtrlUnit_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip reqTaskIn : UInt<1>, reqTaskOut : UInt<1>, connSS : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}}

    reg stealReqReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealNetworkCtrlUnit.scala 20:28]
    when io.connSS.stealReq.valid : @[stealNetworkCtrlUnit.scala 22:33]
      io.reqTaskOut <= UInt<1>("h1") @[stealNetworkCtrlUnit.scala 23:19]
    else :
      when io.connSS.serveStealReq.valid : @[stealNetworkCtrlUnit.scala 24:44]
        io.reqTaskOut <= UInt<1>("h0") @[stealNetworkCtrlUnit.scala 25:19]
      else :
        io.reqTaskOut <= stealReqReg @[stealNetworkCtrlUnit.scala 27:19]
    node _io_connSS_stealReq_ready_T = not(stealReqReg) @[stealNetworkCtrlUnit.scala 30:36]
    io.connSS.stealReq.ready <= _io_connSS_stealReq_ready_T @[stealNetworkCtrlUnit.scala 30:33]
    io.connSS.serveStealReq.ready <= stealReqReg @[stealNetworkCtrlUnit.scala 31:33]
    stealReqReg <= io.reqTaskIn @[stealNetworkCtrlUnit.scala 32:33]

  module stealNetwork :
    input clock : Clock
    input reset : Reset
    output io : { connSS : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}[2], ntwDataUnitOccupancyVSS : UInt<1>[1]}

    inst dataUnits_0 of stealNetworkDataUnit @[stealNetwork.scala 23:42]
    dataUnits_0.clock <= clock
    dataUnits_0.reset <= reset
    inst dataUnits_1 of stealNetworkDataUnit_1 @[stealNetwork.scala 23:42]
    dataUnits_1.clock <= clock
    dataUnits_1.reset <= reset
    inst ctrlunits_0 of stealNetworkCtrlUnit @[stealNetwork.scala 25:42]
    ctrlunits_0.clock <= clock
    ctrlunits_0.reset <= reset
    inst ctrlunits_1 of stealNetworkCtrlUnit_1 @[stealNetwork.scala 25:42]
    ctrlunits_1.clock <= clock
    ctrlunits_1.reset <= reset
    dataUnits_1.io.taskIn <= dataUnits_0.io.taskOut @[stealNetwork.scala 29:32]
    dataUnits_1.io.validIn <= dataUnits_0.io.validOut @[stealNetwork.scala 30:32]
    dataUnits_1.io.connSS.qOutTask <= io.connSS[1].data.qOutTask @[stealNetwork.scala 31:32]
    io.connSS[1].data.availableTask.bits <= dataUnits_1.io.connSS.availableTask.bits @[stealNetwork.scala 31:32]
    io.connSS[1].data.availableTask.valid <= dataUnits_1.io.connSS.availableTask.valid @[stealNetwork.scala 31:32]
    dataUnits_1.io.connSS.availableTask.ready <= io.connSS[1].data.availableTask.ready @[stealNetwork.scala 31:32]
    dataUnits_0.io.taskIn <= dataUnits_1.io.taskOut @[stealNetwork.scala 34:27]
    dataUnits_0.io.validIn <= dataUnits_1.io.validOut @[stealNetwork.scala 35:27]
    dataUnits_0.io.connSS.qOutTask <= io.connSS[0].data.qOutTask @[stealNetwork.scala 36:27]
    io.connSS[0].data.availableTask.bits <= dataUnits_0.io.connSS.availableTask.bits @[stealNetwork.scala 36:27]
    io.connSS[0].data.availableTask.valid <= dataUnits_0.io.connSS.availableTask.valid @[stealNetwork.scala 36:27]
    dataUnits_0.io.connSS.availableTask.ready <= io.connSS[0].data.availableTask.ready @[stealNetwork.scala 36:27]
    ctrlunits_0.io.reqTaskIn <= ctrlunits_1.io.reqTaskOut @[stealNetwork.scala 40:32]
    ctrlunits_0.io.connSS.stealReq.valid <= io.connSS[0].ctrl.stealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[0].ctrl.stealReq.ready <= ctrlunits_0.io.connSS.stealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_0.io.connSS.serveStealReq.valid <= io.connSS[0].ctrl.serveStealReq.valid @[stealNetwork.scala 41:32]
    io.connSS[0].ctrl.serveStealReq.ready <= ctrlunits_0.io.connSS.serveStealReq.ready @[stealNetwork.scala 41:32]
    ctrlunits_1.io.reqTaskIn <= ctrlunits_0.io.reqTaskOut @[stealNetwork.scala 44:36]
    ctrlunits_1.io.connSS.stealReq.valid <= io.connSS[1].ctrl.stealReq.valid @[stealNetwork.scala 45:36]
    io.connSS[1].ctrl.stealReq.ready <= ctrlunits_1.io.connSS.stealReq.ready @[stealNetwork.scala 45:36]
    ctrlunits_1.io.connSS.serveStealReq.valid <= io.connSS[1].ctrl.serveStealReq.valid @[stealNetwork.scala 45:36]
    io.connSS[1].ctrl.serveStealReq.ready <= ctrlunits_1.io.connSS.serveStealReq.ready @[stealNetwork.scala 45:36]
    io.ntwDataUnitOccupancyVSS[0] <= dataUnits_0.io.occupied @[stealNetwork.scala 49:54]

  module stealServer :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}, flip connQ : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}

    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[stealServer.scala 28:39]
    reg stolenTaskReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[stealServer.scala 29:39]
    reg giveTaskReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[stealServer.scala 30:39]
    reg taskRequestCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[stealServer.scala 33:39]
    reg tasksGivenAwayCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 35:38]
    reg requestKilledCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h2")) @[stealServer.scala 37:37]
    reg requestFullCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h2")) @[stealServer.scala 38:35]
    io.connQ.pop.ready <= UInt<1>("h0") @[stealServer.scala 41:47]
    io.connQ.push.bits <= UInt<1>("h0") @[stealServer.scala 42:47]
    io.connQ.push.valid <= UInt<1>("h0") @[stealServer.scala 43:47]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[stealServer.scala 45:47]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[stealServer.scala 46:47]
    io.connNetwork.data.qOutTask.bits <= UInt<1>("h0") @[stealServer.scala 47:47]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[stealServer.scala 49:47]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[stealServer.scala 50:47]
    reg requestTaskCount : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[stealServer.scala 52:35]
    node _T = eq(stateReg, UInt<1>("h0")) @[stealServer.scala 162:23]
    when _T : @[stealServer.scala 162:38]
      node _T_1 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 163:38]
      when _T_1 : @[stealServer.scala 163:58]
        requestFullCount <= UInt<32>("h2") @[stealServer.scala 164:51]
        stateReg <= UInt<1>("h1") @[stealServer.scala 165:51]
      else :
        node _T_2 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 166:44]
        when _T_2 : @[stealServer.scala 166:64]
          stateReg <= UInt<3>("h4") @[stealServer.scala 167:51]
        else :
          node _T_3 = gt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 168:44]
          when _T_3 : @[stealServer.scala 168:64]
            stateReg <= UInt<3>("h6") @[stealServer.scala 169:51]
          else :
            stateReg <= UInt<1>("h0") @[stealServer.scala 171:51]
    else :
      node _T_4 = eq(stateReg, UInt<1>("h1")) @[stealServer.scala 173:29]
      when _T_4 : @[stealServer.scala 173:51]
        io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h1") @[stealServer.scala 174:54]
        node _T_5 = eq(taskRequestCount, UInt<1>("h1")) @[stealServer.scala 175:73]
        node _T_6 = and(io.connNetwork.ctrl.stealReq.ready, _T_5) @[stealServer.scala 175:53]
        when _T_6 : @[stealServer.scala 175:81]
          stateReg <= UInt<2>("h2") @[stealServer.scala 176:54]
          requestKilledCount <= UInt<32>("h2") @[stealServer.scala 177:54]
        else :
          node _T_7 = eq(taskRequestCount, UInt<2>("h2")) @[stealServer.scala 178:79]
          node _T_8 = and(io.connNetwork.ctrl.stealReq.ready, _T_7) @[stealServer.scala 178:59]
          when _T_8 : @[stealServer.scala 178:87]
            taskRequestCount <= UInt<1>("h1") @[stealServer.scala 179:54]
            requestFullCount <= UInt<32>("h2") @[stealServer.scala 180:54]
            stateReg <= UInt<1>("h1") @[stealServer.scala 181:54]
          else :
            node _T_9 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 182:44]
            when _T_9 : @[stealServer.scala 182:65]
              stateReg <= UInt<3>("h6") @[stealServer.scala 183:54]
            else :
              node _T_10 = gt(tasksGivenAwayCount, UInt<1>("h0")) @[stealServer.scala 184:44]
              when _T_10 : @[stealServer.scala 184:50]
                stateReg <= UInt<2>("h2") @[stealServer.scala 185:54]
                requestKilledCount <= UInt<32>("h2") @[stealServer.scala 186:54]
                node _tasksGivenAwayCount_T = sub(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 187:60]
                node _tasksGivenAwayCount_T_1 = tail(_tasksGivenAwayCount_T, 1) @[stealServer.scala 187:60]
                tasksGivenAwayCount <= _tasksGivenAwayCount_T_1 @[stealServer.scala 187:37]
                io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 188:57]
              else :
                node _T_11 = eq(requestFullCount, UInt<1>("h0")) @[stealServer.scala 189:41]
                when _T_11 : @[stealServer.scala 189:49]
                  stateReg <= UInt<2>("h2") @[stealServer.scala 190:54]
                else :
                  stateReg <= UInt<1>("h1") @[stealServer.scala 192:54]
        when io.connNetwork.ctrl.serveStealReq.ready : @[stealServer.scala 195:58]
          node _requestFullCount_T = sub(requestFullCount, UInt<1>("h1")) @[stealServer.scala 196:74]
          node _requestFullCount_T_1 = tail(_requestFullCount_T, 1) @[stealServer.scala 196:74]
          requestFullCount <= _requestFullCount_T_1 @[stealServer.scala 196:54]
        else :
          requestFullCount <= UInt<32>("h2") @[stealServer.scala 198:54]
      else :
        node _T_12 = eq(stateReg, UInt<2>("h2")) @[stealServer.scala 200:29]
        when _T_12 : @[stealServer.scala 200:50]
          when io.connNetwork.data.availableTask.valid : @[stealServer.scala 202:58]
            stateReg <= UInt<2>("h3") @[stealServer.scala 203:54]
            stolenTaskReg <= io.connNetwork.data.availableTask.bits @[stealServer.scala 204:54]
          else :
            node _T_13 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 205:44]
            when _T_13 : @[stealServer.scala 205:65]
              stateReg <= UInt<1>("h0") @[stealServer.scala 206:51]
            else :
              node _T_14 = eq(requestKilledCount, UInt<1>("h0")) @[stealServer.scala 207:43]
              when _T_14 : @[stealServer.scala 207:51]
                requestFullCount <= UInt<32>("h2") @[stealServer.scala 208:54]
                stateReg <= UInt<1>("h1") @[stealServer.scala 209:54]
              else :
                stateReg <= UInt<2>("h2") @[stealServer.scala 211:54]
          node _T_15 = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[stealServer.scala 214:18]
          when _T_15 : @[stealServer.scala 214:59]
            node _requestKilledCount_T = sub(requestKilledCount, UInt<1>("h1")) @[stealServer.scala 215:76]
            node _requestKilledCount_T_1 = tail(_requestKilledCount_T, 1) @[stealServer.scala 215:76]
            requestKilledCount <= _requestKilledCount_T_1 @[stealServer.scala 215:54]
          else :
            requestKilledCount <= UInt<32>("h2") @[stealServer.scala 217:54]
          io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[stealServer.scala 220:55]
        else :
          node _T_16 = eq(stateReg, UInt<2>("h3")) @[stealServer.scala 222:29]
          when _T_16 : @[stealServer.scala 222:48]
            when io.connQ.push.ready : @[stealServer.scala 223:38]
              stateReg <= UInt<1>("h0") @[stealServer.scala 224:54]
            else :
              node _T_17 = geq(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 225:44]
              when _T_17 : @[stealServer.scala 225:65]
                stateReg <= UInt<3>("h5") @[stealServer.scala 226:54]
                giveTaskReg <= stolenTaskReg @[stealServer.scala 227:54]
              else :
                stateReg <= UInt<2>("h3") @[stealServer.scala 229:54]
            io.connQ.push.bits <= stolenTaskReg @[stealServer.scala 232:55]
            io.connQ.push.valid <= UInt<1>("h1") @[stealServer.scala 233:55]
          else :
            node _T_18 = eq(stateReg, UInt<3>("h4")) @[stealServer.scala 235:29]
            when _T_18 : @[stealServer.scala 235:47]
              when io.connQ.pop.valid : @[stealServer.scala 236:37]
                stateReg <= UInt<3>("h5") @[stealServer.scala 237:54]
                giveTaskReg <= io.connQ.pop.bits @[stealServer.scala 238:54]
              else :
                node _T_19 = eq(io.connQ.currLength, UInt<1>("h0")) @[stealServer.scala 239:44]
                when _T_19 : @[stealServer.scala 239:52]
                  requestFullCount <= UInt<32>("h2") @[stealServer.scala 240:54]
                  stateReg <= UInt<1>("h1") @[stealServer.scala 241:54]
                else :
                  stateReg <= UInt<3>("h4") @[stealServer.scala 243:54]
              io.connQ.pop.ready <= UInt<1>("h1") @[stealServer.scala 246:55]
            else :
              node _T_20 = eq(stateReg, UInt<3>("h5")) @[stealServer.scala 248:29]
              when _T_20 : @[stealServer.scala 248:52]
                when io.connNetwork.data.qOutTask.ready : @[stealServer.scala 249:53]
                  node _tasksGivenAwayCount_T_2 = add(tasksGivenAwayCount, UInt<1>("h1")) @[stealServer.scala 250:77]
                  node _tasksGivenAwayCount_T_3 = tail(_tasksGivenAwayCount_T_2, 1) @[stealServer.scala 250:77]
                  tasksGivenAwayCount <= _tasksGivenAwayCount_T_3 @[stealServer.scala 250:54]
                  stateReg <= UInt<1>("h0") @[stealServer.scala 251:54]
                else :
                  stateReg <= UInt<3>("h5") @[stealServer.scala 253:54]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[stealServer.scala 256:55]
                io.connNetwork.data.qOutTask.bits <= giveTaskReg @[stealServer.scala 257:55]
              else :
                node _T_21 = eq(stateReg, UInt<3>("h6")) @[stealServer.scala 259:29]
                when _T_21 : @[stealServer.scala 259:58]
                  node _T_22 = gt(io.connQ.currLength, UInt<5>("h16")) @[stealServer.scala 260:38]
                  node _T_23 = geq(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 261:77]
                  node _T_24 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_23) @[stealServer.scala 261:54]
                  node _T_25 = or(_T_22, _T_24) @[stealServer.scala 260:57]
                  when _T_25 : @[stealServer.scala 261:99]
                    stateReg <= UInt<3>("h4") @[stealServer.scala 262:51]
                  else :
                    node _T_26 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 263:44]
                    node _T_27 = and(_T_26, io.connNetwork.ctrl.serveStealReq.ready) @[stealServer.scala 263:64]
                    when _T_27 : @[stealServer.scala 263:107]
                      requestFullCount <= UInt<32>("h2") @[stealServer.scala 264:51]
                      stateReg <= UInt<1>("h1") @[stealServer.scala 265:51]
                      taskRequestCount <= UInt<2>("h2") @[stealServer.scala 266:51]
                    else :
                      node _T_28 = lt(io.connQ.currLength, UInt<3>("h6")) @[stealServer.scala 267:44]
                      when _T_28 : @[stealServer.scala 267:64]
                        requestFullCount <= UInt<32>("h2") @[stealServer.scala 268:51]
                        stateReg <= UInt<1>("h1") @[stealServer.scala 269:51]
                        taskRequestCount <= UInt<1>("h1") @[stealServer.scala 270:51]
                      else :
                        stateReg <= UInt<3>("h6") @[stealServer.scala 272:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[stealServer.scala 275:55]

  extmodule DualPortBRAM :
    input clk : Clock
    input rst : UInt<1>
    output a : { flip addr : UInt<7>, flip din : UInt<64>, flip wr : UInt<1>, dout : UInt<64>}
    output b : { flip addr : UInt<7>, flip din : UInt<64>, flip wr : UInt<1>, dout : UInt<64>}
    defname = DualPortBRAM
    parameter DATA = 64
    parameter ADDR = 7

  module hw_deque :
    input clock : Clock
    input reset : Reset
    output io : { connVec : { currLength : UInt<7>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}[2]}

    reg sideReg_0 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[deque.scala 23:35]
    reg sideReg_1 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h1")) @[deque.scala 23:81]
    reg qMaxLenReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h22")) @[deque.scala 24:31]
    reg hardwareReadLatency : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 26:39]
    reg hardwareWriteLatency : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 27:39]
    reg readLatency_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg readLatency_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 29:43]
    reg writeLatency_0 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    reg writeLatency_1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h1")) @[deque.scala 30:43]
    inst bramMem of DualPortBRAM @[deque.scala 34:30]
    bramMem.b is invalid
    bramMem.a is invalid
    bramMem.rst is invalid
    bramMem.clk is invalid
    bramMem.clk <= clock @[deque.scala 36:22]
    bramMem.rst <= reset @[deque.scala 37:22]
    wire currLen : UInt<7> @[deque.scala 40:23]
    reg stateRegs_0 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    reg stateRegs_1 : UInt<3>, clock with :
      reset => (reset, UInt<1>("h0")) @[deque.scala 54:40]
    bramMem.a.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.a.din <= io.connVec[0].push.bits @[deque.scala 60:34]
    bramMem.a.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[0].currLength <= currLen @[deque.scala 64:34]
    io.connVec[0].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[0].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[0].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    bramMem.b.addr <= UInt<28>("hfffffff") @[deque.scala 59:34]
    bramMem.b.din <= io.connVec[1].push.bits @[deque.scala 60:34]
    bramMem.b.wr <= UInt<1>("h0") @[deque.scala 61:34]
    io.connVec[1].currLength <= currLen @[deque.scala 64:34]
    io.connVec[1].push.ready <= UInt<1>("h0") @[deque.scala 65:34]
    io.connVec[1].pop.valid <= UInt<1>("h0") @[deque.scala 66:34]
    io.connVec[1].pop.bits <= UInt<1>("h0") @[deque.scala 67:34]
    node _T = eq(stateRegs_0, UInt<1>("h0")) @[deque.scala 71:27]
    when _T : @[deque.scala 71:42]
      node _T_1 = gt(currLen, UInt<1>("h1")) @[deque.scala 74:58]
      node _T_2 = and(io.connVec[0].pop.ready, _T_1) @[deque.scala 74:47]
      node _T_3 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 74:109]
      node _T_4 = and(io.connVec[0].pop.ready, _T_3) @[deque.scala 74:93]
      node _T_5 = gt(currLen, UInt<1>("h0")) @[deque.scala 74:135]
      node _T_6 = and(_T_4, _T_5) @[deque.scala 74:124]
      node _T_7 = or(_T_2, _T_6) @[deque.scala 74:65]
      when _T_7 : @[deque.scala 74:142]
        stateRegs_0 <= UInt<2>("h2") @[deque.scala 75:34]
      else :
        node _T_8 = lt(currLen, qMaxLenReg) @[deque.scala 76:64]
        node _T_9 = and(io.connVec[0].push.valid, _T_8) @[deque.scala 76:53]
        when _T_9 : @[deque.scala 76:77]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 77:34]
        else :
          stateRegs_0 <= UInt<1>("h0") @[deque.scala 79:34]
    else :
      node _T_10 = eq(stateRegs_0, UInt<1>("h1")) @[deque.scala 93:33]
      when _T_10 : @[deque.scala 93:52]
        node _T_11 = eq(writeLatency_0, UInt<1>("h0")) @[deque.scala 95:34]
        when _T_11 : @[deque.scala 95:42]
          writeLatency_0 <= hardwareWriteLatency @[deque.scala 96:33]
          stateRegs_0 <= UInt<2>("h3") @[deque.scala 97:33]
        else :
          node _writeLatency_0_T = sub(writeLatency_0, UInt<1>("h1")) @[deque.scala 99:52]
          node _writeLatency_0_T_1 = tail(_writeLatency_0_T, 1) @[deque.scala 99:52]
          writeLatency_0 <= _writeLatency_0_T_1 @[deque.scala 99:33]
          stateRegs_0 <= UInt<1>("h1") @[deque.scala 100:33]
        bramMem.a.addr <= sideReg_0 @[deque.scala 103:38]
        bramMem.a.wr <= UInt<1>("h1") @[deque.scala 104:38]
      else :
        node _T_12 = eq(stateRegs_0, UInt<2>("h2")) @[deque.scala 106:33]
        when _T_12 : @[deque.scala 106:51]
          node _T_13 = eq(readLatency_0, UInt<1>("h0")) @[deque.scala 108:33]
          when _T_13 : @[deque.scala 108:41]
            readLatency_0 <= hardwareReadLatency @[deque.scala 109:33]
            stateRegs_0 <= UInt<3>("h4") @[deque.scala 110:33]
          else :
            node _readLatency_0_T = sub(readLatency_0, UInt<1>("h1")) @[deque.scala 112:51]
            node _readLatency_0_T_1 = tail(_readLatency_0_T, 1) @[deque.scala 112:51]
            readLatency_0 <= _readLatency_0_T_1 @[deque.scala 112:33]
            stateRegs_0 <= UInt<2>("h2") @[deque.scala 113:33]
          node _T_14 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 118:48]
          node _T_15 = tail(_T_14, 1) @[deque.scala 118:48]
          node _T_16 = eq(sideReg_0, _T_15) @[deque.scala 118:33]
          when _T_16 : @[deque.scala 118:54]
            bramMem.a.addr <= UInt<1>("h0") @[deque.scala 119:39]
          else :
            node _bramMem_io_a_addr_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 121:54]
            node _bramMem_io_a_addr_T_1 = tail(_bramMem_io_a_addr_T, 1) @[deque.scala 121:54]
            bramMem.a.addr <= _bramMem_io_a_addr_T_1 @[deque.scala 121:39]
        else :
          node _T_17 = eq(stateRegs_0, UInt<3>("h4")) @[deque.scala 130:33]
          when _T_17 : @[deque.scala 130:47]
            stateRegs_0 <= UInt<1>("h0") @[deque.scala 132:38]
            node _T_18 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 136:48]
            node _T_19 = tail(_T_18, 1) @[deque.scala 136:48]
            node _T_20 = eq(sideReg_0, _T_19) @[deque.scala 136:33]
            when _T_20 : @[deque.scala 136:54]
              sideReg_0 <= UInt<1>("h0") @[deque.scala 137:39]
              bramMem.a.addr <= UInt<1>("h0") @[deque.scala 138:39]
            else :
              node _sideReg_0_T = add(sideReg_0, UInt<1>("h1")) @[deque.scala 140:53]
              node _sideReg_0_T_1 = tail(_sideReg_0_T, 1) @[deque.scala 140:53]
              sideReg_0 <= _sideReg_0_T_1 @[deque.scala 140:39]
              node _bramMem_io_a_addr_T_2 = add(sideReg_0, UInt<1>("h1")) @[deque.scala 141:54]
              node _bramMem_io_a_addr_T_3 = tail(_bramMem_io_a_addr_T_2, 1) @[deque.scala 141:54]
              bramMem.a.addr <= _bramMem_io_a_addr_T_3 @[deque.scala 141:39]
            io.connVec[0].pop.valid <= UInt<1>("h1") @[deque.scala 152:38]
            io.connVec[0].pop.bits <= bramMem.a.dout @[deque.scala 153:38]
          else :
            node _T_21 = eq(stateRegs_0, UInt<2>("h3")) @[deque.scala 154:33]
            when _T_21 : @[deque.scala 154:48]
              stateRegs_0 <= UInt<1>("h0") @[deque.scala 156:38]
              node _T_22 = eq(sideReg_0, UInt<1>("h0")) @[deque.scala 160:33]
              when _T_22 : @[deque.scala 160:41]
                node _sideReg_0_T_2 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 161:46]
                node _sideReg_0_T_3 = tail(_sideReg_0_T_2, 1) @[deque.scala 161:46]
                sideReg_0 <= _sideReg_0_T_3 @[deque.scala 161:32]
              else :
                node _sideReg_0_T_4 = sub(sideReg_0, UInt<1>("h1")) @[deque.scala 163:46]
                node _sideReg_0_T_5 = tail(_sideReg_0_T_4, 1) @[deque.scala 163:46]
                sideReg_0 <= _sideReg_0_T_5 @[deque.scala 163:32]
              io.connVec[0].push.ready <= UInt<1>("h1") @[deque.scala 172:38]
    node _T_23 = eq(stateRegs_1, UInt<1>("h0")) @[deque.scala 71:27]
    when _T_23 : @[deque.scala 71:42]
      node _T_24 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 82:72]
      node _T_25 = tail(_T_24, 1) @[deque.scala 82:72]
      node _T_26 = lt(currLen, _T_25) @[deque.scala 82:58]
      node _T_27 = and(io.connVec[1].push.valid, _T_26) @[deque.scala 82:47]
      when _T_27 : @[deque.scala 82:79]
        stateRegs_1 <= UInt<1>("h1") @[deque.scala 83:34]
      else :
        node _T_28 = gt(currLen, UInt<1>("h1")) @[deque.scala 84:64]
        node _T_29 = and(io.connVec[1].pop.ready, _T_28) @[deque.scala 84:53]
        node _T_30 = not(io.connVec[0].pop.ready) @[deque.scala 84:102]
        node _T_31 = and(io.connVec[1].pop.ready, _T_30) @[deque.scala 84:99]
        node _T_32 = gt(currLen, UInt<1>("h0")) @[deque.scala 84:138]
        node _T_33 = and(_T_31, _T_32) @[deque.scala 84:127]
        node _T_34 = neq(stateRegs_0, UInt<3>("h4")) @[deque.scala 84:160]
        node _T_35 = and(_T_33, _T_34) @[deque.scala 84:144]
        node _T_36 = or(_T_29, _T_35) @[deque.scala 84:71]
        when _T_36 : @[deque.scala 84:175]
          stateRegs_1 <= UInt<2>("h2") @[deque.scala 88:34]
        else :
          stateRegs_1 <= UInt<1>("h0") @[deque.scala 90:34]
    else :
      node _T_37 = eq(stateRegs_1, UInt<1>("h1")) @[deque.scala 93:33]
      when _T_37 : @[deque.scala 93:52]
        node _T_38 = eq(writeLatency_1, UInt<1>("h0")) @[deque.scala 95:34]
        when _T_38 : @[deque.scala 95:42]
          writeLatency_1 <= hardwareWriteLatency @[deque.scala 96:33]
          stateRegs_1 <= UInt<2>("h3") @[deque.scala 97:33]
        else :
          node _writeLatency_1_T = sub(writeLatency_1, UInt<1>("h1")) @[deque.scala 99:52]
          node _writeLatency_1_T_1 = tail(_writeLatency_1_T, 1) @[deque.scala 99:52]
          writeLatency_1 <= _writeLatency_1_T_1 @[deque.scala 99:33]
          stateRegs_1 <= UInt<1>("h1") @[deque.scala 100:33]
        bramMem.b.addr <= sideReg_1 @[deque.scala 103:38]
        bramMem.b.wr <= UInt<1>("h1") @[deque.scala 104:38]
      else :
        node _T_39 = eq(stateRegs_1, UInt<2>("h2")) @[deque.scala 106:33]
        when _T_39 : @[deque.scala 106:51]
          node _T_40 = eq(readLatency_1, UInt<1>("h0")) @[deque.scala 108:33]
          when _T_40 : @[deque.scala 108:41]
            readLatency_1 <= hardwareReadLatency @[deque.scala 109:33]
            stateRegs_1 <= UInt<3>("h4") @[deque.scala 110:33]
          else :
            node _readLatency_1_T = sub(readLatency_1, UInt<1>("h1")) @[deque.scala 112:51]
            node _readLatency_1_T_1 = tail(_readLatency_1_T, 1) @[deque.scala 112:51]
            readLatency_1 <= _readLatency_1_T_1 @[deque.scala 112:33]
            stateRegs_1 <= UInt<2>("h2") @[deque.scala 113:33]
          node _T_41 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 124:33]
          when _T_41 : @[deque.scala 124:41]
            node _bramMem_io_b_addr_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 125:54]
            node _bramMem_io_b_addr_T_1 = tail(_bramMem_io_b_addr_T, 1) @[deque.scala 125:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_1 @[deque.scala 125:39]
          else :
            node _bramMem_io_b_addr_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 127:54]
            node _bramMem_io_b_addr_T_3 = tail(_bramMem_io_b_addr_T_2, 1) @[deque.scala 127:54]
            bramMem.b.addr <= _bramMem_io_b_addr_T_3 @[deque.scala 127:39]
        else :
          node _T_42 = eq(stateRegs_1, UInt<3>("h4")) @[deque.scala 130:33]
          when _T_42 : @[deque.scala 130:47]
            stateRegs_1 <= UInt<1>("h0") @[deque.scala 132:38]
            node _T_43 = eq(sideReg_1, UInt<1>("h0")) @[deque.scala 144:33]
            when _T_43 : @[deque.scala 144:41]
              node _sideReg_1_T = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 145:53]
              node _sideReg_1_T_1 = tail(_sideReg_1_T, 1) @[deque.scala 145:53]
              sideReg_1 <= _sideReg_1_T_1 @[deque.scala 145:39]
              node _bramMem_io_b_addr_T_4 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 146:54]
              node _bramMem_io_b_addr_T_5 = tail(_bramMem_io_b_addr_T_4, 1) @[deque.scala 146:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_5 @[deque.scala 146:39]
            else :
              node _sideReg_1_T_2 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 148:53]
              node _sideReg_1_T_3 = tail(_sideReg_1_T_2, 1) @[deque.scala 148:53]
              sideReg_1 <= _sideReg_1_T_3 @[deque.scala 148:39]
              node _bramMem_io_b_addr_T_6 = sub(sideReg_1, UInt<1>("h1")) @[deque.scala 149:54]
              node _bramMem_io_b_addr_T_7 = tail(_bramMem_io_b_addr_T_6, 1) @[deque.scala 149:54]
              bramMem.b.addr <= _bramMem_io_b_addr_T_7 @[deque.scala 149:39]
            io.connVec[1].pop.valid <= UInt<1>("h1") @[deque.scala 152:38]
            io.connVec[1].pop.bits <= bramMem.b.dout @[deque.scala 153:38]
          else :
            node _T_44 = eq(stateRegs_1, UInt<2>("h3")) @[deque.scala 154:33]
            when _T_44 : @[deque.scala 154:48]
              stateRegs_1 <= UInt<1>("h0") @[deque.scala 156:38]
              node _T_45 = sub(qMaxLenReg, UInt<1>("h1")) @[deque.scala 166:49]
              node _T_46 = tail(_T_45, 1) @[deque.scala 166:49]
              node _T_47 = eq(sideReg_1, _T_46) @[deque.scala 166:33]
              when _T_47 : @[deque.scala 166:56]
                sideReg_1 <= UInt<1>("h0") @[deque.scala 167:32]
              else :
                node _sideReg_1_T_4 = add(sideReg_1, UInt<1>("h1")) @[deque.scala 169:46]
                node _sideReg_1_T_5 = tail(_sideReg_1_T_4, 1) @[deque.scala 169:46]
                sideReg_1 <= _sideReg_1_T_5 @[deque.scala 169:32]
              io.connVec[1].push.ready <= UInt<1>("h1") @[deque.scala 172:38]
    node _T_48 = gt(sideReg_0, sideReg_1) @[deque.scala 176:21]
    when _T_48 : @[deque.scala 176:34]
      node _currLen_T = add(qMaxLenReg, sideReg_1) @[deque.scala 177:31]
      node _currLen_T_1 = tail(_currLen_T, 1) @[deque.scala 177:31]
      node _currLen_T_2 = sub(_currLen_T_1, sideReg_0) @[deque.scala 177:44]
      node _currLen_T_3 = tail(_currLen_T_2, 1) @[deque.scala 177:44]
      node _currLen_T_4 = sub(_currLen_T_3, UInt<1>("h1")) @[deque.scala 177:58]
      node _currLen_T_5 = tail(_currLen_T_4, 1) @[deque.scala 177:58]
      currLen <= _currLen_T_5 @[deque.scala 177:17]
    else :
      node _currLen_T_6 = sub(sideReg_1, sideReg_0) @[deque.scala 179:31]
      node _currLen_T_7 = tail(_currLen_T_6, 1) @[deque.scala 179:31]
      node _currLen_T_8 = sub(_currLen_T_7, UInt<1>("h1")) @[deque.scala 179:44]
      node _currLen_T_9 = tail(_currLen_T_8, 1) @[deque.scala 179:44]
      currLen <= _currLen_T_9 @[deque.scala 179:17]

  module stealNW_TQ :
    input clock : Clock
    input reset : Reset
    output io : { connPE : { currLength : UInt<6>, flip push : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, pop : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}[1], connVSS : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}[1], connVAS : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}[0], ntwDataUnitOccupancyVSS : UInt<1>[1]}

    inst stealNet of stealNetwork @[stealNW_TQ.scala 36:30]
    stealNet.clock <= clock
    stealNet.reset <= reset
    inst stealServers_0 of stealServer @[stealNW_TQ.scala 54:49]
    stealServers_0.clock <= clock
    stealServers_0.reset <= reset
    inst taskQueues_0 of hw_deque @[stealNW_TQ.scala 58:49]
    taskQueues_0.clock <= clock
    taskQueues_0.reset <= reset
    io.connPE[0].pop.bits <= taskQueues_0.io.connVec[0].pop.bits @[stealNW_TQ.scala 62:37]
    io.connPE[0].pop.valid <= taskQueues_0.io.connVec[0].pop.valid @[stealNW_TQ.scala 62:37]
    taskQueues_0.io.connVec[0].pop.ready <= io.connPE[0].pop.ready @[stealNW_TQ.scala 62:37]
    taskQueues_0.io.connVec[0].push <= io.connPE[0].push @[stealNW_TQ.scala 62:37]
    io.connPE[0].currLength <= taskQueues_0.io.connVec[0].currLength @[stealNW_TQ.scala 62:37]
    stealServers_0.io.connQ <= taskQueues_0.io.connVec[1] @[stealNW_TQ.scala 69:37]
    stealServers_0.io.connNetwork <= stealNet.io.connSS[1] @[stealNW_TQ.scala 75:33]
    stealNet.io.connSS[0].data.qOutTask <= io.connVSS[0].data.qOutTask @[stealNW_TQ.scala 123:39]
    io.connVSS[0].data.availableTask.bits <= stealNet.io.connSS[0].data.availableTask.bits @[stealNW_TQ.scala 123:39]
    io.connVSS[0].data.availableTask.valid <= stealNet.io.connSS[0].data.availableTask.valid @[stealNW_TQ.scala 123:39]
    stealNet.io.connSS[0].data.availableTask.ready <= io.connVSS[0].data.availableTask.ready @[stealNW_TQ.scala 123:39]
    stealNet.io.connSS[0].ctrl.stealReq.valid <= io.connVSS[0].ctrl.stealReq.valid @[stealNW_TQ.scala 123:39]
    io.connVSS[0].ctrl.stealReq.ready <= stealNet.io.connSS[0].ctrl.stealReq.ready @[stealNW_TQ.scala 123:39]
    stealNet.io.connSS[0].ctrl.serveStealReq.valid <= io.connVSS[0].ctrl.serveStealReq.valid @[stealNW_TQ.scala 123:39]
    io.connVSS[0].ctrl.serveStealReq.ready <= stealNet.io.connSS[0].ctrl.serveStealReq.ready @[stealNW_TQ.scala 123:39]
    stealServers_0.io.connNetwork <= stealNet.io.connSS[1] @[stealNW_TQ.scala 133:39]
    io.ntwDataUnitOccupancyVSS[0] <= stealNet.io.ntwDataUnitOccupancyVSS[0] @[stealNW_TQ.scala 145:48]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, count : UInt<3>}

    cmem ram : { addr : UInt<6>, prot : UInt<3>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, count : UInt<3>}

    cmem ram : { data : UInt<64>, strb : UInt<8>} [4] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<2>("h3")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<3>("h4"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt}, count : UInt<5>}

    cmem ram : UInt [16] @[Decoupled.scala 275:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 278:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 279:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 280:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 280:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 281:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 52:35]
    wire do_enq : UInt<1>
    do_enq <= _do_enq_T
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 52:35]
    wire do_deq : UInt<1>
    do_deq <= _do_deq_T
    when do_enq : @[Decoupled.scala 288:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 289:8]
      MPORT <= io.enq.bits @[Decoupled.scala 289:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 292:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 295:15]
    when _T : @[Decoupled.scala 295:27]
      maybe_full <= do_enq @[Decoupled.scala 296:16]
    when UInt<1>("h0") : @[Decoupled.scala 298:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 301:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 304:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 304:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 305:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 305:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 312:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 312:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 328:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 328:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 331:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 331:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 331:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 331:14]

  module virtualStealServer :
    input clock : Clock
    input reset : Reset
    output io : { flip connNetwork : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}, flip axi_mgmt : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}, read_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip read_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, read_burst_len : UInt<4>, write_address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, write_burst_len : UInt<4>, write_last : UInt<1>, flip ntwDataUnitOccupancy : UInt<1>}

    wire saxil : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[RegisterBlock.scala 60:19]
    node _mask_T = asUInt(asSInt(UInt<6>("h3f"))) @[RegisterBlock.scala 159:36]
    node mask = xor(_mask_T, UInt<3>("h7")) @[RegisterBlock.scala 159:39]
    inst rdReq__deq of Queue @[Decoupled.scala 377:21]
    rdReq__deq.clock <= clock
    rdReq__deq.reset <= reset
    rdReq__deq.io.enq.valid <= saxil.ar.valid @[Decoupled.scala 379:22]
    rdReq__deq.io.enq.bits.prot <= saxil.ar.bits.prot @[Decoupled.scala 380:21]
    rdReq__deq.io.enq.bits.addr <= saxil.ar.bits.addr @[Decoupled.scala 380:21]
    saxil.ar.ready <= rdReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire rdReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    rdReq_.bits <= rdReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    rdReq_.valid <= rdReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    rdReq__deq.io.deq.ready <= rdReq_.ready @[Decoupled.scala 420:15]
    inst wrReq__deq of Queue_1 @[Decoupled.scala 377:21]
    wrReq__deq.clock <= clock
    wrReq__deq.reset <= reset
    wrReq__deq.io.enq.valid <= saxil.aw.valid @[Decoupled.scala 379:22]
    wrReq__deq.io.enq.bits.prot <= saxil.aw.bits.prot @[Decoupled.scala 380:21]
    wrReq__deq.io.enq.bits.addr <= saxil.aw.bits.addr @[Decoupled.scala 380:21]
    saxil.aw.ready <= wrReq__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReq_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<6>, prot : UInt<3>}} @[Decoupled.scala 417:19]
    wrReq_.bits <= wrReq__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReq_.valid <= wrReq__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReq__deq.io.deq.ready <= wrReq_.ready @[Decoupled.scala 420:15]
    inst wrReqData__deq of Queue_2 @[Decoupled.scala 377:21]
    wrReqData__deq.clock <= clock
    wrReqData__deq.reset <= reset
    wrReqData__deq.io.enq.valid <= saxil.w.valid @[Decoupled.scala 379:22]
    wrReqData__deq.io.enq.bits.strb <= saxil.w.bits.strb @[Decoupled.scala 380:21]
    wrReqData__deq.io.enq.bits.data <= saxil.w.bits.data @[Decoupled.scala 380:21]
    saxil.w.ready <= wrReqData__deq.io.enq.ready @[Decoupled.scala 381:17]
    wire wrReqData_ : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}} @[Decoupled.scala 417:19]
    wrReqData_.bits <= wrReqData__deq.io.deq.bits @[Decoupled.scala 418:14]
    wrReqData_.valid <= wrReqData__deq.io.deq.valid @[Decoupled.scala 419:15]
    wrReqData__deq.io.deq.ready <= wrReqData_.ready @[Decoupled.scala 420:15]
    rdReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.r.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.r.bits.resp is invalid @[Decoupled.scala 75:19]
    saxil.r.bits.data is invalid @[Decoupled.scala 75:19]
    wrReq_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    wrReqData_.ready <= UInt<1>("h0") @[Decoupled.scala 90:20]
    saxil.b.valid <= UInt<1>("h0") @[Decoupled.scala 74:20]
    saxil.b.bits.resp is invalid @[Decoupled.scala 75:19]
    node rdReq = and(rdReq_.valid, saxil.r.ready) @[RegisterBlock.scala 210:44]
    node rdAddr = and(rdReq_.bits.addr, mask) @[RegisterBlock.scala 214:48]
    node _wrReq_T = and(wrReq_.valid, wrReqData_.valid) @[RegisterBlock.scala 241:43]
    node wrReq = and(_wrReq_T, saxil.b.ready) @[RegisterBlock.scala 241:63]
    node wrAddr = and(wrReq_.bits.addr, mask) @[RegisterBlock.scala 243:48]
    io.axi_mgmt.BRESP <= saxil.b.bits.resp @[virtualStealServer.scala 62:20]
    io.axi_mgmt.BVALID <= saxil.b.valid @[virtualStealServer.scala 62:20]
    saxil.b.ready <= io.axi_mgmt.BREADY @[virtualStealServer.scala 62:20]
    saxil.w.bits.strb <= io.axi_mgmt.WSTRB @[virtualStealServer.scala 62:20]
    saxil.w.bits.data <= io.axi_mgmt.WDATA @[virtualStealServer.scala 62:20]
    saxil.w.valid <= io.axi_mgmt.WVALID @[virtualStealServer.scala 62:20]
    io.axi_mgmt.WREADY <= saxil.w.ready @[virtualStealServer.scala 62:20]
    saxil.aw.bits.prot <= io.axi_mgmt.AWPROT @[virtualStealServer.scala 62:20]
    saxil.aw.bits.addr <= io.axi_mgmt.AWADDR @[virtualStealServer.scala 62:20]
    saxil.aw.valid <= io.axi_mgmt.AWVALID @[virtualStealServer.scala 62:20]
    io.axi_mgmt.AWREADY <= saxil.aw.ready @[virtualStealServer.scala 62:20]
    io.axi_mgmt.RRESP <= saxil.r.bits.resp @[virtualStealServer.scala 62:20]
    io.axi_mgmt.RDATA <= saxil.r.bits.data @[virtualStealServer.scala 62:20]
    io.axi_mgmt.RVALID <= saxil.r.valid @[virtualStealServer.scala 62:20]
    saxil.r.ready <= io.axi_mgmt.RREADY @[virtualStealServer.scala 62:20]
    saxil.ar.bits.prot <= io.axi_mgmt.ARPROT @[virtualStealServer.scala 62:20]
    saxil.ar.bits.addr <= io.axi_mgmt.ARADDR @[virtualStealServer.scala 62:20]
    saxil.ar.valid <= io.axi_mgmt.ARVALID @[virtualStealServer.scala 62:20]
    io.axi_mgmt.ARREADY <= saxil.ar.ready @[virtualStealServer.scala 62:20]
    reg rAddr : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 65:44]
    reg rPause : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 66:44]
    reg procInterrupt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 67:44]
    reg maxLength : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 68:44]
    reg stateReg : UInt<4>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 69:44]
    wire currLen : UInt<64> @[virtualStealServer.scala 70:41]
    reg contentionCounter : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 71:44]
    reg contentionThresh : UInt<64>, clock with :
      reset => (reset, UInt<64>("h1")) @[virtualStealServer.scala 72:44]
    reg networkCongested : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[virtualStealServer.scala 73:44]
    reg stolenTaskReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 74:44]
    reg giveTaskReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 75:44]
    reg delta : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[virtualStealServer.scala 76:44]
    reg fifoTailReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 77:44]
    reg fifoHeadReg : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 78:44]
    reg popOrPush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[virtualStealServer.scala 79:44]
    reg addrShift : UInt, clock with :
      reset => (reset, UInt<2>("h3")) @[virtualStealServer.scala 80:44]
    inst taskQueueBuffer of Queue_3 @[virtualStealServer.scala 81:43]
    taskQueueBuffer.clock <= clock
    taskQueueBuffer.reset <= reset
    reg memDataCounter : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[virtualStealServer.scala 82:44]
    node _T = eq(io.connNetwork.ctrl.serveStealReq.ready, UInt<1>("h0")) @[virtualStealServer.scala 106:14]
    node _T_1 = and(_T, io.ntwDataUnitOccupancy) @[virtualStealServer.scala 106:56]
    node _T_2 = neq(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 108:34]
    node _T_3 = and(_T_1, _T_2) @[virtualStealServer.scala 108:13]
    when _T_3 : @[virtualStealServer.scala 108:60]
      node _contentionCounter_T = add(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 109:52]
      node _contentionCounter_T_1 = tail(_contentionCounter_T, 1) @[virtualStealServer.scala 109:52]
      contentionCounter <= _contentionCounter_T_1 @[virtualStealServer.scala 109:31]
    else :
      node _T_4 = neq(contentionCounter, UInt<1>("h0")) @[virtualStealServer.scala 111:39]
      node _T_5 = and(io.connNetwork.ctrl.serveStealReq.ready, _T_4) @[virtualStealServer.scala 110:60]
      node _T_6 = eq(io.ntwDataUnitOccupancy, UInt<1>("h0")) @[virtualStealServer.scala 112:24]
      node _T_7 = and(_T_5, _T_6) @[virtualStealServer.scala 112:21]
      when _T_7 : @[virtualStealServer.scala 112:50]
        node _contentionCounter_T_2 = sub(contentionCounter, UInt<1>("h1")) @[virtualStealServer.scala 113:52]
        node _contentionCounter_T_3 = tail(_contentionCounter_T_2, 1) @[virtualStealServer.scala 113:52]
        contentionCounter <= _contentionCounter_T_3 @[virtualStealServer.scala 113:31]
      else :
        contentionCounter <= contentionCounter @[virtualStealServer.scala 115:31]
    node _T_8 = add(contentionThresh, delta) @[virtualStealServer.scala 120:49]
    node _T_9 = tail(_T_8, 1) @[virtualStealServer.scala 120:49]
    node _T_10 = geq(contentionCounter, _T_9) @[virtualStealServer.scala 120:28]
    when _T_10 : @[virtualStealServer.scala 120:58]
      networkCongested <= UInt<1>("h1") @[virtualStealServer.scala 121:26]
    else :
      node _T_11 = sub(contentionThresh, delta) @[virtualStealServer.scala 122:54]
      node _T_12 = tail(_T_11, 1) @[virtualStealServer.scala 122:54]
      node _T_13 = lt(contentionCounter, _T_12) @[virtualStealServer.scala 122:34]
      when _T_13 : @[virtualStealServer.scala 122:63]
        networkCongested <= UInt<1>("h0") @[virtualStealServer.scala 123:26]
      else :
        networkCongested <= networkCongested @[virtualStealServer.scala 125:26]
    node _T_14 = eq(stateReg, UInt<1>("h0")) @[virtualStealServer.scala 130:19]
    when _T_14 : @[virtualStealServer.scala 130:34]
      node _T_15 = eq(currLen, maxLength) @[virtualStealServer.scala 132:23]
      node _T_16 = and(_T_15, networkCongested) @[virtualStealServer.scala 132:37]
      node _T_17 = add(UInt<5>("h10"), currLen) @[virtualStealServer.scala 132:79]
      node _T_18 = tail(_T_17, 1) @[virtualStealServer.scala 132:79]
      node _T_19 = lt(maxLength, _T_18) @[virtualStealServer.scala 132:71]
      node _T_20 = or(_T_16, _T_19) @[virtualStealServer.scala 132:58]
      when _T_20 : @[virtualStealServer.scala 132:90]
        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 134:22]
        rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 135:22]
      else :
        node _T_21 = eq(taskQueueBuffer.io.count, UInt<5>("h10")) @[virtualStealServer.scala 137:65]
        node _T_22 = and(networkCongested, _T_21) @[virtualStealServer.scala 137:37]
        when _T_22 : @[virtualStealServer.scala 137:74]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 139:22]
        else :
          when networkCongested : @[virtualStealServer.scala 141:37]
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 143:22]
          else :
            node _T_23 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 145:20]
            node _T_24 = neq(currLen, UInt<1>("h0")) @[virtualStealServer.scala 145:49]
            node _T_25 = and(_T_23, _T_24) @[virtualStealServer.scala 145:38]
            node _T_26 = eq(taskQueueBuffer.io.count, UInt<1>("h0")) @[virtualStealServer.scala 145:85]
            node _T_27 = and(_T_25, _T_26) @[virtualStealServer.scala 145:57]
            when _T_27 : @[virtualStealServer.scala 145:93]
              stateReg <= UInt<3>("h6") @[virtualStealServer.scala 147:22]
            else :
              node _T_28 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 149:20]
              node _T_29 = neq(taskQueueBuffer.io.count, UInt<1>("h0")) @[virtualStealServer.scala 149:66]
              node _T_30 = and(_T_28, _T_29) @[virtualStealServer.scala 149:38]
              when _T_30 : @[virtualStealServer.scala 149:74]
                stateReg <= UInt<3>("h7") @[virtualStealServer.scala 151:22]
              else :
                node _T_31 = neq(procInterrupt, UInt<1>("h0")) @[virtualStealServer.scala 153:34]
                when _T_31 : @[virtualStealServer.scala 153:42]
                  stateReg <= UInt<4>("ha") @[virtualStealServer.scala 155:22]
                  rPause <= UInt<64>("hffffffffffffffff") @[virtualStealServer.scala 156:22]
    else :
      node _T_32 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 160:25]
      when _T_32 : @[virtualStealServer.scala 160:46]
        node _T_33 = eq(taskQueueBuffer.io.count, UInt<4>("hf")) @[virtualStealServer.scala 162:39]
        node _T_34 = and(_T_33, io.connNetwork.data.availableTask.valid) @[virtualStealServer.scala 162:48]
        when _T_34 : @[virtualStealServer.scala 162:91]
          stateReg <= UInt<3>("h4") @[virtualStealServer.scala 164:22]
        else :
          node _T_35 = and(io.connNetwork.data.availableTask.valid, networkCongested) @[virtualStealServer.scala 166:60]
          when _T_35 : @[virtualStealServer.scala 166:80]
            stateReg <= UInt<2>("h2") @[virtualStealServer.scala 168:22]
          else :
            node _T_36 = eq(networkCongested, UInt<1>("h0")) @[virtualStealServer.scala 170:20]
            when _T_36 : @[virtualStealServer.scala 170:38]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 172:22]
      else :
        node _T_37 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 176:25]
        when _T_37 : @[virtualStealServer.scala 176:54]
          when io.write_address.ready : @[virtualStealServer.scala 178:37]
            stateReg <= UInt<2>("h3") @[virtualStealServer.scala 179:22]
            memDataCounter <= UInt<5>("h10") @[virtualStealServer.scala 180:28]
        else :
          node _T_38 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 183:25]
          when _T_38 : @[virtualStealServer.scala 183:47]
            node _T_39 = eq(memDataCounter, UInt<1>("h1")) @[virtualStealServer.scala 185:52]
            node _T_40 = and(io.write_data.ready, _T_39) @[virtualStealServer.scala 185:34]
            when _T_40 : @[virtualStealServer.scala 185:60]
              stateReg <= UInt<1>("h0") @[virtualStealServer.scala 186:22]
              popOrPush <= UInt<1>("h0") @[virtualStealServer.scala 187:23]
              node _T_41 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 189:42]
              node _T_42 = tail(_T_41, 1) @[virtualStealServer.scala 189:42]
              node _T_43 = lt(fifoTailReg, _T_42) @[virtualStealServer.scala 189:30]
              when _T_43 : @[virtualStealServer.scala 189:48]
                node _fifoTailReg_T = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 190:44]
                node _fifoTailReg_T_1 = tail(_fifoTailReg_T, 1) @[virtualStealServer.scala 190:44]
                fifoTailReg <= _fifoTailReg_T_1 @[virtualStealServer.scala 190:29]
              else :
                fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 192:29]
            else :
              when io.write_data.ready : @[virtualStealServer.scala 195:40]
                node _memDataCounter_T = sub(memDataCounter, UInt<1>("h1")) @[virtualStealServer.scala 196:46]
                node _memDataCounter_T_1 = tail(_memDataCounter_T, 1) @[virtualStealServer.scala 196:46]
                memDataCounter <= _memDataCounter_T_1 @[virtualStealServer.scala 196:28]
                node _T_44 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 197:42]
                node _T_45 = tail(_T_44, 1) @[virtualStealServer.scala 197:42]
                node _T_46 = lt(fifoTailReg, _T_45) @[virtualStealServer.scala 197:30]
                when _T_46 : @[virtualStealServer.scala 197:48]
                  node _fifoTailReg_T_2 = add(fifoTailReg, UInt<1>("h1")) @[virtualStealServer.scala 198:44]
                  node _fifoTailReg_T_3 = tail(_fifoTailReg_T_2, 1) @[virtualStealServer.scala 198:44]
                  fifoTailReg <= _fifoTailReg_T_3 @[virtualStealServer.scala 198:29]
                else :
                  fifoTailReg <= UInt<1>("h0") @[virtualStealServer.scala 200:29]
          else :
            node _T_47 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 204:25]
            when _T_47 : @[virtualStealServer.scala 204:53]
              when io.read_address.ready : @[virtualStealServer.scala 206:36]
                stateReg <= UInt<3>("h5") @[virtualStealServer.scala 207:22]
                node _memDataCounter_T_2 = lt(currLen, UInt<5>("h10")) @[virtualStealServer.scala 208:43]
                node _memDataCounter_T_3 = mux(_memDataCounter_T_2, currLen, UInt<5>("h10")) @[virtualStealServer.scala 208:34]
                memDataCounter <= _memDataCounter_T_3 @[virtualStealServer.scala 208:28]
            else :
              node _T_48 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 211:25]
              when _T_48 : @[virtualStealServer.scala 211:46]
                node _T_49 = eq(memDataCounter, UInt<1>("h1")) @[virtualStealServer.scala 213:51]
                node _T_50 = and(io.read_data.valid, _T_49) @[virtualStealServer.scala 213:33]
                when _T_50 : @[virtualStealServer.scala 213:59]
                  stateReg <= UInt<4>("h8") @[virtualStealServer.scala 214:22]
                  popOrPush <= UInt<1>("h1") @[virtualStealServer.scala 215:23]
                  node _T_51 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 217:42]
                  node _T_52 = tail(_T_51, 1) @[virtualStealServer.scala 217:42]
                  node _T_53 = lt(fifoHeadReg, _T_52) @[virtualStealServer.scala 217:30]
                  when _T_53 : @[virtualStealServer.scala 217:48]
                    node _fifoHeadReg_T = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 218:44]
                    node _fifoHeadReg_T_1 = tail(_fifoHeadReg_T, 1) @[virtualStealServer.scala 218:44]
                    fifoHeadReg <= _fifoHeadReg_T_1 @[virtualStealServer.scala 218:29]
                  else :
                    fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 220:29]
                else :
                  when io.read_data.valid : @[virtualStealServer.scala 222:39]
                    node _memDataCounter_T_4 = sub(memDataCounter, UInt<1>("h1")) @[virtualStealServer.scala 223:46]
                    node _memDataCounter_T_5 = tail(_memDataCounter_T_4, 1) @[virtualStealServer.scala 223:46]
                    memDataCounter <= _memDataCounter_T_5 @[virtualStealServer.scala 223:28]
                    node _T_54 = sub(maxLength, UInt<1>("h1")) @[virtualStealServer.scala 224:42]
                    node _T_55 = tail(_T_54, 1) @[virtualStealServer.scala 224:42]
                    node _T_56 = lt(fifoHeadReg, _T_55) @[virtualStealServer.scala 224:30]
                    when _T_56 : @[virtualStealServer.scala 224:48]
                      node _fifoHeadReg_T_2 = add(fifoHeadReg, UInt<1>("h1")) @[virtualStealServer.scala 225:44]
                      node _fifoHeadReg_T_3 = tail(_fifoHeadReg_T_2, 1) @[virtualStealServer.scala 225:44]
                      fifoHeadReg <= _fifoHeadReg_T_3 @[virtualStealServer.scala 225:29]
                    else :
                      fifoHeadReg <= UInt<1>("h0") @[virtualStealServer.scala 227:29]
              else :
                node _T_57 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 231:25]
                when _T_57 : @[virtualStealServer.scala 231:48]
                  when io.connNetwork.data.qOutTask.ready : @[virtualStealServer.scala 233:49]
                    stateReg <= UInt<1>("h0") @[virtualStealServer.scala 234:22]
                  else :
                    when networkCongested : @[virtualStealServer.scala 235:37]
                      stateReg <= UInt<1>("h0") @[virtualStealServer.scala 236:22]
                    else :
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 238:22]
                else :
                  node _T_58 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 241:25]
                  when _T_58 : @[virtualStealServer.scala 241:54]
                    when io.connNetwork.ctrl.serveStealReq.ready : @[virtualStealServer.scala 243:54]
                      stateReg <= UInt<3>("h7") @[virtualStealServer.scala 245:22]
                    else :
                      when networkCongested : @[virtualStealServer.scala 247:37]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 249:22]
                  else :
                    node _T_59 = eq(stateReg, UInt<4>("h9")) @[virtualStealServer.scala 253:25]
                    when _T_59 : @[virtualStealServer.scala 253:46]
                      node _T_60 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 255:21]
                      when _T_60 : @[virtualStealServer.scala 255:33]
                        stateReg <= UInt<1>("h0") @[virtualStealServer.scala 257:22]
                      else :
                        stateReg <= UInt<4>("h9") @[virtualStealServer.scala 261:22]
                    else :
                      node _T_61 = eq(stateReg, UInt<4>("ha")) @[virtualStealServer.scala 265:25]
                      when _T_61 : @[virtualStealServer.scala 265:57]
                        node _T_62 = eq(rPause, UInt<1>("h0")) @[virtualStealServer.scala 267:21]
                        when _T_62 : @[virtualStealServer.scala 267:33]
                          stateReg <= UInt<1>("h0") @[virtualStealServer.scala 268:22]
                        else :
                          stateReg <= UInt<4>("ha") @[virtualStealServer.scala 270:22]
    io.connNetwork.data.qOutTask.bits <= taskQueueBuffer.io.deq.bits @[virtualStealServer.scala 275:45]
    io.write_data.bits <= taskQueueBuffer.io.deq.bits @[virtualStealServer.scala 276:45]
    io.read_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 280:45]
    io.read_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 281:45]
    io.read_data.ready <= UInt<1>("h0") @[virtualStealServer.scala 282:45]
    io.write_address.valid <= UInt<1>("h0") @[virtualStealServer.scala 283:45]
    io.write_address.bits <= UInt<1>("h0") @[virtualStealServer.scala 284:45]
    io.write_data.valid <= UInt<1>("h0") @[virtualStealServer.scala 285:45]
    io.connNetwork.data.availableTask.ready <= UInt<1>("h0") @[virtualStealServer.scala 288:45]
    io.connNetwork.data.qOutTask.valid <= UInt<1>("h0") @[virtualStealServer.scala 289:45]
    io.connNetwork.ctrl.stealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 292:45]
    io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h0") @[virtualStealServer.scala 293:45]
    taskQueueBuffer.io.enq.valid <= UInt<1>("h0") @[virtualStealServer.scala 296:45]
    taskQueueBuffer.io.enq.bits <= UInt<1>("h0") @[virtualStealServer.scala 297:45]
    taskQueueBuffer.io.deq.ready <= UInt<1>("h0") @[virtualStealServer.scala 299:45]
    io.write_burst_len <= UInt<1>("h0") @[virtualStealServer.scala 302:45]
    io.write_last <= UInt<1>("h0") @[virtualStealServer.scala 303:45]
    io.read_burst_len <= UInt<1>("h0") @[virtualStealServer.scala 304:45]
    node _T_63 = eq(stateReg, UInt<2>("h2")) @[virtualStealServer.scala 309:19]
    when _T_63 : @[virtualStealServer.scala 309:40]
      taskQueueBuffer.io.enq.bits <= io.connNetwork.data.availableTask.bits @[virtualStealServer.scala 311:49]
      io.connNetwork.data.availableTask.ready <= UInt<1>("h1") @[virtualStealServer.scala 312:49]
      taskQueueBuffer.io.enq.valid <= io.connNetwork.data.availableTask.valid @[virtualStealServer.scala 313:49]
    else :
      node _T_64 = eq(stateReg, UInt<3>("h4")) @[virtualStealServer.scala 315:25]
      when _T_64 : @[virtualStealServer.scala 315:54]
        io.write_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 317:49]
        node _io_write_address_bits_T = dshl(fifoTailReg, addrShift) @[virtualStealServer.scala 318:65]
        node _io_write_address_bits_T_1 = add(_io_write_address_bits_T, rAddr) @[virtualStealServer.scala 318:79]
        node _io_write_address_bits_T_2 = tail(_io_write_address_bits_T_1, 1) @[virtualStealServer.scala 318:79]
        io.write_address.bits <= _io_write_address_bits_T_2 @[virtualStealServer.scala 318:49]
        io.write_burst_len <= UInt<4>("hf") @[virtualStealServer.scala 319:49]
      else :
        node _T_65 = eq(stateReg, UInt<2>("h3")) @[virtualStealServer.scala 321:25]
        when _T_65 : @[virtualStealServer.scala 321:47]
          io.write_data.valid <= UInt<1>("h1") @[virtualStealServer.scala 323:49]
          taskQueueBuffer.io.deq.ready <= io.write_data.ready @[virtualStealServer.scala 324:49]
          node _T_66 = eq(memDataCounter, UInt<1>("h1")) @[virtualStealServer.scala 325:29]
          when _T_66 : @[virtualStealServer.scala 325:37]
            io.write_last <= UInt<1>("h1") @[virtualStealServer.scala 326:55]
        else :
          node _T_67 = eq(stateReg, UInt<3>("h6")) @[virtualStealServer.scala 330:25]
          when _T_67 : @[virtualStealServer.scala 330:53]
            io.read_address.valid <= UInt<1>("h1") @[virtualStealServer.scala 332:49]
            node _io_read_address_bits_T = dshl(fifoHeadReg, addrShift) @[virtualStealServer.scala 333:65]
            node _io_read_address_bits_T_1 = add(_io_read_address_bits_T, rAddr) @[virtualStealServer.scala 333:79]
            node _io_read_address_bits_T_2 = tail(_io_read_address_bits_T_1, 1) @[virtualStealServer.scala 333:79]
            io.read_address.bits <= _io_read_address_bits_T_2 @[virtualStealServer.scala 333:49]
            node _io_read_burst_len_T = lt(currLen, UInt<5>("h10")) @[virtualStealServer.scala 334:64]
            node _io_read_burst_len_T_1 = sub(currLen, UInt<1>("h1")) @[virtualStealServer.scala 334:79]
            node _io_read_burst_len_T_2 = tail(_io_read_burst_len_T_1, 1) @[virtualStealServer.scala 334:79]
            node _io_read_burst_len_T_3 = mux(_io_read_burst_len_T, _io_read_burst_len_T_2, UInt<4>("hf")) @[virtualStealServer.scala 334:55]
            io.read_burst_len <= _io_read_burst_len_T_3 @[virtualStealServer.scala 334:49]
          else :
            node _T_68 = eq(stateReg, UInt<3>("h5")) @[virtualStealServer.scala 336:25]
            when _T_68 : @[virtualStealServer.scala 336:46]
              io.read_data.ready <= UInt<1>("h1") @[virtualStealServer.scala 338:49]
              taskQueueBuffer.io.enq.bits <= io.read_data.bits @[virtualStealServer.scala 339:49]
              taskQueueBuffer.io.enq.valid <= io.read_data.valid @[virtualStealServer.scala 340:49]
            else :
              node _T_69 = eq(stateReg, UInt<3>("h7")) @[virtualStealServer.scala 342:25]
              when _T_69 : @[virtualStealServer.scala 342:48]
                io.connNetwork.data.qOutTask.valid <= UInt<1>("h1") @[virtualStealServer.scala 344:49]
                taskQueueBuffer.io.deq.ready <= io.connNetwork.data.qOutTask.ready @[virtualStealServer.scala 345:49]
              else :
                node _T_70 = eq(stateReg, UInt<4>("h8")) @[virtualStealServer.scala 347:25]
                when _T_70 : @[virtualStealServer.scala 347:54]
                  io.connNetwork.ctrl.serveStealReq.valid <= UInt<1>("h1") @[virtualStealServer.scala 349:49]
    reg lengthHistroy : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[virtualStealServer.scala 355:32]
    node _T_71 = gt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 357:22]
    when _T_71 : @[virtualStealServer.scala 357:36]
      node _currLen_T = sub(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 359:32]
      node _currLen_T_1 = tail(_currLen_T, 1) @[virtualStealServer.scala 359:32]
      currLen <= _currLen_T_1 @[virtualStealServer.scala 359:17]
      lengthHistroy <= currLen @[virtualStealServer.scala 360:23]
    else :
      node _T_72 = lt(fifoTailReg, fifoHeadReg) @[virtualStealServer.scala 362:28]
      when _T_72 : @[virtualStealServer.scala 362:42]
        node _currLen_T_2 = sub(maxLength, fifoHeadReg) @[virtualStealServer.scala 364:30]
        node _currLen_T_3 = tail(_currLen_T_2, 1) @[virtualStealServer.scala 364:30]
        node _currLen_T_4 = add(_currLen_T_3, fifoTailReg) @[virtualStealServer.scala 364:44]
        node _currLen_T_5 = tail(_currLen_T_4, 1) @[virtualStealServer.scala 364:44]
        currLen <= _currLen_T_5 @[virtualStealServer.scala 364:17]
        lengthHistroy <= currLen @[virtualStealServer.scala 365:23]
      else :
        lengthHistroy <= lengthHistroy @[virtualStealServer.scala 369:23]
        when popOrPush : @[virtualStealServer.scala 371:24]
          currLen <= UInt<1>("h0") @[virtualStealServer.scala 373:21]
        else :
          node _currLen_T_6 = add(lengthHistroy, UInt<1>("h1")) @[virtualStealServer.scala 377:38]
          node _currLen_T_7 = tail(_currLen_T_6, 1) @[virtualStealServer.scala 377:38]
          currLen <= _currLen_T_7 @[virtualStealServer.scala 377:21]
    when rdReq : @[virtualStealServer.scala 384:27]
      wire data : UInt<64> @[RegisterBlock.scala 217:20]
      node _data_T = asUInt(asSInt(UInt<64>("hffffffffffffffff"))) @[RegisterBlock.scala 220:29]
      data <= _data_T @[RegisterBlock.scala 220:10]
      node _T_73 = eq(UInt<1>("h0"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_73 : @[RegisterBlock.scala 224:38]
        data <= rPause @[RegisterBlock.scala 225:16]
      node _T_74 = eq(UInt<4>("h8"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_74 : @[RegisterBlock.scala 224:38]
        data <= rAddr @[RegisterBlock.scala 225:16]
      node _T_75 = eq(UInt<5>("h10"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_75 : @[RegisterBlock.scala 224:38]
        data <= maxLength @[RegisterBlock.scala 225:16]
      node _T_76 = eq(UInt<5>("h18"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_76 : @[RegisterBlock.scala 224:38]
        data <= fifoTailReg @[RegisterBlock.scala 225:16]
      node _T_77 = eq(UInt<6>("h20"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_77 : @[RegisterBlock.scala 224:38]
        data <= fifoHeadReg @[RegisterBlock.scala 225:16]
      node _T_78 = eq(UInt<6>("h28"), rdAddr) @[RegisterBlock.scala 224:26]
      when _T_78 : @[RegisterBlock.scala 224:38]
        data <= procInterrupt @[RegisterBlock.scala 225:16]
      node _T_79 = asUInt(reset) @[RegisterBlock.scala 182:11]
      node _T_80 = eq(_T_79, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
      when _T_80 : @[RegisterBlock.scala 182:11]
        node _T_81 = eq(rdReq, UInt<1>("h0")) @[RegisterBlock.scala 182:11]
        when _T_81 : @[RegisterBlock.scala 182:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:182 assert(rdReq)\n") : printf @[RegisterBlock.scala 182:11]
        assert(clock, rdReq, UInt<1>("h1"), "") : assert @[RegisterBlock.scala 182:11]
      rdReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp : { data : UInt<64>, resp : UInt<2>} @[RegisterBlock.scala 186:20]
      resp.data <= data @[RegisterBlock.scala 187:15]
      resp.resp <= UInt<2>("h0") @[RegisterBlock.scala 188:15]
      saxil.r.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.r.bits <= resp @[Decoupled.scala 66:19]
    when wrReq : @[virtualStealServer.scala 388:27]
      node _T_82 = eq(UInt<1>("h0"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_82 : @[RegisterBlock.scala 252:38]
        wire _rPause_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rPause_WIRE <= rPause @[RegisterBlock.scala 118:51]
        node _rPause_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rPause_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rPause_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rPause_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rPause_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rPause_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rPause_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rPause_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rPause_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rPause_byte_original = bits(_rPause_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rPause_T_8 = mux(_rPause_T, rPause_byte_wdata, rPause_byte_original) @[Interface.scala 259:14]
        node rPause_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rPause_byte_original_1 = bits(_rPause_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rPause_T_9 = mux(_rPause_T_1, rPause_byte_wdata_1, rPause_byte_original_1) @[Interface.scala 259:14]
        node rPause_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rPause_byte_original_2 = bits(_rPause_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rPause_T_10 = mux(_rPause_T_2, rPause_byte_wdata_2, rPause_byte_original_2) @[Interface.scala 259:14]
        node rPause_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rPause_byte_original_3 = bits(_rPause_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rPause_T_11 = mux(_rPause_T_3, rPause_byte_wdata_3, rPause_byte_original_3) @[Interface.scala 259:14]
        node rPause_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rPause_byte_original_4 = bits(_rPause_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rPause_T_12 = mux(_rPause_T_4, rPause_byte_wdata_4, rPause_byte_original_4) @[Interface.scala 259:14]
        node rPause_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rPause_byte_original_5 = bits(_rPause_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rPause_T_13 = mux(_rPause_T_5, rPause_byte_wdata_5, rPause_byte_original_5) @[Interface.scala 259:14]
        node rPause_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rPause_byte_original_6 = bits(_rPause_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rPause_T_14 = mux(_rPause_T_6, rPause_byte_wdata_6, rPause_byte_original_6) @[Interface.scala 259:14]
        node rPause_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rPause_byte_original_7 = bits(_rPause_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rPause_T_15 = mux(_rPause_T_7, rPause_byte_wdata_7, rPause_byte_original_7) @[Interface.scala 259:14]
        wire _rPause_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rPause_WIRE_1[0] <= _rPause_T_8 @[Interface.scala 254:12]
        _rPause_WIRE_1[1] <= _rPause_T_9 @[Interface.scala 254:12]
        _rPause_WIRE_1[2] <= _rPause_T_10 @[Interface.scala 254:12]
        _rPause_WIRE_1[3] <= _rPause_T_11 @[Interface.scala 254:12]
        _rPause_WIRE_1[4] <= _rPause_T_12 @[Interface.scala 254:12]
        _rPause_WIRE_1[5] <= _rPause_T_13 @[Interface.scala 254:12]
        _rPause_WIRE_1[6] <= _rPause_T_14 @[Interface.scala 254:12]
        _rPause_WIRE_1[7] <= _rPause_T_15 @[Interface.scala 254:12]
        node rPause_lo_lo = cat(_rPause_WIRE_1[1], _rPause_WIRE_1[0]) @[Interface.scala 262:7]
        node rPause_lo_hi = cat(_rPause_WIRE_1[3], _rPause_WIRE_1[2]) @[Interface.scala 262:7]
        node rPause_lo = cat(rPause_lo_hi, rPause_lo_lo) @[Interface.scala 262:7]
        node rPause_hi_lo = cat(_rPause_WIRE_1[5], _rPause_WIRE_1[4]) @[Interface.scala 262:7]
        node rPause_hi_hi = cat(_rPause_WIRE_1[7], _rPause_WIRE_1[6]) @[Interface.scala 262:7]
        node rPause_hi = cat(rPause_hi_hi, rPause_hi_lo) @[Interface.scala 262:7]
        node _rPause_T_16 = cat(rPause_hi, rPause_lo) @[Interface.scala 262:7]
        wire _rPause_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rPause_WIRE_2 <= _rPause_T_16 @[RegisterBlock.scala 118:82]
        rPause <= _rPause_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_83 = eq(UInt<4>("h8"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_83 : @[RegisterBlock.scala 252:38]
        wire _rAddr_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _rAddr_WIRE <= rAddr @[RegisterBlock.scala 118:51]
        node _rAddr_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _rAddr_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _rAddr_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _rAddr_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _rAddr_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _rAddr_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _rAddr_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _rAddr_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node rAddr_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node rAddr_byte_original = bits(_rAddr_WIRE, 7, 0) @[Interface.scala 258:39]
        node _rAddr_T_8 = mux(_rAddr_T, rAddr_byte_wdata, rAddr_byte_original) @[Interface.scala 259:14]
        node rAddr_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node rAddr_byte_original_1 = bits(_rAddr_WIRE, 15, 8) @[Interface.scala 258:39]
        node _rAddr_T_9 = mux(_rAddr_T_1, rAddr_byte_wdata_1, rAddr_byte_original_1) @[Interface.scala 259:14]
        node rAddr_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node rAddr_byte_original_2 = bits(_rAddr_WIRE, 23, 16) @[Interface.scala 258:39]
        node _rAddr_T_10 = mux(_rAddr_T_2, rAddr_byte_wdata_2, rAddr_byte_original_2) @[Interface.scala 259:14]
        node rAddr_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node rAddr_byte_original_3 = bits(_rAddr_WIRE, 31, 24) @[Interface.scala 258:39]
        node _rAddr_T_11 = mux(_rAddr_T_3, rAddr_byte_wdata_3, rAddr_byte_original_3) @[Interface.scala 259:14]
        node rAddr_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node rAddr_byte_original_4 = bits(_rAddr_WIRE, 39, 32) @[Interface.scala 258:39]
        node _rAddr_T_12 = mux(_rAddr_T_4, rAddr_byte_wdata_4, rAddr_byte_original_4) @[Interface.scala 259:14]
        node rAddr_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node rAddr_byte_original_5 = bits(_rAddr_WIRE, 47, 40) @[Interface.scala 258:39]
        node _rAddr_T_13 = mux(_rAddr_T_5, rAddr_byte_wdata_5, rAddr_byte_original_5) @[Interface.scala 259:14]
        node rAddr_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node rAddr_byte_original_6 = bits(_rAddr_WIRE, 55, 48) @[Interface.scala 258:39]
        node _rAddr_T_14 = mux(_rAddr_T_6, rAddr_byte_wdata_6, rAddr_byte_original_6) @[Interface.scala 259:14]
        node rAddr_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node rAddr_byte_original_7 = bits(_rAddr_WIRE, 63, 56) @[Interface.scala 258:39]
        node _rAddr_T_15 = mux(_rAddr_T_7, rAddr_byte_wdata_7, rAddr_byte_original_7) @[Interface.scala 259:14]
        wire _rAddr_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _rAddr_WIRE_1[0] <= _rAddr_T_8 @[Interface.scala 254:12]
        _rAddr_WIRE_1[1] <= _rAddr_T_9 @[Interface.scala 254:12]
        _rAddr_WIRE_1[2] <= _rAddr_T_10 @[Interface.scala 254:12]
        _rAddr_WIRE_1[3] <= _rAddr_T_11 @[Interface.scala 254:12]
        _rAddr_WIRE_1[4] <= _rAddr_T_12 @[Interface.scala 254:12]
        _rAddr_WIRE_1[5] <= _rAddr_T_13 @[Interface.scala 254:12]
        _rAddr_WIRE_1[6] <= _rAddr_T_14 @[Interface.scala 254:12]
        _rAddr_WIRE_1[7] <= _rAddr_T_15 @[Interface.scala 254:12]
        node rAddr_lo_lo = cat(_rAddr_WIRE_1[1], _rAddr_WIRE_1[0]) @[Interface.scala 262:7]
        node rAddr_lo_hi = cat(_rAddr_WIRE_1[3], _rAddr_WIRE_1[2]) @[Interface.scala 262:7]
        node rAddr_lo = cat(rAddr_lo_hi, rAddr_lo_lo) @[Interface.scala 262:7]
        node rAddr_hi_lo = cat(_rAddr_WIRE_1[5], _rAddr_WIRE_1[4]) @[Interface.scala 262:7]
        node rAddr_hi_hi = cat(_rAddr_WIRE_1[7], _rAddr_WIRE_1[6]) @[Interface.scala 262:7]
        node rAddr_hi = cat(rAddr_hi_hi, rAddr_hi_lo) @[Interface.scala 262:7]
        node _rAddr_T_16 = cat(rAddr_hi, rAddr_lo) @[Interface.scala 262:7]
        wire _rAddr_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _rAddr_WIRE_2 <= _rAddr_T_16 @[RegisterBlock.scala 118:82]
        rAddr <= _rAddr_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_84 = eq(UInt<5>("h10"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_84 : @[RegisterBlock.scala 252:38]
        wire _maxLength_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _maxLength_WIRE <= maxLength @[RegisterBlock.scala 118:51]
        node _maxLength_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _maxLength_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _maxLength_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _maxLength_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _maxLength_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _maxLength_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _maxLength_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _maxLength_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node maxLength_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node maxLength_byte_original = bits(_maxLength_WIRE, 7, 0) @[Interface.scala 258:39]
        node _maxLength_T_8 = mux(_maxLength_T, maxLength_byte_wdata, maxLength_byte_original) @[Interface.scala 259:14]
        node maxLength_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node maxLength_byte_original_1 = bits(_maxLength_WIRE, 15, 8) @[Interface.scala 258:39]
        node _maxLength_T_9 = mux(_maxLength_T_1, maxLength_byte_wdata_1, maxLength_byte_original_1) @[Interface.scala 259:14]
        node maxLength_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node maxLength_byte_original_2 = bits(_maxLength_WIRE, 23, 16) @[Interface.scala 258:39]
        node _maxLength_T_10 = mux(_maxLength_T_2, maxLength_byte_wdata_2, maxLength_byte_original_2) @[Interface.scala 259:14]
        node maxLength_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node maxLength_byte_original_3 = bits(_maxLength_WIRE, 31, 24) @[Interface.scala 258:39]
        node _maxLength_T_11 = mux(_maxLength_T_3, maxLength_byte_wdata_3, maxLength_byte_original_3) @[Interface.scala 259:14]
        node maxLength_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node maxLength_byte_original_4 = bits(_maxLength_WIRE, 39, 32) @[Interface.scala 258:39]
        node _maxLength_T_12 = mux(_maxLength_T_4, maxLength_byte_wdata_4, maxLength_byte_original_4) @[Interface.scala 259:14]
        node maxLength_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node maxLength_byte_original_5 = bits(_maxLength_WIRE, 47, 40) @[Interface.scala 258:39]
        node _maxLength_T_13 = mux(_maxLength_T_5, maxLength_byte_wdata_5, maxLength_byte_original_5) @[Interface.scala 259:14]
        node maxLength_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node maxLength_byte_original_6 = bits(_maxLength_WIRE, 55, 48) @[Interface.scala 258:39]
        node _maxLength_T_14 = mux(_maxLength_T_6, maxLength_byte_wdata_6, maxLength_byte_original_6) @[Interface.scala 259:14]
        node maxLength_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node maxLength_byte_original_7 = bits(_maxLength_WIRE, 63, 56) @[Interface.scala 258:39]
        node _maxLength_T_15 = mux(_maxLength_T_7, maxLength_byte_wdata_7, maxLength_byte_original_7) @[Interface.scala 259:14]
        wire _maxLength_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _maxLength_WIRE_1[0] <= _maxLength_T_8 @[Interface.scala 254:12]
        _maxLength_WIRE_1[1] <= _maxLength_T_9 @[Interface.scala 254:12]
        _maxLength_WIRE_1[2] <= _maxLength_T_10 @[Interface.scala 254:12]
        _maxLength_WIRE_1[3] <= _maxLength_T_11 @[Interface.scala 254:12]
        _maxLength_WIRE_1[4] <= _maxLength_T_12 @[Interface.scala 254:12]
        _maxLength_WIRE_1[5] <= _maxLength_T_13 @[Interface.scala 254:12]
        _maxLength_WIRE_1[6] <= _maxLength_T_14 @[Interface.scala 254:12]
        _maxLength_WIRE_1[7] <= _maxLength_T_15 @[Interface.scala 254:12]
        node maxLength_lo_lo = cat(_maxLength_WIRE_1[1], _maxLength_WIRE_1[0]) @[Interface.scala 262:7]
        node maxLength_lo_hi = cat(_maxLength_WIRE_1[3], _maxLength_WIRE_1[2]) @[Interface.scala 262:7]
        node maxLength_lo = cat(maxLength_lo_hi, maxLength_lo_lo) @[Interface.scala 262:7]
        node maxLength_hi_lo = cat(_maxLength_WIRE_1[5], _maxLength_WIRE_1[4]) @[Interface.scala 262:7]
        node maxLength_hi_hi = cat(_maxLength_WIRE_1[7], _maxLength_WIRE_1[6]) @[Interface.scala 262:7]
        node maxLength_hi = cat(maxLength_hi_hi, maxLength_hi_lo) @[Interface.scala 262:7]
        node _maxLength_T_16 = cat(maxLength_hi, maxLength_lo) @[Interface.scala 262:7]
        wire _maxLength_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _maxLength_WIRE_2 <= _maxLength_T_16 @[RegisterBlock.scala 118:82]
        maxLength <= _maxLength_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_85 = eq(UInt<5>("h18"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_85 : @[RegisterBlock.scala 252:38]
        wire _fifoTailReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoTailReg_WIRE <= fifoTailReg @[RegisterBlock.scala 118:51]
        node _fifoTailReg_T_4 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoTailReg_T_5 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoTailReg_T_6 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoTailReg_T_7 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoTailReg_T_8 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoTailReg_T_9 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoTailReg_T_10 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoTailReg_T_11 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoTailReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoTailReg_byte_original = bits(_fifoTailReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoTailReg_T_12 = mux(_fifoTailReg_T_4, fifoTailReg_byte_wdata, fifoTailReg_byte_original) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_1 = bits(_fifoTailReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoTailReg_T_13 = mux(_fifoTailReg_T_5, fifoTailReg_byte_wdata_1, fifoTailReg_byte_original_1) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_2 = bits(_fifoTailReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoTailReg_T_14 = mux(_fifoTailReg_T_6, fifoTailReg_byte_wdata_2, fifoTailReg_byte_original_2) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_3 = bits(_fifoTailReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoTailReg_T_15 = mux(_fifoTailReg_T_7, fifoTailReg_byte_wdata_3, fifoTailReg_byte_original_3) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_4 = bits(_fifoTailReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoTailReg_T_16 = mux(_fifoTailReg_T_8, fifoTailReg_byte_wdata_4, fifoTailReg_byte_original_4) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_5 = bits(_fifoTailReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoTailReg_T_17 = mux(_fifoTailReg_T_9, fifoTailReg_byte_wdata_5, fifoTailReg_byte_original_5) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_6 = bits(_fifoTailReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoTailReg_T_18 = mux(_fifoTailReg_T_10, fifoTailReg_byte_wdata_6, fifoTailReg_byte_original_6) @[Interface.scala 259:14]
        node fifoTailReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoTailReg_byte_original_7 = bits(_fifoTailReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoTailReg_T_19 = mux(_fifoTailReg_T_11, fifoTailReg_byte_wdata_7, fifoTailReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoTailReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[0] <= _fifoTailReg_T_12 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[1] <= _fifoTailReg_T_13 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[2] <= _fifoTailReg_T_14 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[3] <= _fifoTailReg_T_15 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[4] <= _fifoTailReg_T_16 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[5] <= _fifoTailReg_T_17 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[6] <= _fifoTailReg_T_18 @[Interface.scala 254:12]
        _fifoTailReg_WIRE_1[7] <= _fifoTailReg_T_19 @[Interface.scala 254:12]
        node fifoTailReg_lo_lo = cat(_fifoTailReg_WIRE_1[1], _fifoTailReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoTailReg_lo_hi = cat(_fifoTailReg_WIRE_1[3], _fifoTailReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoTailReg_lo = cat(fifoTailReg_lo_hi, fifoTailReg_lo_lo) @[Interface.scala 262:7]
        node fifoTailReg_hi_lo = cat(_fifoTailReg_WIRE_1[5], _fifoTailReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoTailReg_hi_hi = cat(_fifoTailReg_WIRE_1[7], _fifoTailReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoTailReg_hi = cat(fifoTailReg_hi_hi, fifoTailReg_hi_lo) @[Interface.scala 262:7]
        node _fifoTailReg_T_20 = cat(fifoTailReg_hi, fifoTailReg_lo) @[Interface.scala 262:7]
        wire _fifoTailReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoTailReg_WIRE_2 <= _fifoTailReg_T_20 @[RegisterBlock.scala 118:82]
        fifoTailReg <= _fifoTailReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_86 = eq(UInt<6>("h20"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_86 : @[RegisterBlock.scala 252:38]
        wire _fifoHeadReg_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _fifoHeadReg_WIRE <= fifoHeadReg @[RegisterBlock.scala 118:51]
        node _fifoHeadReg_T_4 = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _fifoHeadReg_T_5 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _fifoHeadReg_T_6 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _fifoHeadReg_T_7 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _fifoHeadReg_T_8 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _fifoHeadReg_T_9 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _fifoHeadReg_T_10 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _fifoHeadReg_T_11 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node fifoHeadReg_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original = bits(_fifoHeadReg_WIRE, 7, 0) @[Interface.scala 258:39]
        node _fifoHeadReg_T_12 = mux(_fifoHeadReg_T_4, fifoHeadReg_byte_wdata, fifoHeadReg_byte_original) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_1 = bits(_fifoHeadReg_WIRE, 15, 8) @[Interface.scala 258:39]
        node _fifoHeadReg_T_13 = mux(_fifoHeadReg_T_5, fifoHeadReg_byte_wdata_1, fifoHeadReg_byte_original_1) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_2 = bits(_fifoHeadReg_WIRE, 23, 16) @[Interface.scala 258:39]
        node _fifoHeadReg_T_14 = mux(_fifoHeadReg_T_6, fifoHeadReg_byte_wdata_2, fifoHeadReg_byte_original_2) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_3 = bits(_fifoHeadReg_WIRE, 31, 24) @[Interface.scala 258:39]
        node _fifoHeadReg_T_15 = mux(_fifoHeadReg_T_7, fifoHeadReg_byte_wdata_3, fifoHeadReg_byte_original_3) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_4 = bits(_fifoHeadReg_WIRE, 39, 32) @[Interface.scala 258:39]
        node _fifoHeadReg_T_16 = mux(_fifoHeadReg_T_8, fifoHeadReg_byte_wdata_4, fifoHeadReg_byte_original_4) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_5 = bits(_fifoHeadReg_WIRE, 47, 40) @[Interface.scala 258:39]
        node _fifoHeadReg_T_17 = mux(_fifoHeadReg_T_9, fifoHeadReg_byte_wdata_5, fifoHeadReg_byte_original_5) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_6 = bits(_fifoHeadReg_WIRE, 55, 48) @[Interface.scala 258:39]
        node _fifoHeadReg_T_18 = mux(_fifoHeadReg_T_10, fifoHeadReg_byte_wdata_6, fifoHeadReg_byte_original_6) @[Interface.scala 259:14]
        node fifoHeadReg_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node fifoHeadReg_byte_original_7 = bits(_fifoHeadReg_WIRE, 63, 56) @[Interface.scala 258:39]
        node _fifoHeadReg_T_19 = mux(_fifoHeadReg_T_11, fifoHeadReg_byte_wdata_7, fifoHeadReg_byte_original_7) @[Interface.scala 259:14]
        wire _fifoHeadReg_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[0] <= _fifoHeadReg_T_12 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[1] <= _fifoHeadReg_T_13 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[2] <= _fifoHeadReg_T_14 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[3] <= _fifoHeadReg_T_15 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[4] <= _fifoHeadReg_T_16 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[5] <= _fifoHeadReg_T_17 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[6] <= _fifoHeadReg_T_18 @[Interface.scala 254:12]
        _fifoHeadReg_WIRE_1[7] <= _fifoHeadReg_T_19 @[Interface.scala 254:12]
        node fifoHeadReg_lo_lo = cat(_fifoHeadReg_WIRE_1[1], _fifoHeadReg_WIRE_1[0]) @[Interface.scala 262:7]
        node fifoHeadReg_lo_hi = cat(_fifoHeadReg_WIRE_1[3], _fifoHeadReg_WIRE_1[2]) @[Interface.scala 262:7]
        node fifoHeadReg_lo = cat(fifoHeadReg_lo_hi, fifoHeadReg_lo_lo) @[Interface.scala 262:7]
        node fifoHeadReg_hi_lo = cat(_fifoHeadReg_WIRE_1[5], _fifoHeadReg_WIRE_1[4]) @[Interface.scala 262:7]
        node fifoHeadReg_hi_hi = cat(_fifoHeadReg_WIRE_1[7], _fifoHeadReg_WIRE_1[6]) @[Interface.scala 262:7]
        node fifoHeadReg_hi = cat(fifoHeadReg_hi_hi, fifoHeadReg_hi_lo) @[Interface.scala 262:7]
        node _fifoHeadReg_T_20 = cat(fifoHeadReg_hi, fifoHeadReg_lo) @[Interface.scala 262:7]
        wire _fifoHeadReg_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _fifoHeadReg_WIRE_2 <= _fifoHeadReg_T_20 @[RegisterBlock.scala 118:82]
        fifoHeadReg <= _fifoHeadReg_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_87 = eq(UInt<6>("h28"), wrAddr) @[RegisterBlock.scala 252:26]
      when _T_87 : @[RegisterBlock.scala 252:38]
        wire _procInterrupt_WIRE : UInt<64> @[RegisterBlock.scala 118:51]
        _procInterrupt_WIRE <= procInterrupt @[RegisterBlock.scala 118:51]
        node _procInterrupt_T = bits(wrReqData_.bits.strb, 0, 0) @[Interface.scala 255:13]
        node _procInterrupt_T_1 = bits(wrReqData_.bits.strb, 1, 1) @[Interface.scala 255:13]
        node _procInterrupt_T_2 = bits(wrReqData_.bits.strb, 2, 2) @[Interface.scala 255:13]
        node _procInterrupt_T_3 = bits(wrReqData_.bits.strb, 3, 3) @[Interface.scala 255:13]
        node _procInterrupt_T_4 = bits(wrReqData_.bits.strb, 4, 4) @[Interface.scala 255:13]
        node _procInterrupt_T_5 = bits(wrReqData_.bits.strb, 5, 5) @[Interface.scala 255:13]
        node _procInterrupt_T_6 = bits(wrReqData_.bits.strb, 6, 6) @[Interface.scala 255:13]
        node _procInterrupt_T_7 = bits(wrReqData_.bits.strb, 7, 7) @[Interface.scala 255:13]
        node procInterrupt_byte_wdata = bits(wrReqData_.bits.data, 7, 0) @[Interface.scala 257:33]
        node procInterrupt_byte_original = bits(_procInterrupt_WIRE, 7, 0) @[Interface.scala 258:39]
        node _procInterrupt_T_8 = mux(_procInterrupt_T, procInterrupt_byte_wdata, procInterrupt_byte_original) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_1 = bits(wrReqData_.bits.data, 15, 8) @[Interface.scala 257:33]
        node procInterrupt_byte_original_1 = bits(_procInterrupt_WIRE, 15, 8) @[Interface.scala 258:39]
        node _procInterrupt_T_9 = mux(_procInterrupt_T_1, procInterrupt_byte_wdata_1, procInterrupt_byte_original_1) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_2 = bits(wrReqData_.bits.data, 23, 16) @[Interface.scala 257:33]
        node procInterrupt_byte_original_2 = bits(_procInterrupt_WIRE, 23, 16) @[Interface.scala 258:39]
        node _procInterrupt_T_10 = mux(_procInterrupt_T_2, procInterrupt_byte_wdata_2, procInterrupt_byte_original_2) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_3 = bits(wrReqData_.bits.data, 31, 24) @[Interface.scala 257:33]
        node procInterrupt_byte_original_3 = bits(_procInterrupt_WIRE, 31, 24) @[Interface.scala 258:39]
        node _procInterrupt_T_11 = mux(_procInterrupt_T_3, procInterrupt_byte_wdata_3, procInterrupt_byte_original_3) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_4 = bits(wrReqData_.bits.data, 39, 32) @[Interface.scala 257:33]
        node procInterrupt_byte_original_4 = bits(_procInterrupt_WIRE, 39, 32) @[Interface.scala 258:39]
        node _procInterrupt_T_12 = mux(_procInterrupt_T_4, procInterrupt_byte_wdata_4, procInterrupt_byte_original_4) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_5 = bits(wrReqData_.bits.data, 47, 40) @[Interface.scala 257:33]
        node procInterrupt_byte_original_5 = bits(_procInterrupt_WIRE, 47, 40) @[Interface.scala 258:39]
        node _procInterrupt_T_13 = mux(_procInterrupt_T_5, procInterrupt_byte_wdata_5, procInterrupt_byte_original_5) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_6 = bits(wrReqData_.bits.data, 55, 48) @[Interface.scala 257:33]
        node procInterrupt_byte_original_6 = bits(_procInterrupt_WIRE, 55, 48) @[Interface.scala 258:39]
        node _procInterrupt_T_14 = mux(_procInterrupt_T_6, procInterrupt_byte_wdata_6, procInterrupt_byte_original_6) @[Interface.scala 259:14]
        node procInterrupt_byte_wdata_7 = bits(wrReqData_.bits.data, 63, 56) @[Interface.scala 257:33]
        node procInterrupt_byte_original_7 = bits(_procInterrupt_WIRE, 63, 56) @[Interface.scala 258:39]
        node _procInterrupt_T_15 = mux(_procInterrupt_T_7, procInterrupt_byte_wdata_7, procInterrupt_byte_original_7) @[Interface.scala 259:14]
        wire _procInterrupt_WIRE_1 : UInt<8>[8] @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[0] <= _procInterrupt_T_8 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[1] <= _procInterrupt_T_9 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[2] <= _procInterrupt_T_10 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[3] <= _procInterrupt_T_11 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[4] <= _procInterrupt_T_12 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[5] <= _procInterrupt_T_13 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[6] <= _procInterrupt_T_14 @[Interface.scala 254:12]
        _procInterrupt_WIRE_1[7] <= _procInterrupt_T_15 @[Interface.scala 254:12]
        node procInterrupt_lo_lo = cat(_procInterrupt_WIRE_1[1], _procInterrupt_WIRE_1[0]) @[Interface.scala 262:7]
        node procInterrupt_lo_hi = cat(_procInterrupt_WIRE_1[3], _procInterrupt_WIRE_1[2]) @[Interface.scala 262:7]
        node procInterrupt_lo = cat(procInterrupt_lo_hi, procInterrupt_lo_lo) @[Interface.scala 262:7]
        node procInterrupt_hi_lo = cat(_procInterrupt_WIRE_1[5], _procInterrupt_WIRE_1[4]) @[Interface.scala 262:7]
        node procInterrupt_hi_hi = cat(_procInterrupt_WIRE_1[7], _procInterrupt_WIRE_1[6]) @[Interface.scala 262:7]
        node procInterrupt_hi = cat(procInterrupt_hi_hi, procInterrupt_hi_lo) @[Interface.scala 262:7]
        node _procInterrupt_T_16 = cat(procInterrupt_hi, procInterrupt_lo) @[Interface.scala 262:7]
        wire _procInterrupt_WIRE_2 : UInt<64> @[RegisterBlock.scala 118:82]
        _procInterrupt_WIRE_2 <= _procInterrupt_T_16 @[RegisterBlock.scala 118:82]
        procInterrupt <= _procInterrupt_WIRE_2 @[RegisterBlock.scala 118:11]
      node _T_88 = asUInt(reset) @[RegisterBlock.scala 198:11]
      node _T_89 = eq(_T_88, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
      when _T_89 : @[RegisterBlock.scala 198:11]
        node _T_90 = eq(wrReq, UInt<1>("h0")) @[RegisterBlock.scala 198:11]
        when _T_90 : @[RegisterBlock.scala 198:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegisterBlock.scala:198 assert(wrReq)\n") : printf_1 @[RegisterBlock.scala 198:11]
        assert(clock, wrReq, UInt<1>("h1"), "") : assert_1 @[RegisterBlock.scala 198:11]
      wrReq_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wrReqData_.ready <= UInt<1>("h1") @[Decoupled.scala 83:20]
      wire resp_1 : { resp : UInt<2>} @[RegisterBlock.scala 203:20]
      resp_1.resp <= UInt<2>("h0") @[RegisterBlock.scala 204:15]
      saxil.b.valid <= UInt<1>("h1") @[Decoupled.scala 65:20]
      saxil.b.bits <= resp_1 @[Decoupled.scala 66:19]

  module readyValidMem :
    input clock : Clock
    input reset : Reset
    output io : { read : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}, write : { flip address : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip data : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}, writeBurst : { flip len : UInt<4>, flip last : UInt<1>}, readBurst : { flip len : UInt<4>}}
    output axi : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<64>, WSTRB : UInt<8>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}

    reg writeDataDone : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[readyValidMem.scala 47:30]
    reg writeHandshakeDetector : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[readyValidMem.scala 49:39]
    wire _view__aw_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 56:42]
    _view__aw_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    axi.AWREGION <= _view__aw_bits_WIRE.region @[readyValidMem.scala 56:10]
    axi.AWQOS <= _view__aw_bits_WIRE.qos @[readyValidMem.scala 56:10]
    axi.AWPROT <= _view__aw_bits_WIRE.prot @[readyValidMem.scala 56:10]
    axi.AWCACHE <= _view__aw_bits_WIRE.cache @[readyValidMem.scala 56:10]
    axi.AWLOCK <= _view__aw_bits_WIRE.lock @[readyValidMem.scala 56:10]
    axi.AWBURST <= _view__aw_bits_WIRE.burst @[readyValidMem.scala 56:10]
    axi.AWSIZE <= _view__aw_bits_WIRE.size @[readyValidMem.scala 56:10]
    axi.AWLEN <= _view__aw_bits_WIRE.len @[readyValidMem.scala 56:10]
    axi.AWADDR <= _view__aw_bits_WIRE.addr @[readyValidMem.scala 56:10]
    axi.AWID <= _view__aw_bits_WIRE.id @[readyValidMem.scala 56:10]
    wire _view__ar_bits_WIRE : { id : UInt<4>, addr : UInt<64>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>} @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.region <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.qos <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.prot <= UInt<3>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.cache <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.lock <= UInt<1>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.burst <= UInt<2>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.size <= UInt<3>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.len <= UInt<8>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.addr <= UInt<64>("h0") @[readyValidMem.scala 56:42]
    _view__ar_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    axi.ARREGION <= _view__ar_bits_WIRE.region @[readyValidMem.scala 56:10]
    axi.ARQOS <= _view__ar_bits_WIRE.qos @[readyValidMem.scala 56:10]
    axi.ARPROT <= _view__ar_bits_WIRE.prot @[readyValidMem.scala 56:10]
    axi.ARCACHE <= _view__ar_bits_WIRE.cache @[readyValidMem.scala 56:10]
    axi.ARLOCK <= _view__ar_bits_WIRE.lock @[readyValidMem.scala 56:10]
    axi.ARBURST <= _view__ar_bits_WIRE.burst @[readyValidMem.scala 56:10]
    axi.ARSIZE <= _view__ar_bits_WIRE.size @[readyValidMem.scala 56:10]
    axi.ARLEN <= _view__ar_bits_WIRE.len @[readyValidMem.scala 56:10]
    axi.ARADDR <= _view__ar_bits_WIRE.addr @[readyValidMem.scala 56:10]
    axi.ARID <= _view__ar_bits_WIRE.id @[readyValidMem.scala 56:10]
    wire _view__w_bits_WIRE : { id : UInt<4>, data : UInt<64>, strb : UInt<8>, last : UInt<1>} @[readyValidMem.scala 56:42]
    _view__w_bits_WIRE.last <= UInt<1>("h0") @[readyValidMem.scala 56:42]
    _view__w_bits_WIRE.strb <= UInt<8>("h0") @[readyValidMem.scala 56:42]
    _view__w_bits_WIRE.data <= UInt<64>("h0") @[readyValidMem.scala 56:42]
    _view__w_bits_WIRE.id <= UInt<4>("h0") @[readyValidMem.scala 56:42]
    axi.WLAST <= _view__w_bits_WIRE.last @[readyValidMem.scala 56:10]
    axi.WSTRB <= _view__w_bits_WIRE.strb @[readyValidMem.scala 56:10]
    axi.WDATA <= _view__w_bits_WIRE.data @[readyValidMem.scala 56:10]
    axi.WID <= _view__w_bits_WIRE.id @[readyValidMem.scala 56:10]
    axi.WVALID <= UInt<1>("h0") @[readyValidMem.scala 76:19]
    node _T = and(io.write.data.valid, axi.WREADY) @[readyValidMem.scala 81:36]
    node _T_1 = not(writeHandshakeDetector) @[readyValidMem.scala 81:58]
    node _T_2 = and(_T, _T_1) @[readyValidMem.scala 81:55]
    when _T_2 : @[readyValidMem.scala 81:82]
      axi.WVALID <= UInt<1>("h1") @[readyValidMem.scala 83:25]
      node _T_3 = eq(io.writeBurst.last, UInt<1>("h1")) @[readyValidMem.scala 84:37]
      when _T_3 : @[readyValidMem.scala 84:45]
        writeHandshakeDetector <= UInt<1>("h1") @[readyValidMem.scala 85:34]
    else :
      when axi.BVALID : @[readyValidMem.scala 88:34]
        writeHandshakeDetector <= UInt<1>("h0") @[readyValidMem.scala 90:32]
    node _io_write_data_ready_T = not(writeHandshakeDetector) @[readyValidMem.scala 94:56]
    node _io_write_data_ready_T_1 = and(axi.WREADY, _io_write_data_ready_T) @[readyValidMem.scala 94:53]
    io.write.data.ready <= _io_write_data_ready_T_1 @[readyValidMem.scala 94:34]
    axi.AWVALID <= io.write.address.valid @[readyValidMem.scala 116:28]
    axi.AWADDR <= io.write.address.bits @[readyValidMem.scala 117:28]
    axi.AWLEN <= io.writeBurst.len @[readyValidMem.scala 120:30]
    axi.AWSIZE <= UInt<2>("h3") @[readyValidMem.scala 126:28]
    axi.AWBURST <= UInt<1>("h1") @[readyValidMem.scala 127:28]
    axi.WDATA <= io.write.data.bits @[readyValidMem.scala 130:28]
    node _view__w_bits_strb_T = asUInt(asSInt(UInt<8>("hff"))) @[readyValidMem.scala 131:60]
    axi.WSTRB <= _view__w_bits_strb_T @[readyValidMem.scala 131:28]
    axi.WLAST <= io.writeBurst.last @[readyValidMem.scala 134:30]
    axi.BREADY <= UInt<1>("h1") @[readyValidMem.scala 140:28]
    io.write.address.ready <= axi.AWREADY @[readyValidMem.scala 143:32]
    axi.ARVALID <= io.read.address.valid @[readyValidMem.scala 153:31]
    axi.ARADDR <= io.read.address.bits @[readyValidMem.scala 154:31]
    io.read.address.ready <= axi.ARREADY @[readyValidMem.scala 155:31]
    axi.ARLEN <= io.readBurst.len @[readyValidMem.scala 158:33]
    axi.ARSIZE <= UInt<2>("h3") @[readyValidMem.scala 164:31]
    axi.ARID <= UInt<1>("h0") @[readyValidMem.scala 165:31]
    axi.ARBURST <= UInt<1>("h1") @[readyValidMem.scala 166:31]
    axi.ARPROT <= UInt<1>("h0") @[readyValidMem.scala 168:31]
    axi.RREADY <= io.read.data.ready @[readyValidMem.scala 169:31]
    io.read.data.valid <= axi.RVALID @[readyValidMem.scala 171:31]
    io.read.data.bits <= axi.RDATA @[readyValidMem.scala 172:31]

  module stealSide :
    input clock : Clock
    input reset : Reset
    output io : { flip axi_mgmt_vss : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}[1], vss_axi_full : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<64>, WSTRB : UInt<8>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}[1], taskOut : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<64>}[1], flip taskIn : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<64>}[1]}
    output connSyncSide : { ctrl : { serveStealReq : { ready : UInt<1>, flip valid : UInt<1>}, stealReq : { ready : UInt<1>, flip valid : UInt<1>}}, data : { availableTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, flip qOutTask : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}}[0]

    inst stealNW_TQ of stealNW_TQ @[stealSide.scala 55:28]
    stealNW_TQ.clock <= clock
    stealNW_TQ.reset <= reset
    inst virtualStealServers_0 of virtualStealServer @[stealSide.scala 66:75]
    virtualStealServers_0.clock <= clock
    virtualStealServers_0.reset <= reset
    virtualStealServers_0.io.axi_mgmt <= io.axi_mgmt_vss[0] @[stealSide.scala 87:28]
    virtualStealServers_0.io.ntwDataUnitOccupancy <= stealNW_TQ.io.ntwDataUnitOccupancyVSS[0] @[stealSide.scala 88:56]
    inst vssRvm_0 of readyValidMem @[stealSide.scala 91:68]
    vssRvm_0.clock <= clock
    vssRvm_0.reset <= reset
    vssRvm_0.io.read.address <= virtualStealServers_0.io.read_address @[stealSide.scala 95:47]
    virtualStealServers_0.io.read_data <= vssRvm_0.io.read.data @[stealSide.scala 96:47]
    vssRvm_0.io.write.address <= virtualStealServers_0.io.write_address @[stealSide.scala 97:47]
    vssRvm_0.io.write.data <= virtualStealServers_0.io.write_data @[stealSide.scala 98:47]
    vssRvm_0.io.readBurst.len <= virtualStealServers_0.io.read_burst_len @[stealSide.scala 99:47]
    vssRvm_0.io.writeBurst.len <= virtualStealServers_0.io.write_burst_len @[stealSide.scala 100:47]
    vssRvm_0.io.writeBurst.last <= virtualStealServers_0.io.write_last @[stealSide.scala 101:47]
    vssRvm_0.axi.BRESP <= io.vss_axi_full[0].BRESP @[stealSide.scala 102:47]
    vssRvm_0.axi.BID <= io.vss_axi_full[0].BID @[stealSide.scala 102:47]
    vssRvm_0.axi.BVALID <= io.vss_axi_full[0].BVALID @[stealSide.scala 102:47]
    io.vss_axi_full[0].BREADY <= vssRvm_0.axi.BREADY @[stealSide.scala 102:47]
    io.vss_axi_full[0].WLAST <= vssRvm_0.axi.WLAST @[stealSide.scala 102:47]
    io.vss_axi_full[0].WSTRB <= vssRvm_0.axi.WSTRB @[stealSide.scala 102:47]
    io.vss_axi_full[0].WDATA <= vssRvm_0.axi.WDATA @[stealSide.scala 102:47]
    io.vss_axi_full[0].WID <= vssRvm_0.axi.WID @[stealSide.scala 102:47]
    io.vss_axi_full[0].WVALID <= vssRvm_0.axi.WVALID @[stealSide.scala 102:47]
    vssRvm_0.axi.WREADY <= io.vss_axi_full[0].WREADY @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWREGION <= vssRvm_0.axi.AWREGION @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWQOS <= vssRvm_0.axi.AWQOS @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWPROT <= vssRvm_0.axi.AWPROT @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWCACHE <= vssRvm_0.axi.AWCACHE @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWLOCK <= vssRvm_0.axi.AWLOCK @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWBURST <= vssRvm_0.axi.AWBURST @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWSIZE <= vssRvm_0.axi.AWSIZE @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWLEN <= vssRvm_0.axi.AWLEN @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWADDR <= vssRvm_0.axi.AWADDR @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWID <= vssRvm_0.axi.AWID @[stealSide.scala 102:47]
    io.vss_axi_full[0].AWVALID <= vssRvm_0.axi.AWVALID @[stealSide.scala 102:47]
    vssRvm_0.axi.AWREADY <= io.vss_axi_full[0].AWREADY @[stealSide.scala 102:47]
    vssRvm_0.axi.RLAST <= io.vss_axi_full[0].RLAST @[stealSide.scala 102:47]
    vssRvm_0.axi.RRESP <= io.vss_axi_full[0].RRESP @[stealSide.scala 102:47]
    vssRvm_0.axi.RDATA <= io.vss_axi_full[0].RDATA @[stealSide.scala 102:47]
    vssRvm_0.axi.RID <= io.vss_axi_full[0].RID @[stealSide.scala 102:47]
    vssRvm_0.axi.RVALID <= io.vss_axi_full[0].RVALID @[stealSide.scala 102:47]
    io.vss_axi_full[0].RREADY <= vssRvm_0.axi.RREADY @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARREGION <= vssRvm_0.axi.ARREGION @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARQOS <= vssRvm_0.axi.ARQOS @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARPROT <= vssRvm_0.axi.ARPROT @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARCACHE <= vssRvm_0.axi.ARCACHE @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARLOCK <= vssRvm_0.axi.ARLOCK @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARBURST <= vssRvm_0.axi.ARBURST @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARSIZE <= vssRvm_0.axi.ARSIZE @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARLEN <= vssRvm_0.axi.ARLEN @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARADDR <= vssRvm_0.axi.ARADDR @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARID <= vssRvm_0.axi.ARID @[stealSide.scala 102:47]
    io.vss_axi_full[0].ARVALID <= vssRvm_0.axi.ARVALID @[stealSide.scala 102:47]
    vssRvm_0.axi.ARREADY <= io.vss_axi_full[0].ARREADY @[stealSide.scala 102:47]
    virtualStealServers_0.io.connNetwork <= stealNW_TQ.io.connVSS[0] @[stealSide.scala 103:47]
    io.taskOut[0].TDATA <= stealNW_TQ.io.connPE[0].pop.bits @[stealSide.scala 107:39]
    io.taskOut[0].TVALID <= stealNW_TQ.io.connPE[0].pop.valid @[stealSide.scala 107:39]
    stealNW_TQ.io.connPE[0].pop.ready <= io.taskOut[0].TREADY @[stealSide.scala 107:39]
    stealNW_TQ.io.connPE[0].push.bits <= io.taskIn[0].TDATA @[stealSide.scala 109:43]
    stealNW_TQ.io.connPE[0].push.valid <= io.taskIn[0].TVALID @[stealSide.scala 109:43]
    io.taskIn[0].TREADY <= stealNW_TQ.io.connPE[0].push.ready @[stealSide.scala 109:43]

  module paper_exp_dae_0__peCountExecute_1__vssNumberExecute_1 :
    input clock : Clock
    input reset : UInt<1>
    output execute_stealSide : { flip axi_mgmt_vss : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARADDR : UInt<6>, ARPROT : UInt<3>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWADDR : UInt<6>, AWPROT : UInt<3>, flip WREADY : UInt<1>, WVALID : UInt<1>, WDATA : UInt<64>, WSTRB : UInt<8>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BRESP : UInt<2>}[1], vss_axi_full : { flip ARREADY : UInt<1>, ARVALID : UInt<1>, ARID : UInt<4>, ARADDR : UInt<64>, ARLEN : UInt<8>, ARSIZE : UInt<3>, ARBURST : UInt<2>, ARLOCK : UInt<1>, ARCACHE : UInt<4>, ARPROT : UInt<3>, ARQOS : UInt<4>, ARREGION : UInt<4>, RREADY : UInt<1>, flip RVALID : UInt<1>, flip RID : UInt<4>, flip RDATA : UInt<64>, flip RRESP : UInt<2>, flip RLAST : UInt<1>, flip AWREADY : UInt<1>, AWVALID : UInt<1>, AWID : UInt<4>, AWADDR : UInt<64>, AWLEN : UInt<8>, AWSIZE : UInt<3>, AWBURST : UInt<2>, AWLOCK : UInt<1>, AWCACHE : UInt<4>, AWPROT : UInt<3>, AWQOS : UInt<4>, AWREGION : UInt<4>, flip WREADY : UInt<1>, WVALID : UInt<1>, WID : UInt<4>, WDATA : UInt<64>, WSTRB : UInt<8>, WLAST : UInt<1>, BREADY : UInt<1>, flip BVALID : UInt<1>, flip BID : UInt<4>, flip BRESP : UInt<2>}[1], taskOut : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<64>}[1], flip taskIn : { flip TREADY : UInt<1>, TVALID : UInt<1>, TDATA : UInt<64>}[1]}

    inst stealSide of stealSide @[fullSysGen.scala 228:29]
    stealSide.clock <= clock
    stealSide.reset <= reset
    stealSide.io.taskIn[0] <= execute_stealSide.taskIn[0] @[fullSysGen.scala 246:23]
    execute_stealSide.taskOut[0].TDATA <= stealSide.io.taskOut[0].TDATA @[fullSysGen.scala 246:23]
    execute_stealSide.taskOut[0].TVALID <= stealSide.io.taskOut[0].TVALID @[fullSysGen.scala 246:23]
    stealSide.io.taskOut[0].TREADY <= execute_stealSide.taskOut[0].TREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].BRESP <= execute_stealSide.vss_axi_full[0].BRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].BID <= execute_stealSide.vss_axi_full[0].BID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].BVALID <= execute_stealSide.vss_axi_full[0].BVALID @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].BREADY <= stealSide.io.vss_axi_full[0].BREADY @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].WLAST <= stealSide.io.vss_axi_full[0].WLAST @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].WSTRB <= stealSide.io.vss_axi_full[0].WSTRB @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].WDATA <= stealSide.io.vss_axi_full[0].WDATA @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].WID <= stealSide.io.vss_axi_full[0].WID @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].WVALID <= stealSide.io.vss_axi_full[0].WVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].WREADY <= execute_stealSide.vss_axi_full[0].WREADY @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWREGION <= stealSide.io.vss_axi_full[0].AWREGION @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWQOS <= stealSide.io.vss_axi_full[0].AWQOS @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWPROT <= stealSide.io.vss_axi_full[0].AWPROT @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWCACHE <= stealSide.io.vss_axi_full[0].AWCACHE @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWLOCK <= stealSide.io.vss_axi_full[0].AWLOCK @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWBURST <= stealSide.io.vss_axi_full[0].AWBURST @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWSIZE <= stealSide.io.vss_axi_full[0].AWSIZE @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWLEN <= stealSide.io.vss_axi_full[0].AWLEN @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWADDR <= stealSide.io.vss_axi_full[0].AWADDR @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWID <= stealSide.io.vss_axi_full[0].AWID @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].AWVALID <= stealSide.io.vss_axi_full[0].AWVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].AWREADY <= execute_stealSide.vss_axi_full[0].AWREADY @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RLAST <= execute_stealSide.vss_axi_full[0].RLAST @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RRESP <= execute_stealSide.vss_axi_full[0].RRESP @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RDATA <= execute_stealSide.vss_axi_full[0].RDATA @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RID <= execute_stealSide.vss_axi_full[0].RID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].RVALID <= execute_stealSide.vss_axi_full[0].RVALID @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].RREADY <= stealSide.io.vss_axi_full[0].RREADY @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARREGION <= stealSide.io.vss_axi_full[0].ARREGION @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARQOS <= stealSide.io.vss_axi_full[0].ARQOS @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARPROT <= stealSide.io.vss_axi_full[0].ARPROT @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARCACHE <= stealSide.io.vss_axi_full[0].ARCACHE @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARLOCK <= stealSide.io.vss_axi_full[0].ARLOCK @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARBURST <= stealSide.io.vss_axi_full[0].ARBURST @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARSIZE <= stealSide.io.vss_axi_full[0].ARSIZE @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARLEN <= stealSide.io.vss_axi_full[0].ARLEN @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARADDR <= stealSide.io.vss_axi_full[0].ARADDR @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARID <= stealSide.io.vss_axi_full[0].ARID @[fullSysGen.scala 246:23]
    execute_stealSide.vss_axi_full[0].ARVALID <= stealSide.io.vss_axi_full[0].ARVALID @[fullSysGen.scala 246:23]
    stealSide.io.vss_axi_full[0].ARREADY <= execute_stealSide.vss_axi_full[0].ARREADY @[fullSysGen.scala 246:23]
    stealSide.io.axi_mgmt_vss[0] <= execute_stealSide.axi_mgmt_vss[0] @[fullSysGen.scala 246:23]

